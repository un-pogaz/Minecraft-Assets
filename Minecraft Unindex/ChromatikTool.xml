<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChromatikTool</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Input.MouseActionInput">
            <summary>
            Static class for Mouse event (click, move...)
            </summary>
        </member>
        <member name="M:System.Windows.Input.MouseActionInput.LeftClick">
            <summary>
            Perform a Left click
            </summary>
        </member>
        <member name="M:System.Windows.Input.MouseActionInput.RightClick">
            <summary>
            Perform a Right click
            </summary>
        </member>
        <member name="M:System.Windows.Input.MouseActionInput.MiddleClick">
            <summary>
            Perform a Middle click
            </summary>
        </member>
        <member name="M:System.Windows.Input.MouseActionInput.WhellRotate(System.Int32)">
            <summary>
            Perform a Whell rotate
            </summary>
            <param name="movePixel"></param>
        </member>
        <member name="M:System.Windows.Input.MouseActionInput.SetPosition(System.Int32,System.Int32)">
            <summary>
            Set the absolute position of the cursor
            </summary>
            <param name="xMove"></param>
            <param name="yMove"></param>
        </member>
        <member name="M:System.Windows.Input.MouseActionInput.Move(System.Int32,System.Int32)">
            <summary>
            Move the cursor
            </summary>
            <param name="xMove"></param>
            <param name="yMove"></param>
        </member>
        <member name="T:System.Windows.Forms.ControlExtension">
            <summary>
            Static extension class for <see cref="T:System.Windows.Forms.Control"/>
            </summary>
        </member>
        <member name="M:System.Windows.Forms.ControlExtension.IntersectsControlsDown(System.Windows.Forms.Control)">
            <summary>
            Get all <see cref="T:System.Windows.Forms.Control"/>'s below the target.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtension.IntersectsControlsDown(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Get all <see cref="T:System.Windows.Forms.Control"/>'s below the target, include the NonVisible's.
            </summary>
            <param name="control"></param>
            <param name="onlyVisible"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtension.IntersectsControlsUp(System.Windows.Forms.Control)">
            <summary>
            Get all <see cref="T:System.Windows.Forms.Control"/>'s above the target.
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtension.IntersectsControlsUp(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Get all <see cref="T:System.Windows.Forms.Control"/>'s above the target, include the NonVisible's.
            </summary>
            <param name="control"></param>
            <param name="onlyVisible"></param>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Forms.ControlExtension.PaintTransparentBackground(System.Windows.Forms.Control)">
            <summary>
            Paints a TRUE transparent background to the control
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:System.Windows.Forms.ControlExtension.PaintTransparentBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a TRUE transparent background to the control
            </summary>
            <param name="control"></param>
            <param name="e"></param>
        </member>
        <member name="T:System.Windows.Forms.LabelTransparent">
            <summary>
            Alternative <see cref="T:System.Windows.Forms.Label"/> with a REAL support of transparent background.
            </summary>
            <remarks>https://stackoverflow.com/questions/5522337/c-sharp-picturebox-transparent-background-doesnt-seem-to-work <!-- 3eme réponse --></remarks>
        </member>
        <member name="M:System.Windows.Forms.LabelTransparent.#ctor">
            <summary>
            Create a alternative <see cref="T:System.Windows.Forms.Label"/> with a REAL support of transparent background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.LabelTransparent.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the background of the control (support TRUE transparent background)
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:System.Windows.Forms.PictureBoxTransparent">
            <summary>
            Alternative <see cref="T:System.Windows.Forms.PictureBox"/> with a REAL support of transparent background.
            </summary>
            <remarks>https://stackoverflow.com/questions/5522337/c-sharp-picturebox-transparent-background-doesnt-seem-to-work <!-- 3eme réponse --></remarks>
        </member>
        <member name="M:System.Windows.Forms.PictureBoxTransparent.#ctor">
            <summary>
            Create a alternative <see cref="T:System.Windows.Forms.PictureBox"/> with a REAL support of transparent background.
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBoxTransparent.Dispose(System.Boolean)">
            <summary></summary>
            <param name="disposing"></param>
        </member>
        <member name="P:System.Windows.Forms.PictureBoxTransparent.AutoRefreshBackground">
            <summary>
            Active the auto refresh of the background
            </summary>
        </member>
        <member name="P:System.Windows.Forms.PictureBoxTransparent.AutoRefreshBackgroundInterval">
            <summary>
            Interval, in milliseconde, betewen the auto refresh of the background
            </summary>
        </member>
        <member name="M:System.Windows.Forms.PictureBoxTransparent.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paint the background of the control (support TRUE transparent background)
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1">
            <summary>
            Represents a read-only collection where the content is based on another collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.SourceCollection">
            <summary>
            Source collection of this <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.#ctor">
            <summary>
            Create a empty <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Create a <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/> where the content is based on another collection.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.Refresh">
            <summary>
            Refresh the content of the <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.Clear">
            <summary>
            Clear <see cref="P:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.Items"/>
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.Add(`0)">
            <summary>
            Add a entry to the <see cref="P:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.Items"/>
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.Items">
            <summary>
            Returns the <see cref="T:System.Collections.Generic.IList`1"/> as <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/> included in a wrapper.
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.Count">
            <summary>
            Gets the number of items contained in the <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>
            </summary>
        </member>
        <member name="P:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Returns the element to the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determines whether <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/> contains a specific value.
            </summary>
            <param name="item">Object to be found in <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>.</param>
            <returns>true if item exists in <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies elements from <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/> to <see cref="T:System.Array"/>, starting at a particular System.Array index.
            </summary>
            <param name="array">One-dimensional System.Array which is the destination of the elements copied from <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>. <see cref="T:System.Array"/> must have zero base indexing.</param>
            <param name="arrayIndex">Zero base index in array from which copying starts.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> has the value null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/> is greater than the amount of space available between arrayIndex and the end of the destination array.</exception>
        </member>
        <member name="M:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.GetEnumerator">
            <summary>
             Returns an enumerator that iterates within <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/> for <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            Finds the specified object and returns the base index zero of the first occurrence throughout the <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>.
            </summary>
            <param name="value">Object to be found in <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>.The value can be null for reference types.</param>
            <returns>Zero base index of the first occurrence of an item in the entire <see cref="T:System.Collections.ObjectModel.AutoRefreshReadOnlyCollection`1"/>, if it exists; if not, -1.</returns> 
        </member>
        <member name="T:System.Collections.Generic.Comparator`1">
            <summary>
            Create a <see cref="T:System.Collections.Generic.IComparer`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:System.Collections.Generic.Comparator`1.Default">
            <summary></summary>
        </member>
        <member name="F:System.Collections.Generic.Comparator`1.TypeCompared">
            <summary>
            The <see cref="T:System.Type"/> of the comparator
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`1.#ctor">
            <summary>
            Create a comparator
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`1.#ctor(System.String[])">
            <summary>
            Create a comparator with a fields
            </summary>
            <param name="fields"></param>
        </member>
        <member name="M:System.Collections.Generic.Comparator`1.#ctor(System.String[],System.Boolean)">
            <summary>
            Create a comparator with a fields
            </summary>
            <param name="fields"></param>
            <param name="includePrivate"></param>
        </member>
        <member name="M:System.Collections.Generic.Comparator`1.Compare(`0,`0)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`1.Compare(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`1.Equals(`0,`0)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`1.Equals(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`1.GetHashCode(`0)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`1.GetHashCode(System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Collections.Generic.Comparator`2">
            <summary>
            Create a <see cref="T:System.Collections.Generic.IComparer`1"/> for a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.DefaultKeyComparator">
            <summary>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> for the Keys
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.DefaultalueComparator">
            <summary>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> for the Values
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.DefaultOnlyKeys">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.DefaultOnlyValues">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.DefaultKeysAndValues">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.DefaultValuesAndKeys">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.Default">
            <summary>== KeysAndValues</summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.KeyComparator">
            <summary>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> for the Keys
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Comparator`2.TypeOfKey">
            <summary>
            The <see cref="T:System.Type"/> for the Keys
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.ValueComparator">
            <summary>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> for the Values
            </summary>
        </member>
        <member name="F:System.Collections.Generic.Comparator`2.TypeOfValue">
            <summary>
            The <see cref="T:System.Type"/> for the Values
            </summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.OnlyKeys">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.OnlyValues">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.KeysAndValues">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Generic.Comparator`2.ValuesAndKeys">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`2.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`2.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{`1})">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`2.Compare(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Compare two <see cref="T:System.Collections.Generic.KeyValuePair`2"/> <see langword="null"/>
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Comparator`2.Compare(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Collections.Generic.ListKeyValueSort">
            <summary>
            Enume for sort a <see cref="T:System.Collections.Generic.List`1"/> using sa <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
        </member>
        <member name="F:System.Collections.Generic.ListKeyValueSort.OnlyKeys">
            <summary></summary>
        </member>
        <member name="F:System.Collections.Generic.ListKeyValueSort.OnlyValues">
            <summary></summary>
        </member>
        <member name="F:System.Collections.Generic.ListKeyValueSort.KeysAndValues">
            <summary></summary>
        </member>
        <member name="F:System.Collections.Generic.ListKeyValueSort.ValuesAndKeys">
            <summary></summary>
        </member>
        <member name="T:System.Collections.Generic.ListExtension">
            <summary>
            Static class to extend <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.Sort``2(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary></summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVlaue"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.Sort``2(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.ListKeyValueSort)">
            <summary></summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVlaue"></typeparam>
            <param name="list"></param>
            <param name="KeyValueSort"></param>
        </member>
        <member name="M:System.Collections.Generic.ListExtension.Add``2(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{``0,``1}},``0,``1)">
            <summary></summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TVlaue"></typeparam>
            <param name="list"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:System.IO.FileSystemComparator">
            <summary>
            Class for string compar withe the system file
            </summary>
        </member>
        <member name="P:System.IO.FileSystemComparator.CurrentCulture">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemComparator.CurrentCultureFolderAfter">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemComparator.InvariantCulture">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemComparator.InvariantCultureFolderAfter">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemComparator.Ordinal">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemComparator.OrdinalFolderAfter">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemComparator.Default">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileSystemComparator.Create(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Create a new <see cref="T:System.IO.FileSystemComparator"/> with the specified culture.
            </summary>
            <param name="culture"></param>
            <param name="folderAfter"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileSystemComparator.#ctor(System.StringComparer,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileSystemComparator.Compare(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="T:System.IO.FileInfoExtension">
            <summary>
            Static class for extend <see cref="T:System.IO.FileInfo"/>
            </summary>
        </member>
        <member name="M:System.IO.FileInfoExtension.LengthKo(System.IO.FileInfo)">
            <summary>
            Get the size of the file in Ko
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.FileInfoExtension.LengthMo(System.IO.FileInfo)">
            <summary>
            Get the size of the file in Mo
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:System.IO.PathTool">
            <summary>
            Various methodes and properties for extend <see cref="T:System.IO.Path"/>
            </summary>
        </member>
        <member name="P:System.IO.PathTool.InvalidFileNameChars">
            <summary>
            Invalid characters for file names.
            </summary>
        </member>
        <member name="P:System.IO.PathTool.InvalidPathChars">
            <summary>
            Invalid characters for directories.
            </summary>
        </member>
        <member name="P:System.IO.PathTool.InvalidNames">
            <summary>
            Invalid names for directories and files.
            </summary>
        </member>
        <member name="M:System.IO.PathTool.IsValideFileName(System.String,System.Boolean)">
            <summary>
            Verifie que le nom de fichier est valide
            </summary>
            <param name="path"></param>
            <param name="exception"> </param>
            <returns>True si le nom est valide</returns>
            <exception cref="T:System.IO.InvalidPathException"></exception>
        </member>
        <member name="M:System.IO.PathTool.IsValidePath(System.String,System.Boolean)">
            <summary>
            Verifie que le chemin est valide
            </summary>
            <param name="path"></param>
            <param name="exception"> </param>
            <returns>True si le chemin est valide</returns>
            <exception cref="T:System.IO.InvalidPathException"></exception>
        </member>
        <member name="M:System.IO.PathTool.ToLocalDirectorySeparator(System.String)">
            <summary>
            To local Directory Separator Char
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathTool.MakeValidFileName(System.String)">
            <summary>
            Replace invalid characters in file name with _
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.IO.PathTool.MakeValidPath(System.String)">
            <summary>
            Replace invalid characters in file name with _
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:System.IO.InvalidPathException">
            <summary>
            Exception for invalide path
            </summary>
        </member>
        <member name="M:System.IO.InvalidPathException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.IO.InvalidPathException"/>
            </summary>
        </member>
        <member name="P:System.IO.InvalidPathException.Chars">
            <summary>
            Message for characters
            </summary>
        </member>
        <member name="P:System.IO.InvalidPathException.Name">
            <summary>
            Message for
            </summary>
        </member>
        <member name="P:System.IO.InvalidPathException.End">
            <summary>
            Message for end
            </summary>
        </member>
        <member name="M:System.IO.InvalidPathException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.IO.InvalidPathException"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:System.IO.InvalidPathException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:System.IO.InvalidPathException"/>
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:System.IO.RecursiveSearch">
            <summary>
            Static class for a safely search in a folder
            </summary>
        </member>
        <member name="M:System.IO.RecursiveSearch.GetFiles(System.String)">
            <summary>
            Obtains safely all file in the target folder.
            </summary>
            <param name="path">Target folder</param>
        </member>
        <member name="M:System.IO.RecursiveSearch.GetFiles(System.String,System.String)">
            <summary>
            Obtains safely file correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
        </member>
        <member name="M:System.IO.RecursiveSearch.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Obtains safely file correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
            <param name="searchOption"></param>
        </member>
        <member name="M:System.IO.RecursiveSearch.GetFiles(System.String,System.String[])">
            <summary>
            Obtains safely file correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
        </member>
        <member name="M:System.IO.RecursiveSearch.GetFiles(System.String,System.String[],System.IO.SearchOption)">
            <summary>
            Obtains safely file correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
            <param name="searchOption"></param>
        </member>
        <member name="M:System.IO.RecursiveSearch.EnumerateFiles(System.String)">
            <summary>
            Enumerable safely all files in the target folder.
            </summary>
            <param name="path">Target folder</param>
        </member>
        <member name="M:System.IO.RecursiveSearch.EnumerateFiles(System.String,System.String)">
            <summary>
            Enumerable safely files correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
        </member>
        <member name="M:System.IO.RecursiveSearch.EnumerateFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Enumerable safely files correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
            <param name="searchOption"></param>
        </member>
        <member name="M:System.IO.RecursiveSearch.GetDirectorys(System.String)">
            <summary>
            Obtains safely all directory in the target folder.
            </summary>
            <param name="path">Target folder</param>
        </member>
        <member name="M:System.IO.RecursiveSearch.GetDirectorys(System.String,System.String)">
            <summary>
            Obtains safely directory correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
        </member>
        <member name="M:System.IO.RecursiveSearch.GetDirectorys(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Obtains safely directory correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
            <param name="searchOption"></param>
        </member>
        <member name="M:System.IO.RecursiveSearch.EnumerateDirectory(System.String)">
            <summary>
            Enumerable safely all directory in the target folder.
            </summary>
            <param name="path">Target folder</param>
        </member>
        <member name="M:System.IO.RecursiveSearch.EnumerateDirectory(System.String,System.String)">
            <summary>
            Enumerable safely directory correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
        </member>
        <member name="M:System.IO.RecursiveSearch.EnumerateDirectory(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Enumerable safely directory correspond to the research pattern in the target folder.
            </summary>
            <param name="path">Target folder</param>
            <param name="searchPattern">Search string to find among the file names in path. This parameter can contain a combination of literal and generic characters * and ? (see Remarks), but does not support regular expressions.</param>
            <param name="searchOption"></param>
        </member>
        <member name="T:System.IO.StreamExtension">
            <summary>
            Static clas to extend <see cref="T:System.IO.Stream"/>
            </summary>
        </member>
        <member name="M:System.IO.StreamExtension.Clone(System.IO.Stream)">
            <summary>
            Create a clone
            </summary>
        </member>
        <member name="T:System.IO.StreamString">
            <summary>
            A writable <see cref="T:System.IO.Stream"/> for <see cref="T:System.String"/> class
            </summary>
        </member>
        <member name="P:System.IO.StreamString.Encoding">
            <summary>
            The <see cref="T:System.Text.Encoding"/> used by the instance.
            </summary>
        </member>
        <member name="P:System.IO.StreamString.NewLine">
            <summary>
            Gets or sets the line termination string used for the current instance.
            </summary>
        </member>
        <member name="M:System.IO.StreamString.#ctor(System.String)">
            <summary>
            Initializes a new instance with the specified text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:System.IO.StreamString.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance with the specified text and encoding.
            </summary>
            <param name="text"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:System.IO.StreamString.Write(System.String)">
            <summary>
            Writer a text to the actual position.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:System.IO.StreamString.AppendLine">
            <summary>
            Append a empty line at the end of the stream.
            </summary>
        </member>
        <member name="M:System.IO.StreamString.AppendLine(System.String)">
            <summary>
            Append a text at the end of the stream.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:System.IO.StreamString.AppendText(System.String)">
            <summary>
            Append a text at the end of the stream.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:System.IO.StreamString.GetString">
            <summary>
            Get the content of the instance into a string.
            </summary>
        </member>
        <member name="T:System.IO.HashAlgorithmEnum">
            <summary>
            Implemented <see cref="T:System.Security.Cryptography.HashAlgorithm"/> in <see cref="T:System.IO.HashKey"/>.
            </summary>
        </member>
        <member name="F:System.IO.HashAlgorithmEnum.SHA256">
            <summary>
            https://en.wikipedia.org/wiki/SHA-2
            </summary>
        </member>
        <member name="F:System.IO.HashAlgorithmEnum.SHA384">
            <summary>
            https://en.wikipedia.org/wiki/SHA-2
            </summary>
        </member>
        <member name="F:System.IO.HashAlgorithmEnum.SHA512">
            <summary>
            https://en.wikipedia.org/wiki/SHA-2
            </summary>
        </member>
        <member name="F:System.IO.HashAlgorithmEnum.KeyedHashAlgorithm">
            <summary>
            https://en.wikipedia.org/wiki/HMAC
            </summary>
        </member>
        <member name="F:System.IO.HashAlgorithmEnum.RIPEMD160">
            <summary>
            https://en.wikipedia.org/wiki/RIPEMD
            </summary>
        </member>
        <member name="F:System.IO.HashAlgorithmEnum.MD5">
            <summary>
            https://en.wikipedia.org/wiki/MD5
            </summary>
        </member>
        <member name="F:System.IO.HashAlgorithmEnum.SHA1">
            <summary>
            https://en.wikipedia.org/wiki/SHA-1
            </summary>
        </member>
        <member name="T:System.IO.HashKey">
            <summary>
            Static class to obtain easily and quickly a hash.
            </summary>
        </member>
        <member name="M:System.IO.HashKey.GetAlgorithm(System.IO.HashAlgorithmEnum)">
            <summary>
            Get the <see cref="T:System.Security.Cryptography.HashAlgorithm"/> associated to the <see cref="T:System.IO.HashAlgorithmEnum"/>
            </summary>
            <param name="algorithm">Algorithm request</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.HashKey.Digest(System.IO.HashAlgorithmEnum,System.String)">
            <summary>
            Get the hash of a <see cref="T:System.String"/> with the <see cref="T:System.IO.HashAlgorithmEnum"/>
            </summary>
            <param name="text">string to hash</param>
            <param name="algorithm">Hash algorithme</param>
        </member>
        <member name="M:System.IO.HashKey.Digest(System.IO.HashAlgorithmEnum,System.String,System.Int32)">
            <summary>
            Get the hash of a <see cref="T:System.String"/> with the <see cref="T:System.IO.HashAlgorithmEnum"/>
            </summary>
            <param name="text">string to hash</param>
            <param name="algorithm">Hash algorithme</param>
            <param name="iteration">Number of iteration of the hash</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.HashKey.Digest(System.IO.HashAlgorithmEnum,System.Byte[])">
            <summary>
            Get the hash of a <see cref="T:System.Byte"/> array with the <see cref="T:System.IO.HashAlgorithmEnum"/>
            </summary>
            <param name="arrayByte"><see cref="T:System.Byte"/> array to hash</param>
            <param name="algorithm">Hash algorithme</param>
        </member>
        <member name="M:System.IO.HashKey.Digest(System.IO.HashAlgorithmEnum,System.Byte[],System.Int32)">
            <summary>
            Get the hash of a <see cref="T:System.Byte"/> array with the <see cref="T:System.IO.HashAlgorithmEnum"/>
            </summary>
            <param name="arrayByte"><see cref="T:System.Byte"/> array to hash</param>
            <param name="algorithm">Hash algorithme</param>
            <param name="iteration">Number of iteration of the hash</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.HashKey.Digest(System.IO.HashAlgorithmEnum,System.IO.Stream)">
            <summary>
            Get the hash of a <see cref="T:System.IO.Stream" /> with the <see cref="T:System.IO.HashAlgorithmEnum"/>
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream" /> to hash</param>
            <param name="algorithm">Hash algorithme</param>
        </member>
        <member name="M:System.IO.HashKey.Digest(System.IO.HashAlgorithmEnum,System.IO.Stream,System.Int32)">
            <summary>
            Get the hash of a <see cref="T:System.IO.Stream" /> with the <see cref="T:System.IO.HashAlgorithmEnum"/>
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream" /> to hash</param>
            <param name="algorithm">Hash algorithme</param>
            <param name="iteration">Number of iteration of the hash</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.HashKey.DigestFile(System.IO.HashAlgorithmEnum,System.String)">
            <summary>
            Get the hash of a <see cref="T:System.IO.Stream" /> with the <see cref="T:System.IO.HashAlgorithmEnum"/>
            </summary>
            <param name="filePath">Path of the file to get hash</param>
            <param name="algorithm">Hash algorithme</param>
            <returns></returns>
        </member>
        <member name="M:System.IO.HashKey.DigestFile(System.IO.HashAlgorithmEnum,System.String,System.Int32)">
            <summary>
            Get the hash of a <see cref="T:System.IO.Stream" /> with the <see cref="T:System.IO.HashAlgorithmEnum"/>
            </summary>
            <param name="filePath">Path of the file to get hash</param>
            <param name="algorithm">Hash algorithme</param>
            <param name="iteration">Number of iteration of the hash</param>
            <returns></returns>
        </member>
        <member name="T:System.Csv.CsvOptions">
            <summary>
            Defines the options that can be passed to customize the reading or writing of csv files.
            </summary>
            <remarks>
            Do not reuse an instance of <see cref="T:System.Csv.CsvOptions"/> for multiple reads or writes.
            </remarks>
        </member>
        <member name="P:System.Csv.CsvOptions.RowsToSkip">
            <summary>
            Gets or sets the number of rows to skip before reading the header row, defaults to <c>0</c>.
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.SkipRow">
            <summary>
            Gets or sets a function to skip the current row based on its raw string value or 1-based index. Skips empty rows and rows starting with # by default.
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.Separator">
            <summary>
             Gets or sets the character to use for separating data, defaults to <c>'\0'</c> which will auto-detect from the header row.
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.TrimData">
            <summary>
            Gets or sets whether data should be trimmed when accessed.
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.Comparer">
            <summary>
            Gets or sets the comparer to use when looking up header names.
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.HeaderMode">
            <summary>
             Gets or sets an indicator to the parser to expect a header row or not.
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.ValidateColumnCount">
            <summary>
            Gets or sets whether a row should be validated immediately that the column count matches the header count.
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.ReturnEmptyForMissingColumn">
            <summary>
            Gets or sets whether an empty string is returned for a missing column.
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.Aliases">
            <summary>
            Can be used to use multiple names for a single column. (e.g. to allow "CategoryName", "Category Name", "Category-Name")
            </summary>
            <remarks>
            A group with no matches is ignored.
            </remarks>
        </member>
        <member name="P:System.Csv.CsvOptions.AllowNewLineInEnclosedFieldValues">
            <summary>
            Respects new line (either \r\n or \n) characters inside field values enclosed in double quotes.
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.AllowBackSlashToEscapeQuote">
            <summary>
            Allows the sequence "\"" to be a valid quoted value (in addition to the standard """")
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.AllowSingleQuoteToEncloseFieldValues">
            <summary>
            Allows the single-quote character to be used to enclose field values
            </summary>
        </member>
        <member name="P:System.Csv.CsvOptions.NewLine">
            <summary>
            The new line string to use when multiline field values are read
            </summary>
            <remarks>
            Requires "AllowNewLineInEnclosedFieldValues" to be set to "true" for this to have any effect.
            </remarks>
        </member>
        <member name="T:System.Csv.CsvReader">
            <summary>
            Helper class to read csv (comma separated values) data.
            </summary>
        </member>
        <member name="M:System.Csv.CsvReader.Read(System.IO.TextReader,System.Csv.CsvOptions)">
            <summary>
            Reads the lines from the reader.
            </summary>
            <param name="reader">The text reader to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="M:System.Csv.CsvReader.ReadFromStream(System.IO.Stream,System.Csv.CsvOptions)">
            <summary>
            Reads the lines from the stream.
            </summary>
            <param name="stream">The stream to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="M:System.Csv.CsvReader.ReadFromText(System.String,System.Csv.CsvOptions)">
            <summary>
            Reads the lines from the csv string.
            </summary>
            <param name="csv">The csv string to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="M:System.Csv.CsvReader.ReadFromFile(System.String,System.Csv.CsvOptions)">
            <summary>
            Reads the lines from a csv file.
            </summary>
            <param name="path">The path of the csv file to read the data from.</param>
            <param name="options">The optional options to use when reading.</param>
        </member>
        <member name="T:System.Csv.CsvWriter">
            <summary>
            Helper class to write csv (comma separated values) data.
            </summary>
        </member>
        <member name="M:System.Csv.CsvWriter.Write(System.IO.TextWriter,System.String[],System.Collections.Generic.IEnumerable{System.String[]},System.Char,System.Boolean)">
            <summary>
            Writes the lines to the writer.
            </summary>
            <param name="writer">The text writer to write the data to.</param>
            <param name="headers">The headers that should be used for the first line, determines the number of columns.</param>
            <param name="lines">The lines with data that should be written.</param>
            <param name="separator">The separator to use between columns (comma, semicolon, tab, ...)</param>
            <param name="alwaysQuotes">Forces the usesage of the double Quotes to delimit the values.</param>
        </member>
        <member name="M:System.Csv.CsvWriter.WriteToText(System.String[],System.Collections.Generic.IEnumerable{System.String[]},System.Char,System.Boolean)">
            <summary>
            Writes the lines and return the result.
            </summary>
            <param name="headers">The headers that should be used for the first line, determines the number of columns.</param>
            <param name="lines">The lines with data that should be written.</param>
            <param name="separator">The separator to use between columns (comma, semicolon, tab, ...)</param>
            <param name="alwaysQuotes">Forces the usesage of the double Quotes to delimit the values.</param>
        </member>
        <member name="M:System.Csv.CsvWriter.WriteToFile(System.String,System.String[],System.Collections.Generic.IEnumerable{System.String[]},System.Char,System.Boolean)">
            <summary>
            Writes the lines and return the specified file.
            </summary>
            <param name="path">The headers that should be used for the first line, determines the number of columns.</param>
            <param name="headers">The headers that should be used for the first line, determines the number of columns.</param>
            <param name="lines">The lines with data that should be written.</param>
            <param name="separator">The separator to use between columns (comma, semicolon, tab, ...)</param>
            <param name="alwaysQuotes">Forces the usesage of the double Quotes to delimit the values.</param>
        </member>
        <member name="T:System.Csv.HeaderMode">
            <summary>
            Indicates the presence (default) or absence of a header row.
            </summary>
        </member>
        <member name="F:System.Csv.HeaderMode.HeaderPresent">
            <summary>
            Indicates that the CSV file has a header row. (Default)
            </summary>
        </member>
        <member name="F:System.Csv.HeaderMode.HeaderAbsent">
            <summary>
            Indicates that the CSV file does not have a header row.
            </summary>
        </member>
        <member name="T:System.Csv.ICsvLine">
            <summary>
            Represents a single data line inside a csv file.
            </summary>
        </member>
        <member name="P:System.Csv.ICsvLine.Headers">
            <summary>
            Gets the headers from the csv file.
            </summary>
        </member>
        <member name="P:System.Csv.ICsvLine.Values">
            <summary>
            Gets a list of values in string format for the current row.
            </summary>
        </member>
        <member name="P:System.Csv.ICsvLine.Raw">
            <summary>
            Gets the original raw content of the line.
            </summary>
        </member>
        <member name="P:System.Csv.ICsvLine.Index">
            <summary>
            Gets the 1-based index for the line inside the file.
            </summary>
        </member>
        <member name="P:System.Csv.ICsvLine.ColumnCount">
            <summary>
            Gets the number of columns of the line.
            </summary>
        </member>
        <member name="M:System.Csv.ICsvLine.HasColumn(System.String)">
            <summary>
            Indicates whether the specified <paramref name="name"/> exists.
            </summary>
        </member>
        <member name="P:System.Csv.ICsvLine.Item(System.String)">
            <summary>
            Gets the data for the specified named header.
            </summary>
            <param name="name">The name of the header.</param>
        </member>
        <member name="P:System.Csv.ICsvLine.Item(System.Int32)">
            <summary>
            Gets the data for the specified indexed header.
            </summary>
            <param name="index">The index of the header.</param>
        </member>
        <member name="T:System.Drawing.DrawingExtension">
            <summary>
            Static extension class for <see cref="T:System.Drawing.Image"/>
            </summary>
        </member>
        <member name="M:System.Drawing.DrawingExtension.SavePNG(System.Drawing.Image,System.String)">
            <summary>
            Save a PNG image.
            </summary>
            <param name="img"></param>
            <param name="path"></param>
        </member>
        <member name="M:System.Drawing.DrawingExtension.SaveJPG(System.Drawing.Image,System.String)">
            <summary>
            Save a JPG image with 90% compression.
            </summary>
            <param name="img"></param>
            <param name="path"></param>
        </member>
        <member name="M:System.Drawing.DrawingExtension.SaveJPG(System.Drawing.Image,System.String,System.Int32)">
            <summary>
            Save a JPG image with a specified percentage compression.
            </summary>
            <param name="img"></param>
            <param name="path"></param>
            <param name="compression">Percentage of compression</param>
        </member>
        <member name="M:System.Drawing.DrawingExtension.GetImageCodec(System.Drawing.Imaging.ImageFormat)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:System.Configuration.IniCommentStarter">
            <summary>
            Defines <see cref="T:System.Configuration.IniComment">comment's</see> starting character.
            </summary>
        </member>
        <member name="F:System.Configuration.IniCommentStarter.Semicolon">
            <summary>
            Use ';' as <see cref="T:System.Configuration.IniComment">comment's</see> starting character.
            </summary>
        </member>
        <member name="F:System.Configuration.IniCommentStarter.Hash">
            <summary>
            Use '#' as <see cref="T:System.Configuration.IniComment">comment's</see> starting character.
            </summary>
        </member>
        <member name="T:System.Configuration.IniDuplication">
            <summary>
            Defines a behaviour for duplicate <see cref="P:System.Configuration.IniItem.Name"/> occurences.
            </summary>
        </member>
        <member name="F:System.Configuration.IniDuplication.Allowed">
            <summary>
            Allow duplicate names in <see cref="T:System.Configuration.IniItemCollection`1"/>.
            </summary>
        </member>
        <member name="F:System.Configuration.IniDuplication.Disallowed">
            <summary>
            Disallow duplicate names in <see cref="T:System.Configuration.IniItemCollection`1"/>.
            </summary>
            <remarks>
            <see cref="T:System.InvalidOperationException"/> is thrown on duplicate name occurence.
            </remarks>
        </member>
        <member name="F:System.Configuration.IniDuplication.Ignored">
            <summary>
            Ignore duplicate names.
            </summary>
            <remarks>
            Prevents adding or inserting an <see cref="T:System.Configuration.IniItem"/> if its name already exists in <see cref="T:System.Configuration.IniItemCollection`1"/>.
            </remarks>
        </member>
        <member name="T:System.Configuration.IniKeyDelimiter">
            <summary>
            Defines <see cref="T:System.Configuration.IniKey">key's</see> name and value delimiter character.
            </summary>
        </member>
        <member name="F:System.Configuration.IniKeyDelimiter.Equal">
            <summary>
            Use '=' as <see cref="T:System.Configuration.IniKey">key's</see> name and value delimiter character.
            </summary>
        </member>
        <member name="F:System.Configuration.IniKeyDelimiter.Colon">
            <summary>
            Use ':' as <see cref="T:System.Configuration.IniKey">key's</see> name and value delimiter character.
            </summary>
        </member>
        <member name="T:System.Configuration.IniSectionWrapper">
            <summary>
            Defines <see cref="T:System.Configuration.IniSection">section's</see> wrapper characters around its name.
            </summary>
        </member>
        <member name="F:System.Configuration.IniSectionWrapper.SquareBrackets">
            <summary>
            Use '[' and ']' as <see cref="T:System.Configuration.IniSection">section's</see> wrapper characters.
            </summary>
        </member>
        <member name="F:System.Configuration.IniSectionWrapper.AngleBrackets">
            <summary>
            Use '&lt;' and '&gt;' as <see cref="T:System.Configuration.IniSection">section's</see> wrapper characters.
            </summary>
        </member>
        <member name="F:System.Configuration.IniSectionWrapper.CurlyBrackets">
            <summary>
            Use '{' and '}' as <see cref="T:System.Configuration.IniSection">section's</see> wrapper characters.
            </summary>
        </member>
        <member name="F:System.Configuration.IniSectionWrapper.Parentheses">
            <summary>
            Use '(' and ')' as <see cref="T:System.Configuration.IniSection">section's</see> wrapper characters.
            </summary>
        </member>
        <member name="T:System.Configuration.IniFile">
            <summary>
            In-memory representation of an INI file.
            </summary>
            <remarks>
            <para><see cref="T:System.Configuration.IniFile"/> is a central class of MadMilkman.Ini component.</para>
            <para>To define an INI file's format use <see cref="T:System.Configuration.IniOptions"/> object.</para>
            <para>To load (read) an INI file from a file's path or a stream use <see cref="O:MadMilkman.Ini.IniFile.Load">IniFile.Load</see> methods.</para>
            <para>To save (write) an INI file to a file's path or a stream use <see cref="O:MadMilkman.Ini.IniFile.Save">IniFile.Save</see> methods.</para>
            <para>To view INI file's structure representation see <see href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#diagram" target="_self">IniFile's Content Hierarchy Diagram</see>.</para>
            </remarks>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm" target="_self">Overview</seealso>
            <seealso href="http://en.wikipedia.org/wiki/INI_file">INI file format on Wikipedia.</seealso>
        </member>
        <member name="M:System.Configuration.IniFile.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:System.Configuration.IniFile"/> class.
            </summary>
        </member>
        <member name="M:System.Configuration.IniFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.Configuration.IniFile"/> class.
            </summary>
            <param name="filePath">Path from which to load a file</param>
        </member>
        <member name="M:System.Configuration.IniFile.#ctor(System.Configuration.IniOptions)">
            <summary>
            Initializes a new instance of <see cref="T:System.Configuration.IniFile"/> class.
            </summary>
            <param name="options"><see cref="T:System.Configuration.IniOptions"/> object that defines INI file's format, settings for both <see cref="O:MadMilkman.Ini.IniFile.Load">Load</see> and <see cref="O:MadMilkman.Ini.IniFile.Save">Save</see> methods.</param>
        </member>
        <member name="M:System.Configuration.IniFile.#ctor(System.String,System.Configuration.IniOptions)">
            <summary>
            Initializes a new instance of <see cref="T:System.Configuration.IniFile"/> class.
            </summary>
            <param name="options"><see cref="T:System.Configuration.IniOptions"/> object that defines INI file's format, settings for both <see cref="O:MadMilkman.Ini.IniFile.Load">Load</see> and <see cref="O:MadMilkman.Ini.IniFile.Save">Save</see> methods.</param>
            <param name="filePath">Path from which to load a file</param>
        </member>
        <member name="P:System.Configuration.IniFile.Sections">
            <summary>
            Gets file's sections.
            </summary>
        </member>
        <member name="P:System.Configuration.IniFile.ValueMappings">
            <summary>
            Gets the mappings of <see cref="P:System.Configuration.IniKey.Value"/>s and their results, used in <see cref="O:MadMilkman.Ini.IniKey.TryParseValue"/> methods.
            </summary>
        </member>
        <member name="P:System.Configuration.IniFile.ValueBinding">
            <summary>
            Gets the object that exposes binding operations, which are executed with <see cref="O:MadMilkman.Ini.IniValueBinding.Bind"/> methods.
            </summary>
        </member>
        <member name="M:System.Configuration.IniFile.Load(System.String)">
            <summary>
            Loads a file from a path.
            </summary>
            <param name="filePath">Path from which to load a file.</param>
        </member>
        <member name="M:System.Configuration.IniFile.Load(System.IO.Stream)">
            <summary>
            Loads a file from a stream.
            </summary>
            <param name="fileStream">Stream from which to load a file.</param>
        </member>
        <member name="M:System.Configuration.IniFile.Load(System.IO.TextReader)">
            <summary>
            Loads a file from a reader.
            </summary>
            <param name="fileReader">Reader from which to load a file.</param>
        </member>
        <member name="M:System.Configuration.IniFile.Save(System.String)">
            <summary>
            Saves a file to a path.
            </summary>
            <param name="filePath">Path to which to save a file.</param>
        </member>
        <member name="M:System.Configuration.IniFile.Save(System.IO.Stream)">
            <summary>
            Saves a file to a stream.
            </summary>
            <param name="fileStream">Stream to which to save a file.</param>
        </member>
        <member name="M:System.Configuration.IniFile.Save(System.IO.TextWriter)">
            <summary>
            Saves a file to a writer.
            </summary>
            <param name="fileWriter">Writer to which to save a file.</param>
        </member>
        <member name="T:System.Configuration.IniItemCollection`1">
            <summary>
            Represents a base generic class for INI content item collections, <see cref="T:System.Configuration.IniSectionCollection"/> and <see cref="T:System.Configuration.IniKeyCollection"/>.
            </summary>
            <typeparam name="T"><see cref="T:System.Configuration.IniItem"/> derived type.</typeparam>
            <seealso cref="T:System.Configuration.IniItem"/>
        </member>
        <member name="P:System.Configuration.IniItemCollection`1.ParentFile">
            <exclude/>
        </member>
        <member name="P:System.Configuration.IniItemCollection`1.Count">
            
            <summary>
            Gets the number of items in this collection.
            </summary>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.Add(`0)">
            <summary>
            Adds an item to the end of this collection.
            </summary>
            <param name="item">Item to add to this collection.</param>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not added</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.Clear">
            <summary>
            Removes all items from this collection.
            </summary>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.Contains(`0)">
            <summary>
            Determines whether an item is in this collection.
            </summary>
            <param name="item">Item to locate in this collection.</param>
            <returns><see langword="true"/> if the specified item is in the collection.</returns>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.Contains(System.String)">
            <summary>
            Determines whether an item is in this collection.
            </summary>
            <param name="name">Name of the item to locate in this collection.</param>
            <returns><see langword="true"/> if the item with specified name is in the collection.</returns>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Shallow copies the items of this collection to an array.
            </summary>
            <param name="array">One-dimensional array that is the destination of the items copied from this collection.</param>
            <param name="arrayIndex">Zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified item and returns the zero-based index of the first occurrence within this collection.
            </summary>
            <param name="item">Item to locate in this collection.</param>
            <returns>Index of the first occurrence of specified item in the collection.</returns>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.IndexOf(System.String)">
            <summary>
            Searches for the specified item and returns the zero-based index of the first occurrence within this collection.
            </summary>
            <param name="name">Name of the item to locate in this collection.</param>
            <returns>Index of the first occurrence of the item with specified name in the collection.</returns>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to this collection at the specified index.
            </summary>
            <param name="index">Zero-based index at which item should be inserted.</param>
            <param name="item">Item to insert to this collection.</param>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not inserted</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of specific item from this collection.
            </summary>
            <param name="item">Item to remove from this collection.</param>
            <returns><see langword="true"/> if the specified item is removed from the collection.</returns>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.Remove(System.String)">
            <summary>
            Removes the first occurrence of specific item from this collection.
            </summary>
            <param name="name">Name of the item to remove from this collection.</param>
            <returns><see langword="true"/> if the item with specified name is removed from the collection.</returns>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specified index from this collection.
            </summary>
            <param name="index">Zero-based index at which item should be inserted.</param>
        </member>
        <member name="P:System.Configuration.IniItemCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">Zero-based index of the item to get or set.</param>
            <remarks>
            If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and value is a duplicate item, has an existing name in this collection, then this value <b>is ignored</b>.
            </remarks>
        </member>
        <member name="P:System.Configuration.IniItemCollection`1.Item(System.String)">
            <summary>
            Gets the first item of the specified name.
            </summary>
            <param name="name">Name of the item to get.</param>
            <remarks>If item with the specified name doesn't exist a <see langword="null"/> value is returned.</remarks>
        </member>
        <member name="P:System.Configuration.IniItemCollection`1.Item(System.String[])">
            <summary>
            Gets the first items of the specified names.
            </summary>
            <param name="names">Names of the items to get.</param>
            <remarks>If item with any specified name doesn't exist a <see langword="null"/> value is returned in its place.</remarks>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:System.Configuration.IniItemCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <exclude/>
        </member>
        <member name="P:System.Configuration.IniItemCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <exclude/>
        </member>
        <member name="T:System.Configuration.IniKeyCollection">
            <summary>
            Represents a collection of <see cref="T:System.Configuration.IniKey"/> items.
            </summary>
            <seealso cref="T:System.Configuration.IniKey"/>
        </member>
        <member name="M:System.Configuration.IniKeyCollection.Add(System.String)">
            <summary>
            Adds an item to the end of this collection.
            </summary>
            <param name="name">Name of the <see cref="T:System.Configuration.IniKey" /> to add to this collection.</param>
            <returns><see cref="T:System.Configuration.IniKey" /> that was added to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not added</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniKeyCollection.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the end of this collection.
            </summary>
            <param name="nameValuePair">The key's data, pair of key's name and key's value, to add to this collection.</param>
            <returns><see cref="T:System.Configuration.IniKey" /> that was added to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not added</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniKeyCollection.Add(System.String,System.String)">
            <summary>
            Adds an item to the end of this collection.
            </summary>
            <param name="name">Name of the <see cref="T:System.Configuration.IniKey" /> to add to this collection.</param>
            <param name="value">Value of the <see cref="T:System.Configuration.IniKey" /> to add to this collection.</param>
            <returns><see cref="T:System.Configuration.IniKey" /> that was added to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not added</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniKeyCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts an item to this collection at the specified index.
            </summary>
            <param name="index">Zero-based index at which item should be inserted.</param>
            <param name="name">Name of the <see cref="T:System.Configuration.IniKey" /> to insert to this collection.</param>
            <returns><see cref="T:System.Configuration.IniKey" /> that was inserted to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not inserted</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniKeyCollection.Insert(System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Inserts an item to this collection at the specified index.
            </summary>
            <param name="index">Zero-based index at which item should be inserted.</param>
            <param name="nameValuePair">The key's data, pair of key's name and key's value, to insert to this collection.</param>
            <returns><see cref="T:System.Configuration.IniKey" /> that was inserted to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not inserted</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniKeyCollection.Insert(System.Int32,System.String,System.String)">
            <summary>
            Inserts an item to this collection at the specified index.
            </summary>
            <param name="index">Zero-based index at which item should be inserted.</param>
            <param name="name">Name of the <see cref="T:System.Configuration.IniKey" /> to insert to this collection.</param>
            <param name="value">Value of the <see cref="T:System.Configuration.IniKey" /> to insert to this collection.</param>
            <returns><see cref="T:System.Configuration.IniKey" /> that was inserted to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not inserted</b>.</para>
    </remarks>
        </member>
        <member name="T:System.Configuration.IniSectionCollection">
            <summary>
            Represents a collection of <see cref="T:System.Configuration.IniSection"/> items.
            </summary>
            <seealso cref="T:System.Configuration.IniSection"/>
        </member>
        <member name="M:System.Configuration.IniSectionCollection.Add(System.String)">
            <summary>
            Adds an item to the end of this collection.
            </summary>
            <param name="name">Name of the <see cref="T:System.Configuration.IniSection" /> to add to this collection.</param>
            <returns><see cref="T:System.Configuration.IniSection" /> that was added to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not added</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniSectionCollection.Add(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds an item to the end of this collection.
            </summary>
            <param name="name">Name of the <see cref="T:System.Configuration.IniSection" /> to add to this collection.</param>
            <param name="nameValuePairs">The section's keys data, pairs of key's name and key's value, to add to this collection.</param>
            <returns><see cref="T:System.Configuration.IniSection" /> that was added to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not added</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniSectionCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts an item to this collection at the specified index.
            </summary>
            <param name="index">Zero-based index at which item should be inserted.</param>
            <param name="name">Name of the <see cref="T:System.Configuration.IniSection" /> to insert to this collection.</param>
            <returns><see cref="T:System.Configuration.IniSection" /> that was inserted to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not inserted</b>.</para>
    </remarks>
        </member>
        <member name="M:System.Configuration.IniSectionCollection.Insert(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Inserts an item to this collection at the specified index.
            </summary>
            <param name="index">Zero-based index at which item should be inserted.</param>
            <param name="name">Name of the <see cref="T:System.Configuration.IniSection" /> to insert to this collection.</param>
            <param name="nameValuePairs">The section's keys data, pairs of key's name and key's value, to insert to this collection.</param>
            <returns><see cref="T:System.Configuration.IniSection" /> that was inserted to this collection.</returns>
            <remarks>
      <para>If item duplicates are <see cref="F:System.Configuration.IniDuplication.Ignored">ignored</see> and this item is a duplicate, has an existing name in this collection, then it is <b>not inserted</b>.</para>
    </remarks>
        </member>
        <member name="T:System.Configuration.IniComment">
            <summary>
            Represents a comment object used by <see cref="T:System.Configuration.IniItem"/> objects, <see cref="T:System.Configuration.IniSection"/> and <see cref="T:System.Configuration.IniKey"/>.
            </summary>
        </member>
        <member name="P:System.Configuration.IniComment.EmptyLinesBefore">
            <summary>
            Gets or sets the amount of empty lines before this <see cref="P:System.Configuration.IniComment.Text">comment's text</see>.
            </summary>
        </member>
        <member name="P:System.Configuration.IniComment.LeftIndentation">
            <summary>
            Gets or sets the amount of whitespace characters before this <see cref="P:System.Configuration.IniComment.Text">comment's text</see>.
            </summary>
        </member>
        <member name="P:System.Configuration.IniComment.Text">
            <summary>
            Gets or sets a text of this <see cref="T:System.Configuration.IniComment"/> instance.
            </summary>
            <remarks>
            <para>For <see cref="P:System.Configuration.IniItem.LeadingComment">LeadingComment</see> text should not contain new line characters.
            If it does, they will be replaced with a space characters.</para>
            </remarks>
        </member>
        <member name="T:System.Configuration.IniItem">
            <summary>
            Represents a base class for INI content items, <see cref="T:System.Configuration.IniSection"/> and <see cref="T:System.Configuration.IniKey"/>.
            </summary>
            <remarks>
            <para>All INI items share the same content like <see cref="P:System.Configuration.IniItem.Name"/>, <see cref="P:System.Configuration.IniItem.LeadingComment"/> and <see cref="P:System.Configuration.IniItem.TrailingComment"/>.
            These properties are defined on an <see cref="T:System.Configuration.IniItem"/> class, a base class for INI content items.</para>
            </remarks>
        </member>
        <member name="P:System.Configuration.IniItem.Name">
            <summary>
            Gets and sets the name of the current <see cref="T:System.Configuration.IniItem"/>.
            </summary>
            <remarks>
            When setting <see cref="P:System.Configuration.IniItem.Name"/> the value is verified by the item's <see cref="T:System.Configuration.IniDuplication"/> rule.
            </remarks>
        </member>
        <member name="P:System.Configuration.IniItem.LeftIndentation">
            <summary>
            Gets or sets the amount of whitespace characters before this <see cref="P:System.Configuration.IniItem.Name">item's name</see>.
            </summary>
        </member>
        <member name="P:System.Configuration.IniItem.LeadingComment">
            <summary>
            Gets the <see cref="T:System.Configuration.IniComment"/> object that represents a comment that follows this <see cref="T:System.Configuration.IniItem"/> on the same line.
            </summary>
        </member>
        <member name="P:System.Configuration.IniItem.TrailingComment">
            <summary>
            Gets the <see cref="T:System.Configuration.IniComment"/> object that represents a comments that occur before this <see cref="T:System.Configuration.IniItem"/>.
            </summary>
        </member>
        <member name="P:System.Configuration.IniItem.ParentFile">
            <summary>
            Gets the <see cref="T:System.Configuration.IniFile"/> to which this <see cref="T:System.Configuration.IniItem"/> belongs to.
            </summary>
        </member>
        <member name="T:System.Configuration.IniKey">
            <summary>
            Represents a key item of the INI file with name and value content.
            </summary>
        </member>
        <member name="P:System.Configuration.IniKey.Value">
            <summary>
            Gets and sets <see cref="T:System.Configuration.IniKey"/> value.
            </summary>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#parsing" target="_self">IniKey's Value Parsing</seealso>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#binding" target="_self">IniKey's Value Binding</seealso>
        </member>
        <member name="P:System.Configuration.IniKey.ParentCollection">
            <summary>
            Gets the <see cref="T:System.Configuration.IniKeyCollection"/> to which this <see cref="T:System.Configuration.IniKey"/> belongs to.
            </summary>
        </member>
        <member name="P:System.Configuration.IniKey.ParentSection">
            <summary>
            Gets the <see cref="T:System.Configuration.IniSection"/> to which this <see cref="T:System.Configuration.IniKey"/> belongs to.
            </summary>
        </member>
        <member name="M:System.Configuration.IniKey.#ctor(System.Configuration.IniFile,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.IniKey"/> class.
            </summary>
            <param name="parentFile">The owner file.</param>
            <param name="name">The key's name.</param>
        </member>
        <member name="M:System.Configuration.IniKey.#ctor(System.Configuration.IniFile,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.IniKey"/> class.
            </summary>
            <param name="parentFile">The owner file.</param>
            <param name="name">The key's name.</param>
            <param name="value">The key's value.</param>
        </member>
        <member name="M:System.Configuration.IniKey.#ctor(System.Configuration.IniFile,System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.IniKey"/> class.
            </summary>
            <param name="parentFile">The owner file.</param>
            <param name="nameValuePair">The key's data, pair of key's name and key's value.</param>
        </member>
        <member name="M:System.Configuration.IniKey.Copy">
            <summary>
            Copies this <see cref="T:System.Configuration.IniKey"/> instance.
            </summary>
            <returns>Copied <see cref="T:System.Configuration.IniKey"/>.</returns>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#copying" target="_self">IniItem's Copying</seealso>
        </member>
        <member name="M:System.Configuration.IniKey.Copy(System.Configuration.IniFile)">
            <summary>
            Copies this <see cref="T:System.Configuration.IniKey"/> instance and sets copied instance's <see cref="P:System.Configuration.IniItem.ParentFile">ParentFile</see>.
            </summary>
            <param name="destinationFile">Copied key's parent file.</param>
            <returns>Copied <see cref="T:System.Configuration.IniKey"/> that belongs to a specified <see cref="T:System.Configuration.IniFile"/>.</returns>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#copying" target="_self">IniItem's Copying</seealso>
        </member>
        <member name="M:System.Configuration.IniKey.IsSupportedValueType(System.Type)">
            <summary>
            Indicates whether the <see cref="P:System.Configuration.IniKey.Value"/> can be converted to specified type.
            </summary>
            <param name="type">Type of the object to convert the <see cref="P:System.Configuration.IniKey.Value"/> to.</param>
            <returns><see langword="true"/> if the specified type is supported.</returns>
            <remarks>
            Currently supported types are:
            <list type="bullet">
            <item><description>System.Boolean</description></item>
            <item><description>System.Byte</description></item>
            <item><description>System.SByte</description></item>
            <item><description>System.Int16</description></item>
            <item><description>System.UInt16</description></item>
            <item><description>System.Int32</description></item>
            <item><description>System.UInt32</description></item>
            <item><description>System.Int64</description></item>
            <item><description>System.UInt64</description></item>
            <item><description>System.Char</description></item>
            <item><description>System.Single</description></item>
            <item><description>System.Double</description></item>
            <item><description>System.Decimal</description></item>
            <item><description>System.DateTime</description></item>
            <item><description>System.TimeSpan</description></item>
            <item><description>System.Enum</description></item>
            <item><description>System.String</description></item>
            </list>
            Additionally both Array and List of the above types are supported.
            </remarks>
        </member>
        <member name="M:System.Configuration.IniKey.TryParseValue``1(``0@)">
            <summary>
            Converts the <see cref="P:System.Configuration.IniKey.Value" /> to an instance of the specified type.
            </summary>
            <param name="result">Uninitialized instance of a specific type which will hold the converted value if the conversion succeeds.</param>
            <typeparam name="T">Type of the object to convert the <see cref="P:System.Configuration.IniKey.Value" /> to.</typeparam>
            <returns>Value that indicates whether the conversion succeeded.</returns>
            <remarks>
      <para>For supported types see the remarks of <see cref="M:System.Configuration.IniKey.IsSupportedValueType(System.Type)" /> method.</para>
      <para>Mapped value results in <see cref="P:System.Configuration.IniFile.ValueMappings" /> have priority over parsing the value.</para>
    </remarks><seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#parsing" target="_self">IniKey's Value Parsing</seealso>
        </member>
        <member name="M:System.Configuration.IniKey.TryParseValue``1(``0[]@)">
            <summary>
            Converts the <see cref="P:System.Configuration.IniKey.Value" /> to an array of the specified type.
            </summary>
            <param name="results">Uninitialized array of a specific type which will hold the converted values if the conversion succeeds.</param>
            <typeparam name="T">Type of the objects in array to convert the <see cref="P:System.Configuration.IniKey.Value" /> to.</typeparam>
            <returns>Value that indicates whether the conversion succeeded.</returns>
            <remarks>
      <para>For supported types see the remarks of <see cref="M:System.Configuration.IniKey.IsSupportedValueType(System.Type)" /> method.</para>
      <para>Mapped value results in <see cref="P:System.Configuration.IniFile.ValueMappings" /> have priority over parsing the value.</para>
    </remarks><seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#parsing" target="_self">IniKey's Value Parsing</seealso>
        </member>
        <member name="M:System.Configuration.IniKey.TryParseValue``1(System.Collections.Generic.List{``0}@)">
            <summary>
            Converts the <see cref="P:System.Configuration.IniKey.Value" /> to a list of the specified type.
            </summary>
            <param name="results">Uninitialized list of a specific type which will hold the converted values if the conversion succeeds.</param>
            <typeparam name="T">Type of the objects in list to convert the <see cref="P:System.Configuration.IniKey.Value" /> to.</typeparam>
            <returns>Value that indicates whether the conversion succeeded.</returns>
            <remarks>
      <para>For supported types see the remarks of <see cref="M:System.Configuration.IniKey.IsSupportedValueType(System.Type)" /> method.</para>
      <para>Mapped value results in <see cref="P:System.Configuration.IniFile.ValueMappings" /> have priority over parsing the value.</para>
    </remarks><seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#parsing" target="_self">IniKey's Value Parsing</seealso>
        </member>
        <member name="T:System.Configuration.IniSection">
            <summary>
            Represents a section item of the INI file with name and keys content.
            </summary>
        </member>
        <member name="F:System.Configuration.IniSection.GlobalSectionName">
            <summary>
            Represents a section name which is used to define a global section, used for storing first keys series that don't belong to any section.
            </summary>
            <remarks>
            <para>
            If a section with this name is located as a first file's section then its name and comments are ignored.
            If a section with this name isn't located as first file's section then it will be written with <c>MADMILKMAN_INI_FILE_GLOBAL_SECTION</c> name.
            </para>
            </remarks>
        </member>
        <member name="P:System.Configuration.IniSection.Keys">
            <summary>
            Gets the <see cref="T:System.Configuration.IniSection">section's</see> key collection.
            </summary>
        </member>
        <member name="P:System.Configuration.IniSection.ParentCollection">
            <summary>
            Gets the <see cref="T:System.Configuration.IniSectionCollection"/> to which this <see cref="T:System.Configuration.IniSection"/> belongs to.
            </summary>
        </member>
        <member name="M:System.Configuration.IniSection.#ctor(System.Configuration.IniFile,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.IniSection"/> class.
            </summary>
            <param name="parentFile">The owner file.</param>
            <param name="name">The section's name.</param>
        </member>
        <member name="M:System.Configuration.IniSection.#ctor(System.Configuration.IniFile,System.String,System.Configuration.IniKey[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.IniSection"/> class.
            </summary>
            <param name="parentFile">The owner file.</param>
            <param name="name">The section's name.</param>
            <param name="keys">The section's keys.</param>
        </member>
        <member name="M:System.Configuration.IniSection.#ctor(System.Configuration.IniFile,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.IniSection"/> class.
            </summary>
            <param name="parentFile">The owner file.</param>
            <param name="name">The section's name.</param>
            <param name="nameValuePairs">The section's keys data, pairs of key's name and key's value.</param>
        </member>
        <member name="M:System.Configuration.IniSection.#ctor(System.Configuration.IniFile,System.String,System.Collections.Generic.IEnumerable{System.Configuration.IniKey})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.IniSection"/> class.
            </summary>
            <param name="parentFile">The owner file.</param>
            <param name="name">The section's name.</param>
            <param name="keys">The section's keys.</param>
        </member>
        <member name="M:System.Configuration.IniSection.Copy">
            <summary>
            Copies this <see cref="T:System.Configuration.IniSection"/> instance.
            </summary>
            <returns>Copied <see cref="T:System.Configuration.IniSection"/>.</returns>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#copying" target="_self">IniItem's Copying</seealso>
        </member>
        <member name="M:System.Configuration.IniSection.Copy(System.Configuration.IniFile)">
            <summary>
            Copies this <see cref="T:System.Configuration.IniSection"/> instance and sets copied instance's <see cref="P:System.Configuration.IniItem.ParentFile">ParentFile</see>.
            </summary>
            <param name="destinationFile">Copied section's parent file.</param>
            <returns>Copied <see cref="T:System.Configuration.IniSection"/> that belongs to a specified <see cref="T:System.Configuration.IniFile"/>.</returns>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#copying" target="_self">IniItem's Copying</seealso>
        </member>
        <member name="M:System.Configuration.IniSection.Serialize``1(``0)">
            <summary>
            Serializes the specified object into this <see cref="T:System.Configuration.IniSection"/>.
            </summary>
            <typeparam name="T">The type of serialized object.</typeparam>
            <param name="source">The object to serialize.</param>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#serializing" target="_self">IniSection's Object Serialization</seealso>
        </member>
        <member name="M:System.Configuration.IniSection.Deserialize``1">
            <summary>
            Deserializes this <see cref="T:System.Configuration.IniSection"/> into an object of specified type.
            </summary>
            <typeparam name="T">The type of deserialized object.</typeparam>
            <returns>The object being deserialized.</returns>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#serializing" target="_self">IniSection's Object Serialization</seealso>
        </member>
        <member name="T:System.Configuration.IniOptions">
            <summary>
            Represents a class that defines INI file's format, stores properties used for both reading and writing a file.
            </summary>
            <remarks>
            <para>After an instance of this class is passed to an <see cref="T:System.Configuration.IniFile"/> constructor, further changes on that instance's properties will have no effect.</para>
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Default Value</description>
            </listheader>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.CommentStarter">CommentStarter</see></term>
            <description><see cref="F:System.Configuration.IniCommentStarter.Semicolon"/></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.CommentStarter">Compression</see></term>
            <description><see langword="false"/></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.CommentStarter">EncryptionPassword</see></term>
            <description><see langword="null"/></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.Encoding">Encoding</see></term>
            <description><see cref="P:System.Text.Encoding.ASCII">Encoding.ASCII</see></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.KeyDelimiter">KeyDelimiter</see></term>
            <description><see cref="F:System.Configuration.IniKeyDelimiter.Equal"/></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.KeyDuplicate">KeyDuplicate</see></term>
            <description><see cref="F:System.Configuration.IniDuplication.Allowed"/></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.KeyNameCaseSensitive">KeyNameCaseSensitive</see></term>
            <description><see langword="false"/></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.KeySpaceAroundDelimiter">KeySpaceAroundDelimiter</see></term>
            <description><see langword="false"/></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.SectionDuplicate">SectionDuplicate</see></term>
            <description><see cref="F:System.Configuration.IniDuplication.Allowed"/></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.SectionNameCaseSensitive">SectionNameCaseSensitive</see></term>
            <description><see langword="false"/></description>
            </item>
            <item>
            <term><see cref="P:System.Configuration.IniOptions.SectionWrapper">SectionWrapper</see></term>
            <description><see cref="F:System.Configuration.IniSectionWrapper.SquareBrackets"/></description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:System.Configuration.IniOptions.Encoding">
            <summary>
            Gets or sets encoding for reading and writing an INI file.
            </summary>
            <remarks>
            Value should not be <see langword="null"/>, if it is then a default <see cref="P:System.Text.Encoding.ASCII">Encoding.ASCII</see> value will be used.
            </remarks>
        </member>
        <member name="P:System.Configuration.IniOptions.CommentStarter">
            <summary>
            Gets or sets comments starting character.
            </summary>
        </member>
        <member name="P:System.Configuration.IniOptions.Compression">
            <summary>
            <para>Gets or sets a value indicating if file's size is reduced.</para>
            <para>If <see langword="true"/> file is decompressed on Load and compressed on Save.</para>
            </summary>
        </member>
        <member name="P:System.Configuration.IniOptions.EncryptionPassword">
            <summary>
            <para>Gets or sets an INI file's protection password.</para>
            <para>File is decrypted on Load and encrypted on Save if a password is not <see langword="null"/> or <see cref="F:System.String.Empty"/>.</para>
            </summary>
        </member>
        <member name="P:System.Configuration.IniOptions.KeyDelimiter">
            <summary>
            Gets or sets keys name and value delimiter character.
            </summary>
        </member>
        <member name="P:System.Configuration.IniOptions.KeyDuplicate">
            <summary>
            Gets or sets a value indicating whether keys with same name are allowed, disallowed or ignored.
            </summary>
        </member>
        <member name="P:System.Configuration.IniOptions.KeyNameCaseSensitive">
            <summary>
            Gets or sets a value indicating whether keys name are case sensitive.
            </summary>
        </member>
        <member name="P:System.Configuration.IniOptions.KeySpaceAroundDelimiter">
            <summary>
            Gets or sets a value indicating whether space is written around the keys delimiter.
            </summary>
        </member>
        <member name="P:System.Configuration.IniOptions.SectionDuplicate">
            <summary>
            Gets or sets a value indicating whether sections with same name are allowed, disallowed or ignored.
            </summary>
        </member>
        <member name="P:System.Configuration.IniOptions.SectionNameCaseSensitive">
            <summary>
            Gets or sets a value indicating whether sections name are case sensitive.
            </summary>
        </member>
        <member name="P:System.Configuration.IniOptions.SectionWrapper">
            <summary>
            Gets or sets wrapper characters of sections name.
            </summary>
        </member>
        <member name="M:System.Configuration.IniOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Configuration.IniOptions"/> class.
            </summary>
        </member>
        <member name="T:System.Configuration.IniSerializationAttribute">
            <summary>
            Indicates the behavior of public property when serializing or deserializing the object that contains it.
            </summary>
        </member>
        <member name="P:System.Configuration.IniSerializationAttribute.Alias">
            <summary>
            Gets the <see cref="T:System.Configuration.IniKey"/> name of serialized the property.
            </summary>
        </member>
        <member name="P:System.Configuration.IniSerializationAttribute.Ignore">
            <summary>
            Gets the value indicating whether serialization is ignored.
            </summary>
        </member>
        <member name="M:System.Configuration.IniSerializationAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IniSerializationAttribute class and specifies the <see cref="T:System.Configuration.IniKey"/>'s name.
            </summary>
            <param name="alias">The name of the generated <see cref="T:System.Configuration.IniKey"/>.</param>
        </member>
        <member name="M:System.Configuration.IniSerializationAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the IniSerializationAttribute class and specifies if serialization is ignored.
            </summary>
            <param name="ignore">The value indicating whether serialization is ignored.</param>
        </member>
        <member name="T:System.Configuration.IniValueBinding">
            <summary>
            Represents a class that is used for binding operations, an operation in which the <see cref="T:System.Configuration.IniKey">placeholder keys</see> values are replaced with an internal or external data.
            </summary>
            <remarks>
            <para><see cref="T:System.Configuration.IniValueBinding"/> can be accessed through <see cref="P:System.Configuration.IniFile.ValueBinding"/> property.</para>
            <para>Binding can be executed with internal data source or with a provided external data source.</para>
            <para>For more information see <see href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#binding" target="_self">IniKey's Value Binding</see>.</para>
            </remarks>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#binding" target="_self">IniKey's Value Binding</seealso>
        </member>
        <member name="E:System.Configuration.IniValueBinding.Binding">
            <summary>
            Occurs when a placeholder is binding with data source value and can be used to customize the binding operation.
            </summary>
        </member>
        <member name="M:System.Configuration.IniValueBinding.Bind">
            <summary>
            Executes a binding operation with internal data source.
            </summary>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#binding" target="_self">IniKey's Value Binding</seealso>
        </member>
        <member name="M:System.Configuration.IniValueBinding.Bind(System.Object)">
            <summary>
            Executes a binding operation with external data source.
            </summary>
            <param name="dataSource">The binding data source.</param>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#binding" target="_self">IniKey's Value Binding</seealso>
        </member>
        <member name="M:System.Configuration.IniValueBinding.Bind(System.Object,System.String)">
            <summary>
            Executes a binding operation with external data source, only on specified section.
            </summary>
            <param name="dataSource">The binding data source.</param>
            <param name="sectionName">The <see cref="T:System.Configuration.IniSection"/>'s name.</param>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#binding" target="_self">IniKey's Value Binding</seealso>
        </member>
        <member name="T:System.Configuration.IniValueBindingEventArgs">
            <summary>
            Provides data for <see cref="E:System.Configuration.IniValueBinding.Binding"/> event.
            </summary>
        </member>
        <member name="P:System.Configuration.IniValueBindingEventArgs.PlaceholderName">
            <summary>
            Gets the placeholder's name.
            </summary>
        </member>
        <member name="P:System.Configuration.IniValueBindingEventArgs.PlaceholderKey">
            <summary>
            Gets the placeholder's <see cref="T:System.Configuration.IniKey"/>.
            </summary>
        </member>
        <member name="P:System.Configuration.IniValueBindingEventArgs.Value">
            <summary>
            Gets or sets the data source value that will replace the placeholder.
            </summary>
            <value>
            The data source value that will replace the placeholder, if it's not <see langword="null"/>.
            </value>
        </member>
        <member name="P:System.Configuration.IniValueBindingEventArgs.IsValueFound">
            <summary>
            Gets a value indicating whether value was found in the data source.
            </summary>
            <value>
            <see langword="true"/> if value was found in the data source.
            </value>
        </member>
        <member name="T:System.Configuration.IniValueMappings">
            <summary>
            Represents a class of mapped <see cref="P:System.Configuration.IniKey.Value"/>s and their results, used in <see cref="O:MadMilkman.Ini.IniKey.TryParseValue"/> methods.
            </summary>
            <remarks>
            <para><see cref="T:System.Configuration.IniValueMappings"/> can be accessed through <see cref="P:System.Configuration.IniFile.ValueMappings"/> property.</para>
            <para>Mapped value results have priority over parsing the value.</para>
            <para>For more information see <see href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#parsing" target="_self">IniKey's Value Parsing</see>.</para>
            </remarks>
            <seealso href="c49dc3a5-866f-4d2d-8f89-db303aceb5fe.htm#parsing" target="_self">IniKey's Value Parsing</seealso>
        </member>
        <member name="M:System.Configuration.IniValueMappings.Add``1(System.String,``0)">
            <summary>
            Adds a new mapping of <see cref="P:System.Configuration.IniKey.Value"/> to resulting object of parse methods.
            </summary>
            <param name="value">The key's value.</param>
            <param name="mappedResult">The object that represents parsed <see cref="P:System.Configuration.IniKey.Value"/>.</param>
            <typeparam name="T">Type of the object that represents parsed <see cref="P:System.Configuration.IniKey.Value"/>.</typeparam>
            <remarks>
            <para>The key's value cannot be <see langword="null"/>.</para>
            <para>The mapped result's type must be one of the supported types for parsing, see the remarks of <see cref="M:System.Configuration.IniKey.IsSupportedValueType(System.Type)"/> method.</para>
            <para>Collection cannot contain multiple entries of same key's value, value comparison is case-insensitive.</para>
            </remarks>
        </member>
        <member name="M:System.Configuration.IniValueMappings.Contains(System.String)">
            <summary>
            Determines whether the collection contains a mapping for a specified key's value.
            </summary>
            <param name="value">The key's value to locate in the collection.</param>
            <returns><see langword="true"/> if the collection contains a mapping for a specified key's value.</returns>
        </member>
        <member name="M:System.Configuration.IniValueMappings.Remove(System.String)">
            <summary>
            Removes a mapping for a specified key's value in the collection.
            </summary>
            <param name="value">The key's value to remove in the collection.</param>
            <returns><see langword="true"/> if a mapping for a specified key's value is successfully found and removed.</returns>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationContext.AddMessage(System.String,System.Int32,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationContext.AddMessage(System.Globalization.Localization.QtTranslationMessage)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationContext.InsertMessage(System.Int32,System.Globalization.Localization.QtTranslationMessage)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationContext.RemoveMessage(System.Globalization.Localization.QtTranslationMessage)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationContext.RemoveAt(System.Int32)">
            <summary></summary>
        </member>
        <member name="T:System.Globalization.Localization.QtTranslationException">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationException.#ctor(System.Exception)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationException.InvalideNoNodeFound(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationException.InvalideNoNodeFound(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="T:System.Globalization.Localization.QtTranslationLocationList">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocationList.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocationList.Add(System.Globalization.Localization.QtTranslationLocation)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocationList.Remove(System.Globalization.Localization.QtTranslationLocation)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocationList.Contains(System.Globalization.Localization.QtTranslationLocation)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocationList.IndexOf(System.Globalization.Localization.QtTranslationLocation)">
            <summary></summary>
        </member>
        <member name="T:System.Globalization.Localization.QtTranslationLocation">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.#ctor(System.String,System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Globalization.Localization.QtTranslationLocation.Filename">
            <summary>
            The filename of this location
            </summary>
        </member>
        <member name="P:System.Globalization.Localization.QtTranslationLocation.Line">
            <summary>
            The line in the file of this location
            </summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.Equals(System.Globalization.Localization.QtTranslationLocation)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.Compare(System.Globalization.Localization.QtTranslationLocation,System.Globalization.Localization.QtTranslationLocation)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.Compare(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.CompareTo(System.Globalization.Localization.QtTranslationLocation)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.Equals(System.Globalization.Localization.QtTranslationLocation,System.Globalization.Localization.QtTranslationLocation)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationLocation.Equals(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="P:System.Globalization.Localization.QtTranslationMessage.Locations">
            <summary>
            List of locations use this message.
            </summary>
        </member>
        <member name="P:System.Globalization.Localization.QtTranslationMessage.Source">
            <summary></summary>
        </member>
        <member name="P:System.Globalization.Localization.QtTranslationMessage.Translation">
            <summary></summary>
        </member>
        <member name="P:System.Globalization.Localization.QtTranslationMessage.Comment">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.QtTranslationMessage.ToString">
            <summary></summary>
        </member>
        <member name="T:System.Globalization.Localization.XliffException">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.XliffException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.XliffException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.XliffException.#ctor(System.Exception)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.XliffException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="P:System.Globalization.Localization.XliffException.NotSupported">
            <summary></summary>
        </member>
        <member name="P:System.Globalization.Localization.XliffException.NotSupported_ReadOnlyCollection">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.XliffException.NoAttributFound(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.XliffException.InvalideAttributID(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.XliffException.InvalideNodeName(System.String)">
            <summary></summary>
        </member>
        <member name="T:System.Globalization.Localization.XliffIdentified.IDChangedHandler">
            <summary></summary>
        </member>
        <member name="E:System.Globalization.Localization.XliffIdentified.IDchanged">
            <summary></summary>
        </member>
        <member name="M:System.Globalization.Localization.XliffIdentified.RaiseIDChanged(System.StringChangedEventArgs)">
            <summary>
            Raise the <see cref="E:System.Globalization.Localization.XliffIdentified.IDchanged"/> event wiht the specified argument
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:System.Globalization.Localization.XliffIdentifiedListe`1.IDCollection">
            <summary>
            Represents a collection of IDs from the <see cref="T:System.Globalization.Localization.XliffIdentifiedListe`1"/>
            </summary>
        </member>
        <member name="M:System.Globalization.Localization.XliffIdentifiedListe`1.IDCollection.Refresh">
            <summary>
            Refresh the content of the <see cref="T:System.Globalization.Localization.XliffIdentifiedListe`1.IDCollection"/>
            </summary>
        </member>
        <member name="T:System.Base64file">
            <summary>
            Static class for parse file in base 64
            </summary>
        </member>
        <member name="M:System.Base64file.FromFile(System.String)">
            <summary>
            Get Base64 from a file, in web format
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:System.Base64file.FromFile(System.String,System.Boolean)">
            <summary>
            Get Base64 from a file
            </summary>
            <param name="filePath"></param>
            <param name="WebFormat"></param>
            <returns></returns>
        </member>
        <member name="M:System.Base64file.Create(System.String,System.String)">
            <summary>
            Create file from a Base64
            </summary>
            <param name="filePath"></param>
            <param name="base64"></param>
        </member>
        <member name="T:System.MimeType.MimeTypes">
            <summary>
            Provides a huge dictionary of file extensions associate MINE types
            </summary>
        </member>
        <member name="F:System.MimeType.MimeTypes.MINE">
            <summary>
            List of MINE types associated with a extension
            </summary>
        </member>
        <member name="M:System.MimeType.MimeTypes.BuildMINE">
            <summary>
            Build extension -> MINE types
            </summary>
            <remarks>Original initial list to edited</remarks>
            <returns></returns>
        </member>
        <member name="F:System.MimeType.MimeTypes.EXTz">
            <summary>
            List of extensions associated with a MINE type
            </summary>
        </member>
        <member name="M:System.MimeType.MimeTypes.BuildExtDic">
            <summary>
            Build MINE type -> extensions
            </summary>
            <remarks>Created from <c>MINE</c></remarks>
            <returns></returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetMimeType(System.String)">
            <summary>
            Get the first MINE types associated with the extension
            </summary>
            <param name="extension"></param>
            <returns>String array of MINE types associated with the extension</returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetMimeType(System.String,System.Boolean)">
            <summary>
            Get the first MINE types associated with the extension
            </summary>
            <param name="extension"></param>
            <param name="throwErrorIfNotFound">Throw a exception if the extension as not found</param>
            <returns>String array of MINE types associated with the extension</returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetMimeTypes(System.String)">
            <summary>
            Get the MINE types associated with the extension
            </summary>
            <param name="extension"></param>
            <returns>String array of MINE types associated with the extension</returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetMimeTypes(System.String,System.Boolean)">
            <summary>
            Get the MINE types associated with the extension
            </summary>
            <param name="extension"></param>
            <param name="throwErrorIfNotFound">Throw a exception if the extension as not found</param>
            <returns>String array of MINE types associated with the extension</returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetAllMimeTypes">
            <summary>
            Get all MINE types stored
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetExtension(System.String)">
            <summary>
            Get the extensions associated with the MINE type
            </summary>
            <param name="mimeType"></param>
            <returns>String array of the extensions associated with the MimeType</returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetExtension(System.String,System.Boolean)">
            <summary>
            Get the extensions associated with the MINE type
            </summary>
            <param name="mimeType"></param>
            <param name="throwErrorIfNotFound">Throw a exception if the MINE type as not found</param>
            <returns>String array of the extensions associated with the MimeType</returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetExtensions(System.String)">
            <summary>
            Get the extensions associated with the MINE type
            </summary>
            <param name="mimeType"></param>
            <returns>String array of extensions associated with the MINE type</returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetExtensions(System.String,System.Boolean)">
            <summary>
            Get the extensions associated with the MINE type
            </summary>
            <param name="mimeType"></param>
            <param name="throwErrorIfNotFound">Throw a exception if the MINE type as not found</param>
            <returns>String array of the extensions associated with the MimeType</returns>
        </member>
        <member name="M:System.MimeType.MimeTypes.GetAllExtensions">
            <summary>
            Get all extensions stored
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Reflection.AssemblyExtension">
            <summary>
            The AssemblyHelper obtains the information of Assemblies.
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyExtension.GetTitle(System.Reflection.Assembly)">
            <summary>
            Gets the title of the assembly.
            </summary>
            <param name="assembly">The length of the new array.</param>
            <returns>The assembly title.</returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtension.GetManifestResourceStream(System.Reflection.Assembly,System.String[])">
            <summary>
            Get the Stream of the specified Resource in the assembly
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtension.GetManifestResourceString(System.Reflection.Assembly,System.String[])">
            <summary>
            Get the string of the specified Resource in the assembly
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtension.GetManifestResourceString(System.Reflection.Assembly,System.Text.Encoding,System.String[])">
            <summary>
            Get the string of the specified Resource in the assembly
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtension.GetManifestResourceInfo(System.Reflection.Assembly,System.String[])">
            <summary>
            Get the Info of the specified Resource in the assembly
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.AssemblyExtension.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Get the name of the Assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="T:System.Reflection.TypeExtension">
            <summary>
            Static class to extend <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetValueOf(System.Object,System.String)">
            <summary>
            Get the value of a Field or Property
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetValueOf``1(System.Object,System.String)">
            <summary>
            Get the value of a Field or Property
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetValueOf(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get the value of a Field or Property with the specified <see cref="T:System.Reflection.BindingFlags"/>
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetValueOf``1(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Get the value of a Field or Property with the specified <see cref="T:System.Reflection.BindingFlags"/>
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.InvokeConstructor(System.Type)">
            <summary>
            Invokes the void constructor
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.InvokeConstructor(System.Type,System.Object[])">
            <summary>
            Invokes the constructor corresponding to the specified parameter
            </summary>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.InvokeConstructor(System.Reflection.ConstructorInfo[],System.Object[])">
            <summary>
            Invokes the constructor corresponding to the specified parameter
            </summary>
            <param name="constructors"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.IsInheritanceOf(System.Type,System.Type)">
            <summary>
            Determines if the type is an inheritance from a other.
            </summary>
            <param name="type"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetType(System.Reflection.Assembly,System.String,System.String)">
            <summary>
            Get the type specified to the namespace and the name.
            </summary>
            <param name="assembly"></param>
            <param name="name"></param>
            <param name="fullnamespace"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetManifestResourceStream(System.Type,System.String[])">
            <summary>
            Get the Stream of the specified Resource in the assembly associated to the type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetManifestResourceString(System.Type,System.String[])">
            <summary>
            Get the strint of the specified Resource in the assembly associated to the type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetManifestResourceString(System.Type,System.Text.Encoding,System.String[])">
            <summary>
            Get the strint of the specified Resource in the assembly associated to the type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetManifestResourceNames(System.Type)">
            <summary>
            Get the nmaes of all Resource in the assembly associated to the type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetManifestResourceInfo(System.Type,System.String[])">
            <summary>
            Get the Info of the specified Resource in the assembly associated to the type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Reflection.TypeExtension.GetAssemblyName(System.Type)">
            <summary>
            Get the name of the Assembly of the type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:System.Sgml.SgmlParseException">
            <summary>
            Thrown if any errors occur while parsing the source.
            </summary>
        </member>
        <member name="M:System.Sgml.SgmlParseException.#ctor">
            <summary>
            Instantiates a new instance of SgmlParseException with no specific error information.
            </summary>
        </member>
        <member name="M:System.Sgml.SgmlParseException.#ctor(System.String)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
        </member>
        <member name="M:System.Sgml.SgmlParseException.#ctor(System.String,System.Sgml.Entity)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="e">The entity on which the error occurred.</param>
        </member>
        <member name="M:System.Sgml.SgmlParseException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="innerException">The original exception that caused the problem.</param>
        </member>
        <member name="M:System.Sgml.SgmlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SgmlParseException class with serialized data. 
            </summary>
            <param name="streamInfo">The object that holds the serialized object data.</param>
            <param name="streamCtx">The contextual information about the source or destination.</param>
        </member>
        <member name="P:System.Sgml.SgmlParseException.EntityContext">
            <summary>
            Contextual information detailing the entity on which the error occurred.
            </summary>
        </member>
        <member name="M:System.Sgml.SgmlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:System.Sgml.LiteralType">
            <summary>
            The different types of literal text returned by the SgmlParser.
            </summary>
        </member>
        <member name="F:System.Sgml.LiteralType.CDATA">
            <summary>
            CDATA text literals.
            </summary>
        </member>
        <member name="F:System.Sgml.LiteralType.SDATA">
            <summary>
            SDATA entities.
            </summary>
        </member>
        <member name="F:System.Sgml.LiteralType.PI">
            <summary>
            The contents of a Processing Instruction.
            </summary>
        </member>
        <member name="T:System.Sgml.Entity">
            <summary>
            An Entity declared in a DTD.
            </summary>
        </member>
        <member name="F:System.Sgml.Entity.EOF">
            <summary>
            The character indicating End Of File.
            </summary>
        </member>
        <member name="M:System.Sgml.Entity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="pubid">The public id of the entity.</param>
            <param name="uri">The uri of the entity.</param>
            <param name="proxy">The proxy server to use when retrieving any web content.</param>
        </member>
        <member name="M:System.Sgml.Entity.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="literal">The literal value of the entity.</param>
        </member>
        <member name="M:System.Sgml.Entity.#ctor(System.String,System.Uri,System.IO.TextReader,System.String)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="baseUri">The baseUri for the entity to read from the TextReader.</param>
            <param name="stm">The TextReader to read the entity from.</param>
            <param name="proxy">The proxy server to use when retrieving any web content.</param>
        </member>
        <member name="P:System.Sgml.Entity.Name">
            <summary>
            The name of the entity.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.IsHtml">
            <summary>
            True if the entity is the html element entity.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.PublicId">
            <summary>
            The public identifier of this entity.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.Uri">
            <summary>
            The Uri that is the source for this entity.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.ResolvedUri">
            <summary>
            The resolved location of the DTD this entity is from.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.Parent">
            <summary>
            Gets the parent Entity of this Entity.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.Lastchar">
            <summary>
            The last character read from the input stream for this entity.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.Line">
            <summary>
            The line on which this entity was defined.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.LinePosition">
            <summary>
            The index into the line where this entity is defined.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.IsInternal">
            <summary>
            Whether this entity is an internal entity or not.
            </summary>
            <value>true if this entity is internal, otherwise false.</value>
        </member>
        <member name="P:System.Sgml.Entity.Literal">
            <summary>
            The literal value of this entity.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.LiteralType">
            <summary>
            The <see cref="P:System.Sgml.Entity.LiteralType"/> of this entity.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.IsWhitespace">
            <summary>
            Whether the last char read for this entity is a whitespace character.
            </summary>
        </member>
        <member name="P:System.Sgml.Entity.Proxy">
            <summary>
            The proxy server to use when making web requests to resolve entities.
            </summary>
        </member>
        <member name="M:System.Sgml.Entity.ReadChar">
            <summary>
            Reads the next character from the DTD stream.
            </summary>
            <returns>The next character from the DTD stream.</returns>
        </member>
        <member name="M:System.Sgml.Entity.Open(System.Sgml.Entity,System.Uri)">
            <summary>
            Begins processing an entity.
            </summary>
            <param name="parent">The parent of this entity.</param>
            <param name="baseUri">The base Uri for processing this entity within.</param>
        </member>
        <member name="P:System.Sgml.Entity.Encoding">
            <summary>
            Gets the character encoding for this entity.
            </summary>
        </member>
        <member name="M:System.Sgml.Entity.Close">
            <summary>
            Closes the reader from which the entity is being read.
            </summary>
        </member>
        <member name="M:System.Sgml.Entity.SkipWhitespace">
            <summary>
            Returns the next character after any whitespace.
            </summary>
            <returns>The next character that is not whitespace.</returns>
        </member>
        <member name="M:System.Sgml.Entity.ScanToken(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Scans a token from the input stream and returns the result.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to process the token.</param>
            <param name="term">A set of characters to look for as terminators for the token.</param>
            <param name="nmtoken">true if the token should be a NMToken, otherwise false.</param>
            <returns>The scanned token.</returns>
        </member>
        <member name="M:System.Sgml.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
            Read a literal from the input stream.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to build the literal.</param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The literal scanned from the input stream.</returns>
        </member>
        <member name="M:System.Sgml.Entity.ScanToEnd(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Reads input until the end of the input stream or until a string of terminator characters is found.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to build the string.</param>
            <param name="type">The type of the element being read (only used in reporting errors).</param>
            <param name="terminators">The string of terminator characters to look for.</param>
            <returns>The string read from the input stream.</returns>
        </member>
        <member name="M:System.Sgml.Entity.ExpandCharEntity">
            <summary>
            Expands a character entity to be read from the input stream.
            </summary>
            <returns>The string for the character entity.</returns>
        </member>
        <member name="M:System.Sgml.Entity.Error(System.String)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <exception cref="T:System.Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:System.Sgml.Entity.Error(System.String,System.Char)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="ch">The unexpected character causing the error.</param>
            <exception cref="T:System.Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:System.Sgml.Entity.Error(System.String,System.Int32)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="x">The value causing the error.</param>
            <exception cref="T:System.Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:System.Sgml.Entity.Error(System.String,System.String)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="arg">The argument for the error.</param>
            <exception cref="T:System.Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:System.Sgml.Entity.Context">
            <summary>
            Returns a string giving information on how the entity is referenced and declared, walking up the parents until the top level parent entity is found.
            </summary>
            <returns>Contextual information for the entity.</returns>
        </member>
        <member name="M:System.Sgml.Entity.IsLiteralType(System.String)">
            <summary>
            Checks whether a token denotes a literal entity or not.
            </summary>
            <param name="token">The token to check.</param>
            <returns>true if the token is "CDATA", "SDATA" or "PI", otherwise false.</returns>
        </member>
        <member name="M:System.Sgml.Entity.SetLiteralType(System.String)">
            <summary>
            Sets the entity to be a literal of the type specified.
            </summary>
            <param name="token">One of "CDATA", "SDATA" or "PI".</param>
        </member>
        <member name="M:System.Sgml.Entity.Finalize">
            <summary>
            The finalizer for the Entity class.
            </summary>
        </member>
        <member name="M:System.Sgml.Entity.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="M:System.Sgml.Entity.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
            <param name="isDisposing">true if this method has been called by user code, false if it has been called through a finalizer.</param>
        </member>
        <member name="T:System.Sgml.ElementDecl">
            <summary>
            An element declaration in a DTD.
            </summary>
        </member>
        <member name="M:System.Sgml.ElementDecl.#ctor(System.String,System.Boolean,System.Boolean,System.Sgml.ContentModel,System.String[],System.String[])">
            <summary>
            Initialises a new element declaration instance.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="sto">Whether the start tag is optional.</param>
            <param name="eto">Whether the end tag is optional.</param>
            <param name="cm">The <see cref="P:System.Sgml.ElementDecl.ContentModel"/> of the element.</param>
            <param name="inclusions"></param>
            <param name="exclusions"></param>
        </member>
        <member name="P:System.Sgml.ElementDecl.Name">
            <summary>
            The element name.
            </summary>
        </member>
        <member name="P:System.Sgml.ElementDecl.ContentModel">
            <summary>
            The <see cref="T:System.Sgml.ContentModel"/> of the element declaration.
            </summary>
        </member>
        <member name="P:System.Sgml.ElementDecl.EndTagOptional">
            <summary>
            Whether the end tag of the element is optional.
            </summary>
            <value>true if the end tag of the element is optional, otherwise false.</value>
        </member>
        <member name="P:System.Sgml.ElementDecl.StartTagOptional">
            <summary>
            Whether the start tag of the element is optional.
            </summary>
            <value>true if the start tag of the element is optional, otherwise false.</value>
        </member>
        <member name="M:System.Sgml.ElementDecl.FindAttribute(System.String)">
            <summary>
            Finds the attribute definition with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:System.Sgml.AttDef"/> to find.</param>
            <returns>The <see cref="T:System.Sgml.AttDef"/> with the specified name.</returns>
            <exception cref="T:System.InvalidOperationException">If the attribute list has not yet been initialised.</exception>
        </member>
        <member name="M:System.Sgml.ElementDecl.AddAttDefs(System.Collections.Generic.Dictionary{System.String,System.Sgml.AttDef})">
            <summary>
            Adds attribute definitions to the element declaration.
            </summary>
            <param name="list">The list of attribute definitions to add.</param>
        </member>
        <member name="M:System.Sgml.ElementDecl.CanContain(System.String,System.Sgml.SgmlDtd)">
            <summary>
            Tests whether this element can contain another specified element.
            </summary>
            <param name="name">The name of the element to check for.</param>
            <param name="dtd">The DTD to use to do the check.</param>
            <returns>True if the specified element can be contained by this element.</returns>
        </member>
        <member name="T:System.Sgml.DeclaredContent">
            <summary>
            Where nested subelements cannot occur within an element, its contents can be declared to consist of one of the types of declared content contained in this enumeration.
            </summary>
        </member>
        <member name="F:System.Sgml.DeclaredContent.Default">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:System.Sgml.DeclaredContent.CDATA">
            <summary>
            Character data (CDATA), which contains only valid SGML characters.
            </summary>
        </member>
        <member name="F:System.Sgml.DeclaredContent.RCDATA">
            <summary>
            Replaceable character data (RCDATA), which can contain text, character references and/or general entity references that resolve to character data.
            </summary>
        </member>
        <member name="F:System.Sgml.DeclaredContent.EMPTY">
            <summary>
            Empty element (EMPTY), i.e. having no contents, or contents that can be generated by the program.
            </summary>
        </member>
        <member name="T:System.Sgml.ContentModel">
            <summary>
            Defines the content model for an element.
            </summary>
        </member>
        <member name="M:System.Sgml.ContentModel.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:System.Sgml.ContentModel"/> class.
            </summary>
        </member>
        <member name="P:System.Sgml.ContentModel.CurrentDepth">
            <summary>
            The number of groups on the stack.
            </summary>
        </member>
        <member name="P:System.Sgml.ContentModel.DeclaredContent">
            <summary>
            The allowed child content, specifying if nested children are not allowed and if so, what content is allowed.
            </summary>
        </member>
        <member name="M:System.Sgml.ContentModel.PushGroup">
            <summary>
            Begins processing of a nested model group.
            </summary>
        </member>
        <member name="M:System.Sgml.ContentModel.PopGroup">
            <summary>
            Finishes processing of a nested model group.
            </summary>
            <returns>The current depth of the group nesting, or -1 if there are no more groups to pop.</returns>
        </member>
        <member name="M:System.Sgml.ContentModel.AddSymbol(System.String)">
            <summary>
            Adds a new symbol to the current group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:System.Sgml.ContentModel.AddConnector(System.Char)">
            <summary>
            Adds a connector onto the member list for the current group.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:System.Sgml.SgmlParseException">
            If the content is not mixed and has no members yet, or if the group type has been set and the
            connector does not match the group type.
            </exception>
        </member>
        <member name="M:System.Sgml.ContentModel.AddOccurrence(System.Char)">
            <summary>
            Adds an occurrence character for the current model group, setting it's <see cref="T:System.Sgml.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:System.Sgml.ContentModel.SetDeclaredContent(System.String)">
            <summary>
            Sets the contained content for the content model.
            </summary>
            <param name="dc">The text specified the permissible declared child content.</param>
        </member>
        <member name="M:System.Sgml.ContentModel.CanContain(System.String,System.Sgml.SgmlDtd)">
            <summary>
            Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
        </member>
        <member name="T:System.Sgml.GroupType">
            <summary>
            The type of the content model group, defining the order in which child elements can occur.
            </summary>
        </member>
        <member name="F:System.Sgml.GroupType.None">
            <summary>
            No model group.
            </summary>
        </member>
        <member name="F:System.Sgml.GroupType.And">
            <summary>
            All elements must occur, in any order.
            </summary>
        </member>
        <member name="F:System.Sgml.GroupType.Or">
            <summary>
            One (and only one) must occur.
            </summary>
        </member>
        <member name="F:System.Sgml.GroupType.Sequence">
            <summary>
            All element must occur, in the specified order.
            </summary>
        </member>
        <member name="T:System.Sgml.Occurrence">
            <summary>
            Qualifies the occurrence of a child element within a content model group.
            </summary>
        </member>
        <member name="F:System.Sgml.Occurrence.Required">
            <summary>
            The element is required and must occur only once.
            </summary>
        </member>
        <member name="F:System.Sgml.Occurrence.Optional">
            <summary>
            The element is optional and must occur once at most.
            </summary>
        </member>
        <member name="F:System.Sgml.Occurrence.ZeroOrMore">
            <summary>
            The element is optional and can be repeated.
            </summary>
        </member>
        <member name="F:System.Sgml.Occurrence.OneOrMore">
            <summary>
            The element must occur at least once or more times.
            </summary>
        </member>
        <member name="T:System.Sgml.Group">
            <summary>
            Defines a group of elements nested within another element.
            </summary>
        </member>
        <member name="P:System.Sgml.Group.Occurrence">
            <summary>
            The <see cref="P:System.Sgml.Group.Occurrence"/> of this group.
            </summary>
        </member>
        <member name="P:System.Sgml.Group.TextOnly">
            <summary>
            Checks whether the group contains only text.
            </summary>
            <value>true if the group is of mixed content and has no members, otherwise false.</value>
        </member>
        <member name="P:System.Sgml.Group.Parent">
            <summary>
            The parent group of this group.
            </summary>
        </member>
        <member name="M:System.Sgml.Group.#ctor(System.Sgml.Group)">
            <summary>
            Initialises a new Content Model Group.
            </summary>
            <param name="parent">The parent model group.</param>
        </member>
        <member name="M:System.Sgml.Group.AddGroup(System.Sgml.Group)">
            <summary>
            Adds a new child model group to the end of the group's members.
            </summary>
            <param name="g">The model group to add.</param>
        </member>
        <member name="M:System.Sgml.Group.AddSymbol(System.String)">
            <summary>
            Adds a new symbol to the group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:System.Sgml.Group.AddConnector(System.Char)">
            <summary>
            Adds a connector onto the member list.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:System.Sgml.SgmlParseException">
            If the content is not mixed and has no members yet, or if the group type has been set and the
            connector does not match the group type.
            </exception>
        </member>
        <member name="M:System.Sgml.Group.AddOccurrence(System.Char)">
            <summary>
            Adds an occurrence character for this group, setting it's <see cref="P:System.Sgml.Group.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:System.Sgml.Group.CanContain(System.String,System.Sgml.SgmlDtd)">
            <summary>
            Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
            <remarks>
            Rough approximation - this is really assuming an "Or" group
            </remarks>
        </member>
        <member name="T:System.Sgml.AttributeType">
            <summary>
            Defines the different possible attribute types.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.Default">
            <summary>
            Attribute type not specified.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.CDATA">
            <summary>
            The attribute contains text (with no markup).
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.ENTITY">
            <summary>
            The attribute contains an entity declared in a DTD.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.ENTITIES">
            <summary>
            The attribute contains a number of entities declared in a DTD.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.ID">
            <summary>
            The attribute is an id attribute uniquely identifie the element it appears on.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.IDREF">
            <summary>
            The attribute value can be any declared subdocument or data entity name.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.IDREFS">
            <summary>
            The attribute value is a list of (space separated) declared subdocument or data entity names.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.NAME">
            <summary>
            The attribute value is a SGML Name.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.NAMES">
            <summary>
            The attribute value is a list of (space separated) SGML Names.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.NMTOKEN">
            <summary>
            The attribute value is an XML name token (i.e. contains only name characters, but in this case with digits and other valid name characters accepted as the first character).
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.NMTOKENS">
            <summary>
            The attribute value is a list of (space separated) XML NMTokens.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.NUMBER">
            <summary>
            The attribute value is a number.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.NUMBERS">
            <summary>
            The attribute value is a list of (space separated) numbers.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.NUTOKEN">
            <summary>
            The attribute value is a number token (i.e. a name that starts with a number).
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.NUTOKENS">
            <summary>
            The attribute value is a list of number tokens.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.NOTATION">
            <summary>
            Attribute value is a member of the bracketed list of notation names that qualifies this reserved name.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributeType.ENUMERATION">
            <summary>
            The attribute value is one of a set of allowed names.
            </summary>
        </member>
        <member name="T:System.Sgml.AttributePresence">
            <summary>
            Defines the different constraints on an attribute's presence on an element.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributePresence.Default">
            <summary>
            The attribute has a default value, and its presence is optional.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributePresence.Fixed">
            <summary>
            The attribute has a fixed value, if present.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributePresence.Required">
            <summary>
            The attribute must always be present on every element.
            </summary>
        </member>
        <member name="F:System.Sgml.AttributePresence.Implied">
            <summary>
            The element is optional.
            </summary>
        </member>
        <member name="T:System.Sgml.AttDef">
            <summary>
            An attribute definition in a DTD.
            </summary>
        </member>
        <member name="M:System.Sgml.AttDef.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:System.Sgml.AttDef"/> class.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="P:System.Sgml.AttDef.Name">
            <summary>
            The name of the attribute declared by this attribute definition.
            </summary>
        </member>
        <member name="P:System.Sgml.AttDef.Default">
            <summary>
            Gets of sets the default value of the attribute.
            </summary>
        </member>
        <member name="P:System.Sgml.AttDef.AttributePresence">
            <summary>
            The constraints on the attribute's presence on an element.
            </summary>
        </member>
        <member name="P:System.Sgml.AttDef.EnumValues">
            <summary>
            Gets or sets the possible enumerated values for the attribute.
            </summary>
        </member>
        <member name="M:System.Sgml.AttDef.SetEnumeratedType(System.String[],System.Sgml.AttributeType)">
            <summary>
            Sets the attribute definition to have an enumerated value.
            </summary>
            <param name="enumValues">The possible values in the enumeration.</param>
            <param name="type">The type to set the attribute to.</param>
            <exception cref="T:System.ArgumentException">If the type parameter is not either <see cref="F:System.Sgml.AttributeType.ENUMERATION"/> or <see cref="F:System.Sgml.AttributeType.NOTATION"/>.</exception>
        </member>
        <member name="P:System.Sgml.AttDef.Type">
            <summary>
            The <see cref="T:System.Sgml.AttributeType"/> of the attribute declaration.
            </summary>
        </member>
        <member name="M:System.Sgml.AttDef.SetType(System.String)">
            <summary>
            Sets the type of the attribute definition.
            </summary>
            <param name="type">The string representation of the attribute type, corresponding to the values in the <see cref="T:System.Sgml.AttributeType"/> enumeration.</param>
        </member>
        <member name="M:System.Sgml.AttDef.SetPresence(System.String)">
            <summary>
            Sets the attribute presence declaration.
            </summary>
            <param name="token">The string representation of the attribute presence, corresponding to one of the values in the <see cref="P:System.Sgml.AttDef.AttributePresence"/> enumeration.</param>
            <returns>true if the attribute presence implies the element has a default value.</returns>
        </member>
        <member name="T:System.Sgml.SgmlDtd">
            <summary>
            Provides DTD parsing and support for the SgmlParser framework.
            </summary>
        </member>
        <member name="M:System.Sgml.SgmlDtd.#ctor(System.String,System.Xml.XmlNameTable)">
            <summary>
            Initialises a new instance of the <see cref="T:System.Sgml.SgmlDtd"/> class.
            </summary>
            <param name="name">The name of the DTD.</param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.</param>
        </member>
        <member name="P:System.Sgml.SgmlDtd.Name">
            <summary>
            The name of the DTD.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlDtd.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="M:System.Sgml.SgmlDtd.Parse(System.Uri,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlNameTable)">
            <summary>
            Parses a DTD and creates a <see cref="T:System.Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="pubid"></param>
            <param name="url"></param>
            <param name="subset"></param>
            <param name="proxy"></param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.</param>
            <returns>A new <see cref="T:System.Sgml.SgmlDtd"/> instance that encapsulates the DTD.</returns>
        </member>
        <member name="M:System.Sgml.SgmlDtd.Parse(System.Uri,System.String,System.IO.TextReader,System.String,System.String,System.Xml.XmlNameTable)">
            <summary>
            Parses a DTD and creates a <see cref="T:System.Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="input">The reader to load the DTD from.</param>
            <param name="subset"></param>
            <param name="proxy">The proxy server to use when loading resources.</param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.</param>
            <returns>A new <see cref="T:System.Sgml.SgmlDtd"/> instance that encapsulates the DTD.</returns>
        </member>
        <member name="M:System.Sgml.SgmlDtd.FindEntity(System.String)">
            <summary>
            Finds an entity in the DTD with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:System.Sgml.Entity"/> to find.</param>
            <returns>The specified Entity from the DTD.</returns>
        </member>
        <member name="M:System.Sgml.SgmlDtd.FindElement(System.String)">
            <summary>
            Finds an element declaration in the DTD with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:System.Sgml.ElementDecl"/> to find and return.</param>
            <returns>The <see cref="T:System.Sgml.ElementDecl"/> matching the specified name.</returns>
        </member>
        <member name="M:System.Sgml.SgmlDtd.GetEntitiesLiteralNameLookup">
            <summary>
            Returns a dictionary for looking up entities by their <see cref="P:System.Sgml.Entity.Literal"/> value.
            </summary>
            <returns>A dictionary for looking up entities by their <see cref="P:System.Sgml.Entity.Literal"/> value.</returns>
        </member>
        <member name="T:System.Sgml.CaseFolding">
            <summary>
            SGML is case insensitive, so here you can choose between converting
            to lower case or upper case tags.  "None" means that the case is left
            alone, except that end tags will be folded to match the start tags.
            </summary>
        </member>
        <member name="F:System.Sgml.CaseFolding.None">
            <summary>
            Do not convert case, except for converting end tags to match start tags.
            </summary>
        </member>
        <member name="F:System.Sgml.CaseFolding.ToUpper">
            <summary>
            Convert tags to upper case.
            </summary>
        </member>
        <member name="F:System.Sgml.CaseFolding.ToLower">
            <summary>
            Convert tags to lower case.
            </summary>
        </member>
        <member name="T:System.Sgml.HWStack">
            <summary>
            This stack maintains a high water mark for allocated objects so the client
            can reuse the objects in the stack to reduce memory allocations, this is
            used to maintain current state of the parser for element stack, and attributes
            in each element.
            </summary>
        </member>
        <member name="M:System.Sgml.HWStack.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the HWStack class.
            </summary>
            <param name="growth">The amount to grow the stack space by, if more space is needed on the stack.</param>
        </member>
        <member name="P:System.Sgml.HWStack.Count">
            <summary>
            The number of items currently in the stack.
            </summary>
        </member>
        <member name="P:System.Sgml.HWStack.Size">
            <summary>
            The size (capacity) of the stack.
            </summary>
        </member>
        <member name="P:System.Sgml.HWStack.Item(System.Int32)">
            <summary>
            Returns the item at the requested index or null if index is out of bounds
            </summary>
            <param name="i">The index of the item to retrieve.</param>
            <returns>The item at the requested index or null if index is out of bounds.</returns>
        </member>
        <member name="M:System.Sgml.HWStack.Pop">
            <summary>
            Removes and returns the item at the top of the stack
            </summary>
            <returns>The item at the top of the stack.</returns>
        </member>
        <member name="M:System.Sgml.HWStack.Push">
            <summary>
            Pushes a new slot at the top of the stack.
            </summary>
            <returns>The object at the top of the stack.</returns>
            <remarks>
            This method tries to reuse a slot, if it returns null then
            the user has to call the other Push method.
            </remarks>
        </member>
        <member name="M:System.Sgml.HWStack.RemoveAt(System.Int32)">
            <summary>
            Remove a specific item from the stack.
            </summary>
            <param name="i">The index of the item to remove.</param>
        </member>
        <member name="T:System.Sgml.Attribute">
            <summary>
            This class represents an attribute.  The AttDef is assigned
            from a validation process, and is used to provide default values.
            </summary>
        </member>
        <member name="M:System.Sgml.Attribute.Reset(System.String,System.String,System.Char)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method.
            </summary>
        </member>
        <member name="T:System.Sgml.Node">
            <summary>
            This class models an XML node, an array of elements in scope is maintained while parsing
            for validation purposes, and these Node objects are reused to reduce object allocation,
            hence the reset method.  
            </summary>
        </member>
        <member name="M:System.Sgml.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="T:System.Sgml.SgmlReader">
            <summary>
            SgmlReader is an XmlReader API over any SGML document (including built in 
            support for HTML).  
            </summary>
        </member>
        <member name="F:System.Sgml.SgmlReader.UNDEFINED_NAMESPACE">
            <summary>
            The value returned when a namespace is queried and none has been specified.
            </summary>
        </member>
        <member name="M:System.Sgml.SgmlReader.#ctor">
            <summary>
            Initialises a new instance of the SgmlReader class.
            </summary>
        </member>
        <member name="M:System.Sgml.SgmlReader.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initialises a new instance of the SgmlReader class with an existing <see cref="T:System.Xml.XmlNameTable"/>, which is NOT used.
            </summary>
            <param name="nt">The nametable to use.</param>
        </member>
        <member name="P:System.Sgml.SgmlReader.Dtd">
            <summary>
            Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
            it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.DocType">
            <summary>
            The name of root element specified in the DOCTYPE tag.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.RootElementName">
            <summary>
            The root element of the document.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.PublicIdentifier">
            <summary>
            The PUBLIC identifier in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.SystemLiteral">
            <summary>
            The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.InternalSubset">
            <summary>
            The DTD internal subset in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.InputStream">
            <summary>
            The input stream containing SGML data to parse.
            You must specify this property or the Href property before calling Read().
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.WebProxy">
            <summary>
            Sometimes you need to specify a proxy server in order to load data via HTTP
            from outside the firewall.  For example: "itgproxy:80".
            </summary>
        </member>
        <member name="M:System.Sgml.SgmlReader.SetBaseUri(System.String)">
            <summary>
            The base Uri is used to resolve relative Uri's like the SystemLiteral and
            Href properties.  This is a method because BaseURI is a read-only
            property on the base XmlReader class.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.Href">
            <summary>
            Specify the location of the input SGML document as a URL.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.StripDocType">
            <summary>
            Whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.IgnoreDtd">
            <summary>
            Gets or sets a value indicating whether to ignore any DTD reference.
            </summary>
            <value><c>true</c> if DTD references should be ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Sgml.SgmlReader.CaseFolding">
            <summary>
            The case conversion behaviour while processing tags.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.ErrorLog">
            <summary>
            DTD validation errors are written to this stream.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.ErrorLogFile">
            <summary>
            DTD validation errors are written to this log file.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.NodeType">
            <summary>
            The node type of the node currently being parsed.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.Name">
            <summary>
            The name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.LocalName">
            <summary>
            The local name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.NamespaceURI">
            <summary>
            The namespace of the current node, if currently positioned on a node or attribute.
            </summary>
            <remarks>
            If not positioned on a node or attribute, <see cref="F:System.Sgml.SgmlReader.UNDEFINED_NAMESPACE"/> is returned.
            </remarks>
        </member>
        <member name="P:System.Sgml.SgmlReader.Prefix">
            <summary>
            The prefix of the current node's name.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.HasValue">
            <summary>
            Whether the current node has a value or not.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.Value">
            <summary>
            The value of the current node.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document.
            </summary>
            <value>The depth of the current node in the XML document.</value>
        </member>
        <member name="P:System.Sgml.SgmlReader.BaseURI">
            <summary>
            Gets the base URI of the current node.
            </summary>
            <value>The base URI of the current node.</value>
        </member>
        <member name="P:System.Sgml.SgmlReader.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.IsDefault">
            <summary>
            Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.
            </summary>
            <value>
            true if the current node is an attribute whose value was generated from the default value defined in the DTD or
            schema; false if the attribute value was explicitly set.
            </value>
        </member>
        <member name="P:System.Sgml.SgmlReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of an attribute node.
            </summary>
            <value>The quotation mark character (" or ') used to enclose the value of an attribute node.</value>
            <remarks>
            This property applies only to an attribute node.
            </remarks>
        </member>
        <member name="P:System.Sgml.SgmlReader.XmlSpace">
            <summary>
            Gets the current xml:space scope.
            </summary>
            <value>One of the <see cref="P:System.Sgml.SgmlReader.XmlSpace"/> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</value>
        </member>
        <member name="P:System.Sgml.SgmlReader.XmlLang">
            <summary>
            Gets the current xml:lang scope.
            </summary>
            <value>The current xml:lang scope.</value>
        </member>
        <member name="P:System.Sgml.SgmlReader.WhitespaceHandling">
            <summary>
            Specifies how white space is handled.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
            <value>The number of attributes on the current node.</value>
        </member>
        <member name="M:System.Sgml.SgmlReader.GetAttribute(System.String)">
            <summary>
            Gets the value of an attribute with the specified <see cref="P:System.Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:System.Sgml.SgmlReader.LocalName"/> and <see cref="P:System.Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="P:System.Sgml.SgmlReader.Item(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="P:System.Sgml.SgmlReader.Item(System.String)">
            <summary>
            Gets the value of an attribute with the specified <see cref="P:System.Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="P:System.Sgml.SgmlReader.Item(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:System.Sgml.SgmlReader.LocalName"/> and <see cref="P:System.Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.MoveToAttribute(System.String)">
            <summary>
            Moves to the atttribute with the specified <see cref="P:System.Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the attribute with the specified <see cref="P:System.Sgml.SgmlReader.LocalName"/> and <see cref="P:System.Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.MoveToAttribute(System.Int32)">
            <summary>
            Moves to the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute to move to.</param>
        </member>
        <member name="M:System.Sgml.SgmlReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>true if there is a next attribute; false if there are no more attributes.</returns>
            <remarks>
            If the current node is an element node, this method is equivalent to <see cref="M:System.Sgml.SgmlReader.MoveToFirstAttribute"/>. If <see cref="M:System.Sgml.SgmlReader.MoveToNextAttribute"/> returns true,
            the reader moves to the next attribute; otherwise, the position of the reader does not change.
            </remarks>
        </member>
        <member name="M:System.Sgml.SgmlReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned
            on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="P:System.Sgml.SgmlReader.IsHtml">
            <summary>
            Gets whether the content is HTML or not.
            </summary>
        </member>
        <member name="M:System.Sgml.SgmlReader.GetEncoding">
            <summary>
            Returns the encoding of the current entity.
            </summary>
            <returns>The encoding of the current entity.</returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
            Consumes and returns a literal block of text, expanding entities as it does so.
            </summary>
            <param name="sb">The string builder to use.</param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The consumed literal.</returns>
            <remarks>
            This version is slightly different from <see cref="M:System.Sgml.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)"/> in that
            it also expands entities.
            </remarks>
        </member>
        <member name="P:System.Sgml.SgmlReader.EOF">
            <summary>
            Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            <value>true if the reader is positioned at the end of the stream; otherwise, false.</value>
        </member>
        <member name="M:System.Sgml.SgmlReader.Close">
            <summary>
            Changes the <see cref="P:System.Sgml.SgmlReader.ReadState"/> to Closed.
            </summary>
        </member>
        <member name="P:System.Sgml.SgmlReader.ReadState">
            <summary>
            Gets the state of the reader.
            </summary>
            <value>One of the ReadState values.</value>
        </member>
        <member name="M:System.Sgml.SgmlReader.ReadString">
            <summary>
            Reads the contents of an element or text node as a string.
            </summary>
            <returns>The contents of the element or an empty string.</returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.ReadInnerXml">
            <summary>
            Reads all the content, including markup, as a string.
            </summary>
            <returns>
            All the XML content, including markup, in the current node. If the current node has no children,
            an empty string is returned. If the current node is neither an element nor attribute, an empty
            string is returned.
            </returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.ReadOuterXml">
            <summary>
            Reads the content, including markup, representing this node and all its children.
            </summary>
            <returns>
            If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.
            </returns>
        </member>
        <member name="P:System.Sgml.SgmlReader.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="M:System.Sgml.SgmlReader.LookupNamespace(System.String)">
            <summary>
            Resolves a namespace prefix in the current element's scope.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.</param>
            <returns>The namespace URI to which the prefix maps or a null reference (Nothing in Visual Basic) if no matching prefix is found.</returns>
        </member>
        <member name="M:System.Sgml.SgmlReader.ResolveEntity">
            <summary>
            Resolves the entity reference for EntityReference nodes.
            </summary>
            <exception cref="T:System.InvalidOperationException">SgmlReader does not resolve or return entities.</exception>
        </member>
        <member name="M:System.Sgml.SgmlReader.ReadAttributeValue">
            <summary>
            Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            <returns>
            true if there are nodes to return. false if the reader is not positioned on an attribute node when the initial call is made or if all the
            attribute values have been read. An empty attribute, such as, misc="", returns true with a single node with a value of string.Empty.
            </returns>
        </member>
        <member name="T:System.ArraysHelper">
            <summary>
            The ArraysHelper contains functionality for some array operations, such as: 
            initialization, casting, and redimension.
            </summary>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="TE">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new one-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="TE">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="lowerBound">The lower bound for the new array.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new one-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="TE">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="constructorParams">The list of values to be sent to 
            the constructor of the item type of the array.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new one-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32,System.Int32,System.Object[],System.Boolean,System.Int32)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="TE">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="lowerBound">The lower bound for the new array.</param>
            <param name="constructorParams">The list of values to be sent to 
            the constructor of the item type of the array.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new one-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32,System.Object,System.Boolean,System.Int32)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="TE">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="initValue">An initial value to set to each element.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new one-dimensional array with its values initialized to initValue.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32,System.Int32,System.Object,System.Boolean,System.Int32)">
            <summary>
            Initializes a one-dimensional array.
            </summary>
            <typeparam name="TE">The type of the elements of the array like 'string' for instance.</typeparam>
            <param name="length">The length of the new array.</param>
            <param name="lowerBound">The lower bound for the new array.</param>
            <param name="initValue">An initial value to set to each element.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new one-dimensional array with its values initialized to initValue.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="TA">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new multi-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32[],System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="TA">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="lowerBounds">The lower bounds to use for each dimension.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new multi-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32[],System.Object[],System.Boolean,System.Int32)">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="TA">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="constructorParams">The list of values to be sent to 
            the constructor of the item type of the array.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new multi-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32[],System.Int32[],System.Object[],System.Boolean,System.Int32)">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="TA">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="lowerBounds">The lower bounds to use for each dimension.</param>
            <param name="constructorParams">The list of values to be sent to 
            the constructor of the item type of the array.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new multi-dimensional array with its values initialized to a default value.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32[],System.Object,System.Boolean,System.Int32)">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="TA">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="initValue">The init value to use for each element in the array.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new multi-dimensional array with its values initialized with initValue.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitializeArray``1(System.Int32[],System.Int32[],System.Object,System.Boolean,System.Int32)">
            <summary>
            Initializes a multi-dimensional array.
            </summary>
            <typeparam name="TA">The type of the array including the dimensions in the form 'string[,,]'.</typeparam>
            <param name="lengths">The length of each dimension.</param>
            <param name="lowerBounds">The lower bounds to use for each dimension.</param>
            <param name="initValue">The init value to use for each element in the array.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new multi-dimensional array with its values initialized with initValue.</returns>
        </member>
        <member name="M:System.ArraysHelper.InternalInitializeArray(System.Int32[],System.Int32[],System.Type,System.Object,System.Boolean,System.Int32)">
            <summary>
            Internal method to initialize a multi-dimensional array.
            </summary>
            <param name="lengths">The length of each dimension.</param>
            <param name="lowerBounds">The lower bounds to use for each dimension.</param>
            <param name="itemType">The type to create the array.</param>
            <param name="value">The init value to use for each element in the array.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>A new multi-dimensional array with its values initialized with initValue.</returns>
        </member>
        <member name="M:System.ArraysHelper.RedimPreserve``1(``0,System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Executes a RedimPreserve over an array.
            </summary>
            <typeparam name="TA">The type of the array including the dimensions, for instance 'string[,,,]'.</typeparam>
            <param name="arraySource">The source array.</param>
            <param name="lengths">The length of the new dimensions.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>The new array with the elements of the old one.</returns>
        </member>
        <member name="M:System.ArraysHelper.RedimPreserve``1(``0,System.Int32[],System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Executes a RedimPreserve over an array.
            </summary>
            <typeparam name="TA">The type of the array including the dimensions, for instance 'string[,,,]'.</typeparam>
            <param name="arraySource">The source array.</param>
            <param name="lengths">The length of the new dimensions.</param>
            <param name="lowerBounds">The lower bound of the new dimensions.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>The new array with the elements of the old one.</returns>
        </member>
        <member name="M:System.ArraysHelper.FillsOneDimensionArray(System.Array,System.Array,System.ArraysHelper.InitialValueProvider,System.Boolean,System.Int32)">
            <summary>
            Fills the one-dimension targetArray with either matching cell values from 
            sourceArray or with a initial value.
            </summary>
            <param name="sourceArray">The array object containing the values to copy.</param>
            <param name="targetArray">The new array where to copy the values.</param>
            <param name="valueProvider">a <c>InitialValueProvider</c> object used to get 
            the default values for the new cells.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
        </member>
        <member name="M:System.ArraysHelper.FillsMultiDimensionalArray(System.Array,System.Array,System.ArraysHelper.InitialValueProvider,System.Boolean,System.Int32)">
            <summary>
            Fills the n-dimension targetArray with either matching cell values from 
            sourceArray or with a initial value.
            </summary>
            <param name="sourceArray">The array object containing the values to copy.</param>
            <param name="targetArray">The new array where to copy the values.</param>
            <param name="valueProvider">a <c>InitialValueProvider</c> object used to get
            the default values for the new cells.</param>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
        </member>
        <member name="M:System.ArraysHelper.DeepConvertAll``2(System.Object,System.Converter{``0,``1})">
            <summary>
            Maps a multidimensional array to an array of with the same structure, converting the internal data, even to expressions with different inner types.
            </summary>
            <typeparam name="TInput">The type of the original array elements.</typeparam>
            <typeparam name="TOutput">The type of the target array elements.</typeparam>
            <param array="originalStruct">The source array to convert.</param>
            <param converter="converter">The convertion function to change each of the elements.</param>
            <returns>A new array, resulting from mapping all the elements of the original array with the 'convert' function.</returns>
        </member>
        <member name="M:System.ArraysHelper.CalculateIndexes(System.Int32[]@,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Calculate the indexes of the next element to copy.
            </summary>
            <param name="indexes">The list of the indexes in the different dimensions for 
            the element to copy.</param>
            <param name="pos">The current position within the list of indexes.</param>
            <param name="lBounds">The list of lower bounds to use as limit.</param>
            <param name="uBounds">The list of upper bounds to use as limit.</param>
            <returns>The current position or -1 if the operation failed which means 
            there is no next element to copy.</returns>
        </member>
        <member name="M:System.ArraysHelper.RunRedimPreserveVerifications(System.Object,System.Type,System.Int32[],System.Int32[])">
            <summary>
            Run some basic verifications on the parameters sent to RedimPreserve function.
            </summary>
            <param name="arrayPrototype">The source array to verify.</param>
            <param name="arrayType">The type of the source array.</param>
            <param name="lengths">The length of the dimensions.</param>
            <param name="lowerBounds">The lower bound of each dimension.</param>
        </member>
        <member name="M:System.ArraysHelper.GetFirstDimensionsSize(System.Array)">
            <summary>
            Gets the size for the first dimension for an array.
            </summary>
            <param name="array">The array to process.</param>
            <returns>The size of the first dimension of the array.</returns>
        </member>
        <member name="M:System.ArraysHelper.GetLastDimensionSize(System.Array)">
            <summary>
            Gets the size for the last dimension for an array.
            </summary>
            <param name="array">The array to process.</param>
            <returns>The size of the last dimension of the array.</returns>
        </member>
        <member name="T:System.ArraysHelper.InitialValueProvider">
            <summary>
            The InitialValueProvider provides an initial value from several methods.
            Used for initialization of element types of arrays.
            </summary>
        </member>
        <member name="T:System.ArraysHelper.InitialValueProvider.InitialValueMethod">
            <summary>
            The Enumeration of the different kind of methods of initialization.
            </summary>
        </member>
        <member name="F:System.ArraysHelper.InitialValueProvider._elementType">
            <summary>
            The Type of array's elements.
            </summary>
        </member>
        <member name="F:System.ArraysHelper.InitialValueProvider._constructorParams">
            <summary>
            The list of values to be sent to the constructor used in the method CreateInstanceValueType.
            </summary>
        </member>
        <member name="F:System.ArraysHelper.InitialValueProvider._initialized">
            <summary>
            Indicates if provider was already initialized.
            </summary>
        </member>
        <member name="F:System.ArraysHelper.InitialValueProvider._initializeMethod">
            <summary>
            The InitializeMethod for the current provider.
            </summary>
        </member>
        <member name="F:System.ArraysHelper.InitialValueProvider._constructor">
            <summary>
            The Constructor method if constructor is gotten from elementType.
            </summary>
        </member>
        <member name="F:System.ArraysHelper.InitialValueProvider._method">
            <summary>
            Some Method used for initialization of the elementType, like "CreateInstance".
            </summary>
        </member>
        <member name="M:System.ArraysHelper.InitialValueProvider.#ctor(System.Type,System.Object[])">
            <summary>
            Constructor for IniatialValueProvider.
            </summary>
            <param name="elementType">The type of the array's elements.</param>
            <param name="constructorParams">The list of values to be sent to the constructor of 
            the item type of the array.</param>
        </member>
        <member name="M:System.ArraysHelper.InitialValueProvider.GetInitialValue(System.Boolean,System.Int32)">
            <summary>
            Gets the value of initialization according to the InitialValueMethod of this provider.
            </summary>
            <param name="bFixedLengthString">Optional bolean flag that indicates if the current array type is fixed length string (original vb6 code) - 
            its default value is false, because it will be generated in upgraded code when current array type used to be a fixed length string.</param>
            <param name="iFixedLengthStringSize">Optional integer value that indicates what is the fixed length string size, used in conjunction with previous (bFixedLengthString) parameter.</param>
            <returns>The value of initialization.</returns>
        </member>
        <member name="M:System.ArraysHelper.InitialValueProvider.Initialize">
            <summary>
            Initialize this provider to be able to gets the intialization value.
            </summary>
        </member>
        <member name="M:System.ArraysHelper.DeepCopy(System.Object)">
            <summary>
            Makes a deep copy of an array.
            </summary>
            <param name="objectToCopy">Array to copy.</param>
            <returns>A deep copy of the array.</returns>
        </member>
        <member name="T:System.ConvertExtend">
            <summary>
            Static class pour convertir différent valeur vers d'autre format
            </summary>
        </member>
        <member name="M:System.ConvertExtend.HexaFromInt(System.Int32)">
            <summary>
            Get the Hexa value of a <see cref="T:System.Int32"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.HexaFromInt(System.Int32,System.Int16)">
            <summary>
            Get the Hexa value of a <see cref="T:System.Int32"/>
            </summary>
            <param name="i"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.IntFromHexa(System.String)">
            <summary>
            Get the <see cref="T:System.Int32"/> of a Hexa value
            </summary>
            <param name="hexa"></param>
            <returns></returns>   
        </member>
        <member name="M:System.ConvertExtend.CharFromInt(System.Int32)">
            <summary>
            Get the character of a Code Point
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.IntFromChar(System.String)">
            <summary>
            Get the Code Point of a character
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.IntFromChar(System.Char)">
            <summary>
            Get the Code Point of a character
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.CharFromHexa(System.String)">
            <summary>
            Get the character of a Hexa value
            </summary>
            <param name="hexa"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.HexaFromChar(System.String)">
            <summary>
            Get the Hexa value of a character
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.HexaFromChar(System.Char)">
            <summary>
            Get the Hexa value of a character
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.HexaFromString(System.String)">
            <summary>
            Get the Hexa values of the content of a <see cref="T:System.String"/> 
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.HexaFromChar(System.Char[])">
            <summary>
            Get the Hexa values  of a <see cref="T:System.Char"/>[]
            </summary>
            <param name="tblChar"></param>
            <returns></returns>
        </member>
        <member name="F:System.ConvertExtend.BitCount.Byte">
            <summary>
            8bit
            </summary>
        </member>
        <member name="F:System.ConvertExtend.BitCount.Short">
            <summary>
            16bit
            </summary>
        </member>
        <member name="F:System.ConvertExtend.BitCount.Int">
            <summary>
            32bit
            </summary>
        </member>
        <member name="F:System.ConvertExtend.BitCount.Long">
            <summary>
            64bit
            </summary>
        </member>
        <member name="M:System.ConvertExtend.ToBoolArray(System.Byte)">
            <summary>
            Converion d'un <see cref="T:System.Byte"/> dans une table de bits (<see cref="T:System.Boolean"/>)
            </summary>
            <param name="b"><see cref="T:System.Byte"/> a convertir</param>
            <returns>Tableau de 8 <see cref="T:System.Boolean"></see></returns>
        </member>
        <member name="M:System.ConvertExtend.ToByte(System.Boolean[])">
            <summary>
            Converion d'une table de <see cref="T:System.Boolean"/> dans une valeur <see cref="T:System.Byte"/>
            </summary>
            <param name="inputBoolArray">byte a convertir</param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.ToBoolArray(System.Byte[])">
            <summary>
            Converion d'une table de <see cref="T:System.Byte"/> dans une table de bits (<see cref="T:System.Boolean"/>)
            </summary>
            <param name="byteArray"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.ToByteArray(System.Boolean[])">
            <summary>
            Converion d'une table de <see cref="T:System.Boolean"/> dans une table de <see cref="T:System.Byte"/>
            </summary>
            <param name="inputBoolArray"></param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.ToBoolArray(System.UInt16)">
            <summary>
            Converion d'un <see cref="T:System.UInt16"/> dans une table de bits (<see cref="T:System.Boolean"/>[])
            </summary>
            <param name="s"><see cref="T:System.UInt16"/> a convertir</param>
            <returns>Tableau de 16 <see cref="T:System.Boolean"></see></returns>
        </member>
        <member name="M:System.ConvertExtend.ToBoolArray(System.UInt32)">
            <summary>
            Converion d'un <see cref="T:System.UInt32"/> dans une table de bits (<see cref="T:System.Boolean"/>[])
            </summary>
            <param name="i"><see cref="T:System.UInt32"/> a convertir</param>
            <returns>Tableau de 16 <see cref="T:System.Boolean"></see></returns>
        </member>
        <member name="M:System.ConvertExtend.ToBoolArray(System.UInt64)">
            <summary>
            Converion d'un <see cref="T:System.UInt64"/> dans une table de bits (<see cref="T:System.Boolean"/>[])
            </summary>
            <param name="l"><see cref="T:System.UInt64"/> a convertir</param>
            <returns>Tableau de 16 <see cref="T:System.Boolean"></see></returns>
        </member>
        <member name="M:System.ConvertExtend.ToUInt16(System.Boolean[])">
            <summary>
            Converion d'une table de <see cref="T:System.Boolean"/> dans une valeur <see cref="T:System.UInt16"/>
            </summary>
            <param name="inputBoolArray">byte a convertir</param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.ToUInt32(System.Boolean[])">
            <summary>
            Converion d'une table de <see cref="T:System.Boolean"/> dans une valeur <see cref="T:System.UInt32"/>
            </summary>
            <param name="inputBoolArray">byte a convertir</param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.ToUInt64(System.Boolean[])">
            <summary>
            Converion d'une table de <see cref="T:System.Boolean"/> dans une valeur <see cref="T:System.UInt64"/>
            </summary>
            <param name="inputBoolArray">byte a convertir</param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.ToBoolArray(System.Int16)">
            <summary>
            Converion d'un <see cref="T:System.Int16"/> dans une table de bits (<see cref="T:System.Boolean"/>)
            </summary>
            <param name="s"><see cref="T:System.Int16"/> a convertir</param>
            <returns>Tableau de 16 <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.ConvertExtend.ToBoolArray(System.Int32)">
            <summary>
            Converion d'un <see cref="T:System.Int32"/> dans une table de bits (<see cref="T:System.Boolean"/>)
            </summary>
            <param name="i"><see cref="T:System.Int32"/> a convertir</param>
            <returns>Tableau de 16 <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.ConvertExtend.ToBoolArray(System.Int64)">
            <summary>
            Converion d'un <see cref="T:System.Int64"/> dans une table de bits (<see cref="T:System.Boolean"/>)
            </summary>
            <param name="l"><see cref="T:System.Int64"/> a convertir</param>
            <returns>Tableau de 16 <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:System.ConvertExtend.ToInt16(System.Boolean[])">
            <summary>
            Converion d'une table de <see cref="T:System.Boolean"/> dans une valeur <see cref="T:System.Int16"/>
            </summary>
            <param name="inputBoolArray">byte a convertir</param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.ToInt32(System.Boolean[])">
            <summary>
            Converion d'une table de <see cref="T:System.Boolean"/> dans une valeur <see cref="T:System.Int32"/>
            </summary>
            <param name="inputBoolArray">byte a convertir</param>
            <returns></returns>
        </member>
        <member name="M:System.ConvertExtend.ToInt64(System.Boolean[])">
            <summary>
            Converion d'une table de <see cref="T:System.Boolean"/> dans une valeur <see cref="T:System.Int64"/>
            </summary>
            <param name="inputBoolArray">byte a convertir</param>
            <returns></returns>
        </member>
        <member name="T:System.Data.DataTableExtension">
            <summary>
            Static clas to extend <see cref="T:System.Data.DataTable"/> 
            </summary>
        </member>
        <member name="M:System.Data.DataTableExtension.GetColumnsName(System.Data.DataTable)">
            <summary>
            Get the columns names
            </summary>
            <param name="dataTable"></param>
            <returns></returns>
        </member>
        <member name="M:System.Data.DataTableExtension.GetNames(System.Data.DataColumnCollection)">
            <summary>
            Get the columns names
            </summary>
            <param name="dataColumnCollection"></param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.EnumerableExtension">
            <summary>
            Class to extend System.Linq methods
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtension.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Concatenate a jagged array whit a concatenate of these entrys
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtension.Concat``1(``0[],``0[])">
            <summary>
            Concatenate two array
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtension.Concat``1(``0[],``0[][])">
            <summary>
            Concatenate a jagged array whit a concatenate of these entrys
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtension.SubArray``1(``0[],System.Int64)">
            <summary>
            Get a sub array
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtension.SubArray``1(``0[],System.Int64,System.Int64)">
            <summary>
            Get a sub array
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtension.Distinct``1(``0[])">
            <summary>
            Returns separate elements of a sequence and uses the default equality comparator to compare values.
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtension.Distinct``1(``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns separate elements of a sequence and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtension.Reverse``1(``0[])">
            <summary>
            Reverses the order of the elements in a sequence
            </summary>
        </member>
        <member name="M:System.Linq.EnumerableExtension.OfType``1(System.Array)">
            <summary>
            Obtains a filter array to the elements of a <see cref="T:System.Collections.IEnumerable"/> according to the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableExtension.SetAllValue``1(``0[],``0)">
            <summary>
            Set all entry of a array to the specified value.
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableExtension.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Test if the enumeration is empty
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableExtension.IsSingle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Test if the enumeration contains a single entry
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableExtension.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an <see cref="T:System.Action"/> for each element of an instance
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableExtension.GetDuplicate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the duplicate entry in a enumeration
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:System.Linq.EnumerableExtension.GetDuplicateCounted``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the duplicate entry in a enumeration with the count
            </summary>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="T:System.EnumStringValueAttribute">
            <summary>
            An attribute containing an arbitrary string value.
            </summary>
        </member>
        <member name="P:System.EnumStringValueAttribute.Value">
            <summary>
            Arbitrary string value.
            </summary>
        </member>
        <member name="M:System.EnumStringValueAttribute.#ctor(System.String)">
            <summary>
            Set a arbitrary string value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:System.EnumStringValueAttribute.GetFrom(System.Object)">
            <summary>
            Get the string value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:System.Hexa">
            <summary>
            Hexadecimal variable 
            </summary>
        </member>
        <member name="P:System.Hexa.EqualityComparer">
            <summary></summary>
        </member>
        <member name="P:System.Hexa.Comparator">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.GetHashCode">
            <summary></summary>
        </member>
        <member name="P:System.Hexa.AbsolutValue">
            <summary>
            The <see cref="T:System.UInt64"/> absolute value of variable
            </summary>
        </member>
        <member name="P:System.Hexa.StringFormatValue">
            <summary>
            The <see cref="T:System.String"/> format value of variable
            </summary>
        </member>
        <member name="P:System.Hexa.MinStringLenght">
            <summary>
            The minimal lenght of the <see cref="T:System.String"/> format for this variable
            </summary>
        </member>
        <member name="P:System.Hexa.MinValue">
            <summary>
            Minimal value = 0
            </summary>
        </member>
        <member name="P:System.Hexa.ByteValue">
            <summary>
            <see cref="T:System.Byte"/> value = FF (255)
            </summary>
        </member>
        <member name="P:System.Hexa.UShortValue">
            <summary>
            <see cref="T:System.UInt16"/> value = FFFF (65535)
            </summary>
        </member>
        <member name="P:System.Hexa.UIntValue">
            <summary>
            <see cref="T:System.UInt32"/> value = FFFFFFFF (4294967295)
            </summary>
        </member>
        <member name="P:System.Hexa.MaxValue">
            <summary>
            Maximal value = FFFFFFFFFFFFFFFF (18446744073709551615)
            </summary>
        </member>
        <member name="M:System.Hexa.#ctor(System.String)">
            <summary>
            Create new hexadecimal variable
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:System.Hexa.#ctor(System.String,System.Int32)">
            <summary>
            Create new hexadecimal variable
            </summary>
        </member>
        <member name="M:System.Hexa.#ctor(System.Int64)">
            <summary>
            Create new hexadecimal variable
            </summary>
        </member>
        <member name="M:System.Hexa.#ctor(System.Int64,System.Int32)">
            <summary>
            Create new hexadecimal variable
            </summary>
        </member>
        <member name="M:System.Hexa.#ctor(System.UInt64)">
            <summary>
            Create new hexadecimal variable
            </summary>
        </member>
        <member name="M:System.Hexa.#ctor(System.UInt64,System.Int32)">
            <summary>
            Create new hexadecimal variable
            </summary>
        </member>
        <member name="F:System.Hexa.defaultNumberStyles">
            <summary></summary>
        </member>
        <member name="F:System.Hexa.defaultFormatProvider">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.ToString(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.ToString(System.Int32)">
            <summary>
            Get the <see cref="T:System.String"/> format of this <see cref="T:System.Hexa"/> with a specified minimal lenght
            </summary>
            <param name="minStringLenght">Minimal lenght of the generate <see cref="T:System.String"/></param>
            <returns></returns>
        </member>
        <member name="M:System.Hexa.ToString(System.Int32,System.IFormatProvider)">
            <summary>
            Get the <see cref="T:System.String"/> format of this <see cref="T:System.Hexa"/> with a specified minimal lenght
            </summary>
            <param name="minStringLenght">Minimal lenght of the generate <see cref="T:System.String"/></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:System.Hexa.ToString(System.String)">
             <summary>
            See <see cref="M:System.UInt64.ToString(System.String)"/> for valide formats
             </summary>
             <param name="format">See <see cref="M:System.UInt64.ToString(System.String)"/> for valide formats</param>
             <returns></returns>
        </member>
        <member name="M:System.Hexa.ToString(System.String,System.IFormatProvider)">
             <summary>
            See <see cref="M:System.UInt64.ToString(System.String)"/> for valide formats
             </summary>
             <param name="format">See <see cref="M:System.UInt64.ToString(System.String)"/> for valide formats</param>
             <param name="provider"></param>
             <returns></returns>
        </member>
        <member name="M:System.Hexa.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.Parse(System.String,System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.Parse(System.String,System.Globalization.NumberStyles)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.TryParse(System.String,System.Hexa@)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.TryParse(System.String,System.Globalization.NumberStyles,System.Hexa@)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Hexa@)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.Compare(System.Hexa,System.Hexa)">
            <summary>
            Compare two instance of <see cref="T:System.Hexa"/>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:System.Hexa.Compare(System.Object,System.Object)">
            <summary>
            Compare two instance of <see cref="T:System.Object"/> if they are valides <see cref="T:System.Hexa"/>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:System.Hexa.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.CompareTo(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.CompareTo(System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.Equals(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.Equals(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.Equals(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.Equals(System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Implicit(System.Hexa)~System.Byte">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Implicit(System.Hexa)~System.UInt16">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Implicit(System.Hexa)~System.UInt32">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Implicit(System.Hexa)~System.UInt64">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Explicit(System.Hexa)~System.Int16">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Explicit(System.Hexa)~System.Int32">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Explicit(System.Hexa)~System.Int64">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Explicit(System.Hexa)~System.Single">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Explicit(System.Hexa)~System.Double">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Explicit(System.Hexa)~System.Decimal">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Equality(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Inequality(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Equality(System.Hexa,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Inequality(System.Hexa,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Equality(System.String,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Inequality(System.String,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_LessThan(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_GreaterThan(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_LessThan(System.Hexa,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_GreaterThan(System.Hexa,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_LessThan(System.String,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_GreaterThan(System.String,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_LessThanOrEqual(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_GreaterThanOrEqual(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_LessThanOrEqual(System.Hexa,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_GreaterThanOrEqual(System.Hexa,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_LessThanOrEqual(System.String,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_GreaterThanOrEqual(System.String,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Increment(System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Addition(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Addition(System.Hexa,System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Addition(System.Hexa,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Decrement(System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Subtraction(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Subtraction(System.Hexa,System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Subtraction(System.Hexa,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Multiply(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Multiply(System.Hexa,System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Multiply(System.Hexa,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Modulus(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Modulus(System.Hexa,System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Modulus(System.Hexa,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Division(System.Hexa,System.Hexa)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Division(System.Hexa,System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.op_Division(System.Hexa,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary></summary>
        </member>
        <member name="M:System.Hexa.GetTypeCode">
            <summary></summary>
        </member>
        <member name="T:System.IComparerEquatable`1">
            <summary>
            Shortened <see langword="interface"/> for <see cref="T:System.IEquatable`1"/> like and <see cref="T:System.Collections.Generic.IComparer`1"/> like
            </summary>
        </member>
        <member name="M:System.IComparerEquatable`1.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:System.Settings">
            <summary>
            Static class for various setings
            </summary>
        </member>
        <member name="P:System.Settings.DSC">
            <summary>
            Path.DirectorySeparatorChar
            </summary>
        </member>
        <member name="P:System.Settings.WorkFolderName">
            <summary>
            Name used for the temporary work folder; see <see cref="M:System.Settings.CreateTempWorkFolder"/>
            </summary>
            <remarks>By default, is the file name of the application</remarks>
        </member>
        <member name="P:System.Settings.TempFolder">
            <summary>
            Temporary folder specific to the application
            </summary>
        </member>
        <member name="M:System.Settings.CreateTempWorkFolder">
            <summary>
            Create a new subfolder (aka work folder) in the temporary folder
            </summary>
            <returns>Path of the new folder</returns>
            <remarks><see cref="P:System.Settings.TempFolder"/>/<see cref="P:System.Settings.WorkFolderName"/>_HH-mm-ss (xxx)</remarks>
        </member>
        <member name="P:System.Settings.ApplicationFolder">
            <summary>
            Application folder
            </summary>
        </member>
        <member name="P:System.Settings.ApplicationData_Default">
            <summary>
            Default ApplicationData (%AppData%) folder
            </summary>
        </member>
        <member name="P:System.Settings.ApplicationData">
            <summary>
            ApplicationData (%AppData%) folder of the application
            </summary>
        </member>
        <member name="P:System.Settings.LocalApplicationData_Default">
            <summary>
            Default ApplicationData (%AppData%) folder
            </summary>
        </member>
        <member name="P:System.Settings.LocalApplicationData">
            <summary>
            LocalApplicationData folder of the application
            </summary>
        </member>
        <member name="P:System.Settings.ProgramData_Default">
            <summary>
            ProgramData folder
            </summary>
        </member>
        <member name="P:System.Settings.ProgramData">
            <summary>
            ProgramData folder of the application
            </summary>
        </member>
        <member name="P:System.Settings.Version">
            <summary>
            Version info
            </summary>
        </member>
        <member name="P:System.Settings.Args">
            <summary>
            Command line arguments of the application
            </summary>
        </member>
        <member name="T:System.StringChangedEventArgs">
            <summary>
            Event class for change or editing of a <see cref="T:System.String"/> proprety.
            </summary>
        </member>
        <member name="P:System.StringChangedEventArgs.OldString">
            <summary>
            Previous string before the event.
            </summary>
        </member>
        <member name="P:System.StringChangedEventArgs.NewString">
            <summary>
            New string calling the event.
            </summary>
        </member>
        <member name="P:System.StringChangedEventArgs.ApplyString">
            <summary>
            New string to apply at the event.
            </summary>
        </member>
        <member name="M:System.StringChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Create a <see cref="T:System.StringChangedEventArgs"/> for change or editing of a <see cref="T:System.String"/> proprety.
            </summary>
            <param name="oldString"></param>
            <param name="newString"></param>
        </member>
        <member name="M:System.StringChangedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a <see cref="T:System.StringChangedEventArgs"/> for change or editing of a <see cref="T:System.String"/> proprety.
            </summary>
            <param name="oldString"></param>
            <param name="newString"></param>
            <param name="applyString"></param>
        </member>
        <member name="T:System.VersionClass">
            <summary></summary>
        </member>
        <member name="P:System.VersionClass.Major">
            <summary></summary>
        </member>
        <member name="P:System.VersionClass.Minor">
            <summary></summary>
        </member>
        <member name="P:System.VersionClass.Patch">
            <summary></summary>
        </member>
        <member name="P:System.VersionClass.Build">
            <summary></summary>
        </member>
        <member name="M:System.VersionClass.ToString">
            <summary></summary>
        </member>
        <member name="M:System.VersionClass.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.VersionClass.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.VersionClass.#ctor(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.VersionClass.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.VersionClass.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="T:System.Text.ByteCharacter">
            <summary>
            Space character separator
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b0">
            <summary>
            <see cref="T:System.Byte"/> 0
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b1">
            <summary>
            <see cref="T:System.Byte"/> 1
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b2">
            <summary>
            <see cref="T:System.Byte"/> 2
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b3">
            <summary>
            <see cref="T:System.Byte"/> 3
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b4">
            <summary>
            <see cref="T:System.Byte"/> 4
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b5">
            <summary>
            <see cref="T:System.Byte"/> 5
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b6">
            <summary>
            <see cref="T:System.Byte"/> 6
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b7">
            <summary>
            <see cref="T:System.Byte"/> 7
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b8">
            <summary>
            <see cref="T:System.Byte"/> 8
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b9">
            <summary>
            <see cref="T:System.Byte"/> 9
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b10">
            <summary>
            <see cref="T:System.Byte"/> 10
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b11">
            <summary>
            <see cref="T:System.Byte"/> 11
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b12">
            <summary>
            <see cref="T:System.Byte"/> 12
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b13">
            <summary>
            <see cref="T:System.Byte"/> 13
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b14">
            <summary>
            <see cref="T:System.Byte"/> 14
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b15">
            <summary>
            <see cref="T:System.Byte"/> 15
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b16">
            <summary>
            <see cref="T:System.Byte"/> 16
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b17">
            <summary>
            <see cref="T:System.Byte"/> 17
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b18">
            <summary>
            <see cref="T:System.Byte"/> 18
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b19">
            <summary>
            <see cref="T:System.Byte"/> 19
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b20">
            <summary>
            <see cref="T:System.Byte"/> 20
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b21">
            <summary>
            <see cref="T:System.Byte"/> 21
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b22">
            <summary>
            <see cref="T:System.Byte"/> 22
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b23">
            <summary>
            <see cref="T:System.Byte"/> 23
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b24">
            <summary>
            <see cref="T:System.Byte"/> 24
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b25">
            <summary>
            <see cref="T:System.Byte"/> 25
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b26">
            <summary>
            <see cref="T:System.Byte"/> 26
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b27">
            <summary>
            <see cref="T:System.Byte"/> 27
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b28">
            <summary>
            <see cref="T:System.Byte"/> 28
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b29">
            <summary>
            <see cref="T:System.Byte"/> 29
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b30">
            <summary>
            <see cref="T:System.Byte"/> 30
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b31">
            <summary>
            <see cref="T:System.Byte"/> 31
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b32">
            <summary>
            <see cref="T:System.Byte"/> 32
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b33">
            <summary>
            <see cref="T:System.Byte"/> 33
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b34">
            <summary>
            <see cref="T:System.Byte"/> 34
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b35">
            <summary>
            <see cref="T:System.Byte"/> 35
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b36">
            <summary>
            <see cref="T:System.Byte"/> 36
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b37">
            <summary>
            <see cref="T:System.Byte"/> 37
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b38">
            <summary>
            <see cref="T:System.Byte"/> 38
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b39">
            <summary>
            <see cref="T:System.Byte"/> 39
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b40">
            <summary>
            <see cref="T:System.Byte"/> 40
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b41">
            <summary>
            <see cref="T:System.Byte"/> 41
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b42">
            <summary>
            <see cref="T:System.Byte"/> 42
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b43">
            <summary>
            <see cref="T:System.Byte"/> 43
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b44">
            <summary>
            <see cref="T:System.Byte"/> 44
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b45">
            <summary>
            <see cref="T:System.Byte"/> 45
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b46">
            <summary>
            <see cref="T:System.Byte"/> 46
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b47">
            <summary>
            <see cref="T:System.Byte"/> 47
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b48">
            <summary>
            <see cref="T:System.Byte"/> 48
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b49">
            <summary>
            <see cref="T:System.Byte"/> 49
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b50">
            <summary>
            <see cref="T:System.Byte"/> 50
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b51">
            <summary>
            <see cref="T:System.Byte"/> 51
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b52">
            <summary>
            <see cref="T:System.Byte"/> 52
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b53">
            <summary>
            <see cref="T:System.Byte"/> 53
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b54">
            <summary>
            <see cref="T:System.Byte"/> 54
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b55">
            <summary>
            <see cref="T:System.Byte"/> 55
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b56">
            <summary>
            <see cref="T:System.Byte"/> 56
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b57">
            <summary>
            <see cref="T:System.Byte"/> 57
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b58">
            <summary>
            <see cref="T:System.Byte"/> 58
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b59">
            <summary>
            <see cref="T:System.Byte"/> 59
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b60">
            <summary>
            <see cref="T:System.Byte"/> 60
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b61">
            <summary>
            <see cref="T:System.Byte"/> 61
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b62">
            <summary>
            <see cref="T:System.Byte"/> 62
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b63">
            <summary>
            <see cref="T:System.Byte"/> 63
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b64">
            <summary>
            <see cref="T:System.Byte"/> 64
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b65">
            <summary>
            <see cref="T:System.Byte"/> 65
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b66">
            <summary>
            <see cref="T:System.Byte"/> 66
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b67">
            <summary>
            <see cref="T:System.Byte"/> 67
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b68">
            <summary>
            <see cref="T:System.Byte"/> 68
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b69">
            <summary>
            <see cref="T:System.Byte"/> 69
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b70">
            <summary>
            <see cref="T:System.Byte"/> 70
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b71">
            <summary>
            <see cref="T:System.Byte"/> 71
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b72">
            <summary>
            <see cref="T:System.Byte"/> 72
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b73">
            <summary>
            <see cref="T:System.Byte"/> 73
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b74">
            <summary>
            <see cref="T:System.Byte"/> 74
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b75">
            <summary>
            <see cref="T:System.Byte"/> 75
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b76">
            <summary>
            <see cref="T:System.Byte"/> 76
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b77">
            <summary>
            <see cref="T:System.Byte"/> 77
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b78">
            <summary>
            <see cref="T:System.Byte"/> 78
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b79">
            <summary>
            <see cref="T:System.Byte"/> 79
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b80">
            <summary>
            <see cref="T:System.Byte"/> 80
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b81">
            <summary>
            <see cref="T:System.Byte"/> 81
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b82">
            <summary>
            <see cref="T:System.Byte"/> 82
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b83">
            <summary>
            <see cref="T:System.Byte"/> 83
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b84">
            <summary>
            <see cref="T:System.Byte"/> 84
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b85">
            <summary>
            <see cref="T:System.Byte"/> 85
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b86">
            <summary>
            <see cref="T:System.Byte"/> 86
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b87">
            <summary>
            <see cref="T:System.Byte"/> 87
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b88">
            <summary>
            <see cref="T:System.Byte"/> 88
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b89">
            <summary>
            <see cref="T:System.Byte"/> 89
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b90">
            <summary>
            <see cref="T:System.Byte"/> 90
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b91">
            <summary>
            <see cref="T:System.Byte"/> 91
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b92">
            <summary>
            <see cref="T:System.Byte"/> 92
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b93">
            <summary>
            <see cref="T:System.Byte"/> 93
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b94">
            <summary>
            <see cref="T:System.Byte"/> 94
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b95">
            <summary>
            <see cref="T:System.Byte"/> 95
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b96">
            <summary>
            <see cref="T:System.Byte"/> 96
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b97">
            <summary>
            <see cref="T:System.Byte"/> 97
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b98">
            <summary>
            <see cref="T:System.Byte"/> 98
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b99">
            <summary>
            <see cref="T:System.Byte"/> 99
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b100">
            <summary>
            <see cref="T:System.Byte"/> 100
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b101">
            <summary>
            <see cref="T:System.Byte"/> 101
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b102">
            <summary>
            <see cref="T:System.Byte"/> 102
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b103">
            <summary>
            <see cref="T:System.Byte"/> 103
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b104">
            <summary>
            <see cref="T:System.Byte"/> 104
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b105">
            <summary>
            <see cref="T:System.Byte"/> 105
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b106">
            <summary>
            <see cref="T:System.Byte"/> 106
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b107">
            <summary>
            <see cref="T:System.Byte"/> 107
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b108">
            <summary>
            <see cref="T:System.Byte"/> 108
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b109">
            <summary>
            <see cref="T:System.Byte"/> 109
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b110">
            <summary>
            <see cref="T:System.Byte"/> 110
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b111">
            <summary>
            <see cref="T:System.Byte"/> 111
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b112">
            <summary>
            <see cref="T:System.Byte"/> 112
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b113">
            <summary>
            <see cref="T:System.Byte"/> 113
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b114">
            <summary>
            <see cref="T:System.Byte"/> 114
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b115">
            <summary>
            <see cref="T:System.Byte"/> 115
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b116">
            <summary>
            <see cref="T:System.Byte"/> 116
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b117">
            <summary>
            <see cref="T:System.Byte"/> 117
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b118">
            <summary>
            <see cref="T:System.Byte"/> 118
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b119">
            <summary>
            <see cref="T:System.Byte"/> 119
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b120">
            <summary>
            <see cref="T:System.Byte"/> 120
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b121">
            <summary>
            <see cref="T:System.Byte"/> 121
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b122">
            <summary>
            <see cref="T:System.Byte"/> 122
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b123">
            <summary>
            <see cref="T:System.Byte"/> 123
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b124">
            <summary>
            <see cref="T:System.Byte"/> 124
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b125">
            <summary>
            <see cref="T:System.Byte"/> 125
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b126">
            <summary>
            <see cref="T:System.Byte"/> 126
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b127">
            <summary>
            <see cref="T:System.Byte"/> 127
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b128">
            <summary>
            <see cref="T:System.Byte"/> 128
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b129">
            <summary>
            <see cref="T:System.Byte"/> 129
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b130">
            <summary>
            <see cref="T:System.Byte"/> 130
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b131">
            <summary>
            <see cref="T:System.Byte"/> 131
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b132">
            <summary>
            <see cref="T:System.Byte"/> 132
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b133">
            <summary>
            <see cref="T:System.Byte"/> 133
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b134">
            <summary>
            <see cref="T:System.Byte"/> 134
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b135">
            <summary>
            <see cref="T:System.Byte"/> 135
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b136">
            <summary>
            <see cref="T:System.Byte"/> 136
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b137">
            <summary>
            <see cref="T:System.Byte"/> 137
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b138">
            <summary>
            <see cref="T:System.Byte"/> 138
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b139">
            <summary>
            <see cref="T:System.Byte"/> 139
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b140">
            <summary>
            <see cref="T:System.Byte"/> 140
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b141">
            <summary>
            <see cref="T:System.Byte"/> 141
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b142">
            <summary>
            <see cref="T:System.Byte"/> 142
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b143">
            <summary>
            <see cref="T:System.Byte"/> 143
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b144">
            <summary>
            <see cref="T:System.Byte"/> 144
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b145">
            <summary>
            <see cref="T:System.Byte"/> 145
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b146">
            <summary>
            <see cref="T:System.Byte"/> 146
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b147">
            <summary>
            <see cref="T:System.Byte"/> 147
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b148">
            <summary>
            <see cref="T:System.Byte"/> 148
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b149">
            <summary>
            <see cref="T:System.Byte"/> 149
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b150">
            <summary>
            <see cref="T:System.Byte"/> 150
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b151">
            <summary>
            <see cref="T:System.Byte"/> 151
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b152">
            <summary>
            <see cref="T:System.Byte"/> 152
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b153">
            <summary>
            <see cref="T:System.Byte"/> 153
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b154">
            <summary>
            <see cref="T:System.Byte"/> 154
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b155">
            <summary>
            <see cref="T:System.Byte"/> 155
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b156">
            <summary>
            <see cref="T:System.Byte"/> 156
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b157">
            <summary>
            <see cref="T:System.Byte"/> 157
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b158">
            <summary>
            <see cref="T:System.Byte"/> 158
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b159">
            <summary>
            <see cref="T:System.Byte"/> 159
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b160">
            <summary>
            <see cref="T:System.Byte"/> 160
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b161">
            <summary>
            <see cref="T:System.Byte"/> 161
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b162">
            <summary>
            <see cref="T:System.Byte"/> 162
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b163">
            <summary>
            <see cref="T:System.Byte"/> 163
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b164">
            <summary>
            <see cref="T:System.Byte"/> 164
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b165">
            <summary>
            <see cref="T:System.Byte"/> 165
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b166">
            <summary>
            <see cref="T:System.Byte"/> 166
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b167">
            <summary>
            <see cref="T:System.Byte"/> 167
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b168">
            <summary>
            <see cref="T:System.Byte"/> 168
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b169">
            <summary>
            <see cref="T:System.Byte"/> 169
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b170">
            <summary>
            <see cref="T:System.Byte"/> 170
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b171">
            <summary>
            <see cref="T:System.Byte"/> 171
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b172">
            <summary>
            <see cref="T:System.Byte"/> 172
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b173">
            <summary>
            <see cref="T:System.Byte"/> 173
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b174">
            <summary>
            <see cref="T:System.Byte"/> 174
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b175">
            <summary>
            <see cref="T:System.Byte"/> 175
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b176">
            <summary>
            <see cref="T:System.Byte"/> 176
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b177">
            <summary>
            <see cref="T:System.Byte"/> 177
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b178">
            <summary>
            <see cref="T:System.Byte"/> 178
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b179">
            <summary>
            <see cref="T:System.Byte"/> 179
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b180">
            <summary>
            <see cref="T:System.Byte"/> 180
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b181">
            <summary>
            <see cref="T:System.Byte"/> 181  
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b182">
            <summary>
            <see cref="T:System.Byte"/> 182
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b183">
            <summary>
            <see cref="T:System.Byte"/> 183
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b184">
            <summary>
            <see cref="T:System.Byte"/> 184
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b185">
            <summary>
            <see cref="T:System.Byte"/> 185
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b186">
            <summary>
            <see cref="T:System.Byte"/> 186
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b187">
            <summary>
            <see cref="T:System.Byte"/> 187
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b188">
            <summary>
            <see cref="T:System.Byte"/> 188
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b189">
            <summary>
            <see cref="T:System.Byte"/> 189
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b190">
            <summary>
            <see cref="T:System.Byte"/> 190
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b191">
            <summary>
            <see cref="T:System.Byte"/> 191
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b192">
            <summary>
            <see cref="T:System.Byte"/> 192
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b193">
            <summary>
            <see cref="T:System.Byte"/> 193
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b194">
            <summary>
            <see cref="T:System.Byte"/> 194
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b195">
            <summary>
            <see cref="T:System.Byte"/> 195
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b196">
            <summary>
            <see cref="T:System.Byte"/> 196
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b197">
            <summary>
            <see cref="T:System.Byte"/> 197
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b198">
            <summary>
            <see cref="T:System.Byte"/> 198
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b199">
            <summary>
            <see cref="T:System.Byte"/> 199
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b200">
            <summary>
            <see cref="T:System.Byte"/> 200
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b201">
            <summary>
            <see cref="T:System.Byte"/> 201
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b202">
            <summary>
            <see cref="T:System.Byte"/> 202
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b203">
            <summary>
            <see cref="T:System.Byte"/> 203
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b204">
            <summary>
            <see cref="T:System.Byte"/> 204
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b205">
            <summary>
            <see cref="T:System.Byte"/> 205
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b206">
            <summary>
            <see cref="T:System.Byte"/> 206
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b207">
            <summary>
            <see cref="T:System.Byte"/> 207
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b208">
            <summary>
            <see cref="T:System.Byte"/> 208
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b209">
            <summary>
            <see cref="T:System.Byte"/> 209
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b210">
            <summary>
            <see cref="T:System.Byte"/> 210 
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b211">
            <summary>
            <see cref="T:System.Byte"/> 211
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b212">
            <summary>
            <see cref="T:System.Byte"/> 212
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b213">
            <summary>
            <see cref="T:System.Byte"/> 213
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b214">
            <summary>
            <see cref="T:System.Byte"/> 214
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b215">
            <summary>
            <see cref="T:System.Byte"/> 215
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b216">
            <summary>
            <see cref="T:System.Byte"/> 216
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b217">
            <summary>
            <see cref="T:System.Byte"/> 217
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b218">
            <summary>
            <see cref="T:System.Byte"/> 218
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b219">
            <summary>
            <see cref="T:System.Byte"/> 219
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b220">
            <summary>
            <see cref="T:System.Byte"/> 220
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b221">
            <summary>
            <see cref="T:System.Byte"/> 221
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b222">
            <summary>
            <see cref="T:System.Byte"/> 222
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b223">
            <summary>
            <see cref="T:System.Byte"/> 223
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b224">
            <summary>
            <see cref="T:System.Byte"/> 224
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b225">
            <summary>
            <see cref="T:System.Byte"/> 225
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b226">
            <summary>
            <see cref="T:System.Byte"/> 226
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b227">
            <summary>
            <see cref="T:System.Byte"/> 227
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b228">
            <summary>
            <see cref="T:System.Byte"/> 228
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b229">
            <summary>
            <see cref="T:System.Byte"/> 229
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b230">
            <summary>
            <see cref="T:System.Byte"/> 230
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b231">
            <summary>
            <see cref="T:System.Byte"/> 231
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b232">
            <summary>
            <see cref="T:System.Byte"/> 232
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b233">
            <summary>
            <see cref="T:System.Byte"/> 232
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b234">
            <summary>
            <see cref="T:System.Byte"/> 234
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b235">
            <summary>
            <see cref="T:System.Byte"/> 235
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b236">
            <summary>
            <see cref="T:System.Byte"/> 236
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b237">
            <summary>
            <see cref="T:System.Byte"/> 237
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b238">
            <summary>
            <see cref="T:System.Byte"/> 238
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b239">
            <summary>
            <see cref="T:System.Byte"/> 239
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b240">
            <summary>
            <see cref="T:System.Byte"/> 240
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b241">
            <summary>
            <see cref="T:System.Byte"/> 241
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b242">
            <summary>
            <see cref="T:System.Byte"/> 242
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b243">
            <summary>
            <see cref="T:System.Byte"/> 243
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b244">
            <summary>
            <see cref="T:System.Byte"/> 244
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b245">
            <summary>
            <see cref="T:System.Byte"/> 245
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b246">
            <summary>
            <see cref="T:System.Byte"/> 246
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b247">
            <summary>
            <see cref="T:System.Byte"/> 247
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b248">
            <summary>
            <see cref="T:System.Byte"/> 248
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b249">
            <summary>
            <see cref="T:System.Byte"/> 249
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b250">
            <summary>
            <see cref="T:System.Byte"/> 250
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b251">
            <summary>
            <see cref="T:System.Byte"/> 251
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b252">
            <summary>
            <see cref="T:System.Byte"/> 252
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b253">
            <summary>
            <see cref="T:System.Byte"/> 253
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b254">
            <summary>
            <see cref="T:System.Byte"/> 254
            </summary>
        </member>
        <member name="P:System.Text.ByteCharacter.b255">
            <summary>
            <see cref="T:System.Byte"/> 255
            </summary>
        </member>
        <member name="M:System.Text.ByteCharacter.ByteToChar(System.Byte)">
            <summary>
            Convert <see cref="T:System.Byte"/> to <see cref="T:System.Char"/>
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.ByteCharacter.CharToByte(System.Char)">
            <summary>
            Convert <see cref="T:System.Char"/> to <see cref="T:System.Byte"/>
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.ByteCharacter.ByteToChar(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Convert enumerable <see cref="T:System.Byte"/> to enumerable <see cref="T:System.Char"/>
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.ByteCharacter.CharToByte(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Convert enumerable <see cref="T:System.Char"/> to enumerable <see cref="T:System.Byte"/>
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.ByteCharacter.ByteToChar(System.Byte[])">
            <summary>
            Convert <see cref="T:System.Byte"/> table to <see cref="T:System.Char"/> table
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.ByteCharacter.CharToByte(System.Char[])">
            <summary>
            Convert <see cref="T:System.Char"/> table to <see cref="T:System.Byte"/> table
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:System.Text.ControlCharacter">
            <summary>
            Control Character
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.NUL">
            <summary>
            U+0000 Null \0
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.SOH">
            <summary>
            U+0001 Start of Heading
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.STX">
            <summary>
            U+0002 Start of Text
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.ETX">
            <summary>
            U+0003 End of Text
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.EOT">
            <summary>
            U+0004 End of Transmission
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.ENQ">
            <summary>
            U+0005 Enquiry
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.ACK">
            <summary>
            U+0006 Acknowledge
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.BEL">
            <summary>
            U+0007 Bell \a
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.BS">
            <summary>
            U+0008 Backspace \b
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.HT">
            <summary>
            U+0009 Horizontal Tabulation \t
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.LF">
            <summary>
            U+000A Line Feed \n (aka New Line)
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.VT">
            <summary>
            U+000B Vertical Tabulation \v
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.FF">
            <summary>
            U+000C Form Feed \f
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.CR">
            <summary>
            U+000D Carriage Return \r
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.SO">
            <summary>
            U+000E Shift Out
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.SI">
            <summary>
            U+000F Shift In
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.DLE">
            <summary>
            U+0010 Data Link Escape
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.DC1">
            <summary>
            U+0011 Device Control One
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.DC2">
            <summary>
            U+0012 Device Control Two
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.DC3">
            <summary>
            U+0013 Device Control Three
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.DC4">
            <summary>
            U+0014 Device Control Four
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.NAK">
            <summary>
            U+0015 Negative Acknowledge
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.SYN">
            <summary>
            U+0016 Synchronous Idle
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.ETB">
            <summary>
            U+0017 End of Transmission Block
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.CAN">
            <summary>
            U+0018 Cancel
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.EM">
            <summary>
            U+0019 End of Medium
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.SUB">
            <summary>
            U+001A Substitute
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.ESC">
            <summary>
            U+001B Escape
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.FS">
            <summary>
            U+001C File Separator
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.GS">
            <summary>
            U+001D Group Separator
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.RS">
            <summary>
            U+001E Record Separator
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.US">
            <summary>
            U+001F Unit Separator
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacter.ControlCharacters">
            <summary>
            All Control Characters
            </summary>
        </member>
        <member name="T:System.Text.ControlCharacterSupplement">
            <summary>
            Control Character Supplement
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.XXX">
            <summary>
            U+0080 &lt;Control&gt;
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.XXY">
            <summary>
            U+0081 &lt;Control&gt;
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.BPH">
            <summary>
            U+0082 Break Permitted Here
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.NBH">
            <summary>
            U+0083 No Break Here
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.IND">
            <summary>
            U+0084 &lt;Index&gt;
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.NEL">
            <summary>
            U+0085 Next Line
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.SSA">
            <summary>
            U+0086 Start of Selected Area
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.ESA">
            <summary>
            U+0087 End of Selected Area
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.HTS">
            <summary>
            U+0088 Character Tabulation Set
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.HTJ">
            <summary>
            U+0089 Character Tabulation with Justification
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.VTS">
            <summary>
            U+008A Line Tabulation Set
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.PLD">
            <summary>
            U+008B Partial Line Forward
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.PLU">
            <summary>
            U+008C Partial Line Backward
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.RI">
            <summary>
            U+008D Reverse Line Feed
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.SS2">
            <summary>
            U+008E Single Shift Two
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.SS3">
            <summary>
            U+008F Single Shift Three
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.DCS">
            <summary>
            U+0090 Device Control String
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.PU1">
            <summary>
            U+0091 Private Use One
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.PU2">
            <summary>
            U+0092 Private Use Two
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.STS">
            <summary>
            U+0093 Set Transmit State
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.CCH">
            <summary>
            U+0094 Cancel Character
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.MW">
            <summary>
            U+0095 Message Waiting
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.SPA">
            <summary>
            U+0096 Start of Guarded Area
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.EPA">
            <summary>
            U+0097 End of Guarded Area
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.SOS">
            <summary>
            U+0098 Start of String
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.XXZ">
            <summary>
            U+0099 &lt;Control&gt;
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.SCI">
            <summary>
            U+009A Single Character Introducer
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.CSI">
            <summary>
            U+009B Control Sequence Introducer
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.ST">
            <summary>
            U+009C String Terminator
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.OSC">
            <summary>
            U+009D Operating System Command
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.PM">
            <summary>
            U+009E Privacy Message
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.APC">
            <summary>
            U+009F Application Program Command
            </summary>
        </member>
        <member name="P:System.Text.ControlCharacterSupplement.ControlCharactersSupplements">
            <summary>
            All Supplement Control Characters
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.CompiledRegexList`1">
            <summary>
            Base list for <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/> and <see cref="T:System.Text.RegularExpressions.CompiledRegex"/>
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.#ctor">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexList`1.Count">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexList`1.Item(System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexList`1.Item(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.Contains(`0)">
            <summary>
            Determines whether <see cref="T:System.Text.RegularExpressions.CompiledRegexList`1"/> contains the exact same value.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.Contains(System.String)">
            <summary>
            Determines whether <see cref="T:System.Text.RegularExpressions.CompiledRegexList`1"/> contains a value with the same <see cref="P:System.Text.RegularExpressions.CompiledRegexBase.FullQualifiedName"/>.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.Contains(System.String,System.String)">
            <summary>
            Determines whether <see cref="T:System.Text.RegularExpressions.CompiledRegexList`1"/> contains a value with the same <see cref="P:System.Text.RegularExpressions.CompiledRegexBase.Name"/> and  <see cref="P:System.Text.RegularExpressions.CompiledRegexBase.Namespace"/>.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.Find(System.String)">
            <summary>
            Find the <see cref="T:System.Text.RegularExpressions.CompiledRegexBase"/> with the same <see cref="P:System.Text.RegularExpressions.CompiledRegexBase.FullQualifiedName"/>.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.Find(System.String,System.String)">
            <summary>
            Find the <see cref="T:System.Text.RegularExpressions.CompiledRegexBase"/> with the same <see cref="P:System.Text.RegularExpressions.CompiledRegexBase.Name"/> and  <see cref="P:System.Text.RegularExpressions.CompiledRegexBase.Namespace"/>.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.CopyTo(`0[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.IndexOf(`0)">
            <summary>
            Determines the index of a <see cref="T:System.Text.RegularExpressions.CompiledRegexBase"/> with the exact same value.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.IndexOf(System.String)">
            <summary>
            Determines the index of a <see cref="T:System.Text.RegularExpressions.CompiledRegexBase"/> with the same <see cref="P:System.Text.RegularExpressions.CompiledRegexBase.FullQualifiedName"/>.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.IndexOf(System.String,System.String)">
            <summary>
            Determines the index of a <see cref="T:System.Text.RegularExpressions.CompiledRegexBase"/> with the same <see cref="P:System.Text.RegularExpressions.CompiledRegexBase.Name"/> and  <see cref="P:System.Text.RegularExpressions.CompiledRegexBase.Namespace"/>.
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList`1.GetEnumerator">
            <summary></summary>
        </member>
        <member name="T:System.Text.RegularExpressions.CompiledRegexList">
            <summary>
            Represent a collection of regex to compiled 
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList.Add(System.Text.RegularExpressions.CompiledRegexEntry)">
            <summary>
            Add a element to the <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/>
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList.Remove(System.Text.RegularExpressions.CompiledRegexEntry)">
            <summary>
            Remove the specified element of the <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList.RemoveAt(System.Int32)">
            <summary>
            Remove the element with the specified index number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList.RemoveQualifiedName(System.String)">
            <summary>
            Remove the element with the same FullQualifiedName (IgnoreCase).
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexList.RemoveQualifiedName(System.String,System.String)">
            <summary>
            Remove the element with the same Name and FullNamespace (IgnoreCase).
            </summary>
            <returns></returns>
        </member>
        <member name="T:System.Text.RegularExpressions.CompiledRegex">
            <summary> 
            Represent a collection of compiled regex in a Assembly
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.CompileToRuntime(System.Text.RegularExpressions.CompiledRegexList)">
            <summary>
            Compile a <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/> into a <see cref="T:System.Reflection.RuntimeAssembly"/>
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.CompileToRuntime(System.Text.RegularExpressions.CompiledRegexList,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Compile a <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/> into a <see cref="T:System.Reflection.RuntimeAssembly"/>
            </summary>
            <param name="list"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.CompileToRuntime(System.Text.RegularExpressions.CompiledRegexList,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Compile a <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/> into a <see cref="T:System.Reflection.RuntimeAssembly"/>
            </summary>
            <param name="list"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.CompileToAssembly(System.String,System.Text.RegularExpressions.CompiledRegexList)">
            <summary>
            Compile a <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/> into a Assembly file (.dll)
            </summary>
            <param name="name"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.CompileToAssembly(System.String,System.Text.RegularExpressions.CompiledRegexList,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Compile a <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/> into a Assembly file (.dll)
            </summary>
            <param name="name"></param>
            <param name="list"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.CompileToAssembly(System.String,System.Text.RegularExpressions.CompiledRegexList,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Compile a <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/> into a Assembly file (.dll)
            </summary>
            <param name="name"></param>
            <param name="list"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.CompileToAssembly(System.Reflection.AssemblyName,System.Text.RegularExpressions.CompiledRegexList,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Compile a <see cref="T:System.Text.RegularExpressions.CompiledRegexList"/> into a Assembly file (.dll)
            </summary>
            <param name="assemblyName"></param>
            <param name="list"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.CompileToAssembly(System.String,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.RegexCompilationInfo})">
            <summary>
            Compile a enumeration into a Assembly file (.dll)
            </summary>
            <param name="name"></param>
            <param name="compilationInfos"></param>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.CompileToAssembly(System.Reflection.AssemblyName,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.RegexCompilationInfo})">
            <summary>
            Compile a enumeration into a Assembly file (.dll)
            </summary>
            <param name="assemblyName"></param>
            <param name="compilationInfos"></param>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.GenerateFile(System.String,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.CompiledRegexBase})">
            <summary>
            Generate a C# file corresponding to the collection
            </summary>
            <param name="filePath"></param>
            <param name="enumerable"></param>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.GenerateFile(System.String,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.CompiledRegexBase},System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Generate a C# file corresponding to the collection
            </summary>
            <param name="filePath"></param>
            <param name="enumerable"></param>
            <param name="options"></param>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.GenerateFile(System.String,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.CompiledRegexBase},System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Generate a C# file corresponding to the collection
            </summary>
            <param name="filePath"></param>
            <param name="enumerable"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.GenerateFile(System.String,System.Collections.Generic.IEnumerable{System.Text.RegularExpressions.RegexCompilationInfo})">
            <summary>
            Generate a C# file corresponding to the collection
            </summary>
            <param name="filePath"></param>
            <param name="compilationInfos"></param>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.LoadToAssembly(System.String)">
            <summary>
            Load all compiled regex in the Assembly
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.LoadFromAssembly(System.Reflection.AssemblyName)">
            <summary>
            Load all compiled regex in the Assembly
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.LoadFromAssemblyFile(System.String)">
            <summary>
            Load all compiled regex in a Assembly file (.dll)
            </summary>
            <param name="assemblyPath"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.LoadFromAssembly(System.Reflection.Assembly)">
            <summary>
            Load all compiled regex in the Assembly
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegex.SourceAssembly">
            <summary>
            Source <see cref="P:System.Text.RegularExpressions.CompiledRegex.SourceAssembly"/> of this collection
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.#ctor(System.Reflection.Assembly)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegex.#ctor(System.Text.RegularExpressions.CompiledRegexList,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary></summary>
        </member>
        <member name="T:System.Text.RegularExpressions.CompiledRegexBase">
            <summary>
            Base for compile regex class or entry
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexBase.EqualityComparer">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexBase.Comparator">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.GetHashCode">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexBase.Pattern">
            <summary>
            Pattern of the regex
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.CompiledRegexBase._pattern">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexBase.Name">
            <summary>
            Name of the regex
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.CompiledRegexBase._name">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexBase.Namespace">
            <summary>
            Namespace of the regex
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.CompiledRegexBase._namespace">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexBase.Options">
            <summary>
            Default options for this regex
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.CompiledRegexBase._options">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexBase.MatchTimeout">
            <summary>
            Default MatchTimeout for this regex
            </summary>
        </member>
        <member name="F:System.Text.RegularExpressions.CompiledRegexBase._matchTimeout">
            <summary></summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexBase.FullQualifiedName">
            <summary>
            Full qualified name of the regex
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.GetQualifiedName(System.String,System.String)">
            <summary>
            Get the FullQualifiedName text
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialise a <see cref="T:System.Text.RegularExpressions.CompiledRegexBase"/> with the specified pattern, name and Namespace
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.#ctor(System.String,System.String)">
            <summary>
            Initialise a <see cref="T:System.Text.RegularExpressions.CompiledRegexBase"/> with the specified pattern FullQualifiedName
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.Equals(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.Equals(System.Text.RegularExpressions.CompiledRegexBase,System.Text.RegularExpressions.CompiledRegexBase)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.Equals(System.Text.RegularExpressions.CompiledRegexBase,System.Text.RegularExpressions.CompiledRegexBase,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.EqualsFullQualifiedName(System.Text.RegularExpressions.CompiledRegexBase,System.String)">
            <summary>
            Test if the is the same FullQualifiedName (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.EqualsFullQualifiedName(System.Text.RegularExpressions.CompiledRegexBase,System.String,System.String)">
            <summary>
            Test if the is the same Name and Fullnamespace (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.EqualsFullQualifiedName(System.Text.RegularExpressions.CompiledRegexBase,System.Text.RegularExpressions.CompiledRegexBase)">
            <summary>
            Test if the is the same FullQualifiedName (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.EqualsFullQualifiedName(System.String)">
            <summary>
            Test if the is the same FullQualifiedName (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.EqualsFullQualifiedName(System.String,System.String)">
            <summary>
            Test if the is the same Name and Fullnamespace (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.EqualsFullQualifiedName(System.Text.RegularExpressions.CompiledRegexBase)">
            <summary>
            Test if the is the same FullQualifiedName (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.Compare(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.Compare(System.Text.RegularExpressions.CompiledRegexBase,System.Text.RegularExpressions.CompiledRegexBase)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.CompareTo(System.Text.RegularExpressions.CompiledRegexBase)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.CompareFullQualifiedName(System.Text.RegularExpressions.CompiledRegexBase,System.String)">
            <summary>
            Compare the FullQualifiedName (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.CompareFullQualifiedName(System.Text.RegularExpressions.CompiledRegexBase,System.String,System.String)">
            <summary>
            Compare the Name and Fullnamespace (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.CompareFullQualifiedName(System.Text.RegularExpressions.CompiledRegexBase,System.Text.RegularExpressions.CompiledRegexBase)">
            <summary>
            Compare the FullQualifiedName (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.CompareFullQualifiedName(System.String)">
            <summary>
            Test Compare the FullQualifiedName (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.CompareFullQualifiedName(System.String,System.String)">
            <summary>
            Compare the Name and Fullnamespace (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.CompareFullQualifiedName(System.Text.RegularExpressions.CompiledRegexBase)">
            <summary>
            Compare the FullQualifiedName (IgnoreCase)
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexBase.Equals(System.Text.RegularExpressions.CompiledRegexBase)">
            <summary></summary>
        </member>
        <member name="T:System.Text.RegularExpressions.CompiledRegexEntry">
            <summary>
            A PreCompiled regex entry
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialise a <see cref="T:System.Text.RegularExpressions.CompiledRegexEntry"/> with the specified pattern, name and Namespace
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexEntry.#ctor(System.String,System.String)">
            <summary>
            Initialise a <see cref="T:System.Text.RegularExpressions.CompiledRegexEntry"/> with the specified pattern and FullQualifiedName
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.CompiledRegexClass">
            <summary>
            A compiled <see cref="T:System.Text.RegularExpressions.Regex"/>
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexClass.Pattern">
            <summary>
            Pattern of the regex
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexClass.Name">
            <summary>
            Name of the regex
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexClass.Namespace">
            <summary>
            Namespace of the regex
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexClass.FullQualifiedName">
            <summary>
            Full qualified name of the regex
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexClass.Options">
            <summary>
            Default options for this regex
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexClass.MatchTimeout">
            <summary>
            Default MatchTimeout for this regex
            </summary>
        </member>
        <member name="P:System.Text.RegularExpressions.CompiledRegexClass.RightToLeft">
            <summary>
            Gets a value that indicates whether the regular expression searches from right to left.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initialise a <see cref="T:System.Text.RegularExpressions.CompiledRegexEntry"/> with the specified pattern, name and Namespace
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.#ctor(System.Text.RegularExpressions.CompiledRegexBase,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Initialise on base of the specified <see cref="T:System.Text.RegularExpressions.CompiledRegexEntry"/>, <see cref="T:System.Text.RegularExpressions.RegexOptions"/> and <see cref="T:System.TimeSpan"/>
            </summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.GetGroupNames">
            <summary>
            Returns an array of catch group names for the regular expression.
            </summary>
            <returns>String table of group names.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.GetGroupNumbers">
            <summary>
            Returns a table of catch group numbers that correspond to the group names in a table.
            </summary>
            <returns>Table of integers of group numbers.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.GroupNameFromNumber(System.Int32)">
            <summary>
            Gets the group name that corresponds to the specified group number.
            </summary>
            <param name="i">Group number to be converted to the corresponding group name.</param>
            <returns>String that contains the group name associated with the specified group number. If no group name matches <paramref name="i"/>, the method returns <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.GroupNumberFromName(System.String)">
            <summary>
            Returns the group number that corresponds to the specified group name.
            </summary>
            <param name="name">Group name to be converted to the corresponding group number.</param>
            <returns>Group number corresponding to the specified group <paramref name="name"/>, or -1 if <paramref name="name"/> is not a valid group <paramref name="name"/>.</returns>
            <exception cref="T:System.ArgumentNullException">name has the value null.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.IsMatch(System.String)">
            <summary>
            Specifies whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex"/> constructor looks for a match in a specific <paramref name="input"/> string.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <returns>true if the regular expression finds a match; else, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.IsMatch(System.String,System.Int32)">
            <summary>
            Specifies whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex"/> constructor looks for a match in the specified <paramref name="input"/> string, starting at the defined starting position in the string.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="startat">Position of the character where the search should start.</param>
            <returns>true if the regular expression finds a match; else, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the <paramref name="input"/> lenght.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Match(System.String)">
            <summary>
            Searches the input string for the first occurrence of a regular expression, starting at the specified starting position in the string.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <returns>Object that contains correspondence information.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Match(System.String,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression, starting at the specified starting position and searching for only the specified number of characters.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="startat">Position of the character where the search should start.</param>
            <returns>Object that contains correspondence information.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the <paramref name="input"/> lenght.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Match(System.String,System.Int32,System.Int32)">
            <summary>
            Searches the input string for the first occurrence of a regular expression, starting at the specified starting position and searching for only the specified number of characters.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="startat">Position of the character where the search should start.</param>
            <param name="length">Number of characters in the substring to be included in the search.</param>
            <returns>Object that contains correspondence information.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the <paramref name="input"/> lenght. Or <paramref name="length"/> is less than zero or greater than the <paramref name="input"/> lenght. Ou <paramref name="startat"/>+<paramref name="length"/>-1 identifies a position that is outside the range of <paramref name="input"/>.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Matches(System.String)">
            <summary>
             Searches the specified input string for all occurrences of a regular expression.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <returns>Collection of <see cref="T:System.Text.RegularExpressions.Match"/> objects found by the search. If no match is found, the method returns an empty collection object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Matches(System.String,System.Int32)">
            <summary>
            Searches the specified input string for all occurrences of a regular expression, starting at the specified start position in the string.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="startat">Position of the character where the search should start.</param>
            <returns>Collection of <see cref="T:System.Text.RegularExpressions.Match"/> objects found by the search. If no match is found, the method returns an empty collection object.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the <paramref name="input"/> lenght.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Split(System.String)">
            <summary>
            Splits an input string into an array of substrings, at positions defined by a regular expression template specified in the <see cref="T:System.Text.RegularExpressions.Regex"/> constructor.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <returns>Table of chains.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Split(System.String,System.Int32)">
            <summary>
            Splits a specified input string a specified maximum number of times into an array of substrings, at positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex"/> constructor.
            </summary>
            <param name="input">Splitting chain.</param>
            <param name="count">Maximum number of times the splitting can take place.</param>
            <returns>Table of chains.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Split(System.String,System.Int32,System.Int32)">
            <summary>
            Splits a specified input string a specified maximum number of times into an array of substrings, at positions defined by a regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex"/> constructor. The search for the regular expression pattern starts at a specified character position in the input chain.
            </summary>
            <param name="input">Splitting chain.</param>
            <param name="count">Maximum number of times the splitting can take place.</param>
            <param name="startat">Position of the character where the search should start.</param>
            <returns>Table of chains.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> has the value null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the <paramref name="input"/> lenght.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Replace(System.String,System.String)">
            <summary>
            In the specified input substring, replaces the specified maximum number of strings that match a regular expression pattern with a specific replacement string.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="replacement">Replacement chain.</param>
            <returns>New string identical to the <paramref name="input"/> string, except that the <paramref name="replacement"/> string replaces each matching string. If the regular expression pattern has no match in the current instance, the method returns the current instance unchanged.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="replacement"/> has the value null.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Replace(System.String,System.String,System.Int32)">
            <summary>
            In the specified input substring, replaces the specified maximum number of strings that match a regular expression pattern with a specific replacement string.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="replacement">Replacement chain.</param>
            <param name="count">Maximum number of times the splitting can take place.</param>
            <returns>New string identical to the <paramref name="input"/> string, except that the <paramref name="replacement"/> string replaces each matching string. If the regular expression pattern has no match in the current instance, the method returns the current instance unchanged.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="replacement"/> has the value null.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            In the specified input substring, replaces the specified maximum number of strings that match a regular expression pattern with a specific replacement string.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="replacement">Replacement chain.</param>
            <param name="count">Maximum number of times the splitting can take place.</param>
            <param name="startat">Position of the character where the search should start.</param>
            <returns>New string identical to the <paramref name="input"/> string, except that the <paramref name="replacement"/> string replaces each matching string. If the regular expression pattern has no match in the current instance, the method returns the current instance unchanged.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="replacement"/> has the value null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the <paramref name="input"/> lenght.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            In the specified input string, replaces all strings that match a specified regular expression with a string returned by a System.Text.RegularExpressions.MatchEvaluator delegate.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="evaluator">A custom method that examines each match and returns the original match string or a replacement string.</param>
            <returns>New string identical to the <paramref name="input"/> string, except that a replacement string replaces each matching string. If the regular expression pattern has no match in the current instance, the method returns the current instance unchanged.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="evaluator"/> has the value null.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
            <summary>
            In the specified input string, replaces all strings that match a specified regular expression with a string returned by a System.Text.RegularExpressions.MatchEvaluator delegate.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="evaluator">A custom method that examines each match and returns the original match string or a replacement string.</param>
            <param name="count">Maximum number of times the splitting can take place.</param>
            <returns>New string identical to the <paramref name="input"/> string, except that a replacement string replaces each matching string. If the regular expression pattern has no match in the current instance, the method returns the current instance unchanged.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="evaluator"/> has the value null.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="M:System.Text.RegularExpressions.CompiledRegexClass.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
            <summary>
            In the specified input string, replaces all strings that match a specified regular expression with a string returned by a System.Text.RegularExpressions.MatchEvaluator delegate.
            </summary>
            <param name="input">String in which a match is to be searched.</param>
            <param name="evaluator">A custom method that examines each match and returns the original match string or a replacement string.</param>
            <param name="count">Maximum number of times the splitting can take place.</param>
            <param name="startat">Position of the character where the search should start.</param>
            <returns>New string identical to the <paramref name="input"/> string, except that a replacement string replaces each matching string. If the regular expression pattern has no match in the current instance, the method returns the current instance unchanged.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> or <paramref name="evaluator"/> has the value null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startat"/> is less than zero or greater than the <paramref name="input"/> lenght.</exception>
            <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">The timeout period has expired.For more information on timeouts, see Notes.</exception>
        </member>
        <member name="T:System.Text.RegexHelper">
            <summary>
            Extension class for advanced Search and Replace in a string.
            </summary>
        </member>
        <member name="F:System.Text.RegexHelper.EmailAddress">
            <summary>
            Pattern for test the validity of an email address (used in <see cref="T:System.Net.Mail.MailAddress"/>)
            </summary>
        </member>
        <member name="F:System.Text.RegexHelper.EmailAddressBasic">
            <summary>
            Basic pattern for test the validity of an email address
            </summary>
            <remarks>https://www.regular-expressions.info/email.html</remarks>
        </member>
        <member name="F:System.Text.RegexHelper.EmailAddressW3C">
            <summary>
            W3C pattern for test the validity of an email address
            </summary>
        </member>
        <member name="F:System.Text.RegexHelper.EmailAddressNET">
            <summary>
            .NET pattern for test the validity of an email address
            </summary>
        </member>
        <member name="F:System.Text.RegexHelper.EmailAddressRFC_5322_Strict">
            <summary>
            Strict RFC 5322 pattern for test the validity of an email address
            </summary>
            <remarks>https://emailregex.com/</remarks>
        </member>
        <member name="F:System.Text.RegexHelper.EmailAddressRFC_5322_Simpliefed">
            <summary>
            Simpliefed RFC 5322 pattern for test the validity of an email address
            </summary>
            <remarks>https://www.regular-expressions.info/email.html</remarks>
        </member>
        <member name="F:System.Text.RegexHelper.NoASCII">
            <summary>
            Pattern for match a No ASCII character
            </summary>
        </member>
        <member name="F:System.Text.RegexHelper.ASCII">
            <summary>
            Pattern for match a ASCII character
            </summary>
        </member>
        <member name="F:System.Text.RegexHelper.ASCII_forCsharpNameSpace">
            <summary>
            Pattern for match a ASCII <see langword="namespace"/> in C#
            </summary>
        </member>
        <member name="F:System.Text.RegexHelper.ASCII_forCsharpNameClass">
            <summary>
            Pattern for match a ASCII <see langword="class"/> in C#
            </summary>
        </member>
        <member name="F:System.Text.RegexHelper.ISBN_10">
            <summary>
            Pattern for match a ISBN 10
            </summary>
        </member>
        <member name="F:System.Text.RegexHelper.ISBN_13">
            <summary>
            Pattern for match a ISBN 13
            </summary>
        </member>
        <member name="M:System.Text.RegexHelper.ReplaceLoop(System.String,System.String,System.String)">
            <summary>
            Execute a simple Search/Replace loop until the pattern disappears.
            </summary>
            <param name="input"></param>
            <param name="oldValues"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.Replace(System.String,System.Char[],System.Char)">
            <summary>
            Returns a new string in which all occurrences of the specifieds characters are replaced by a another character.
            </summary>
            <param name="input"></param>
            <param name="oldValues"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.Replace(System.String,System.String[],System.String)">
            <summary>
            Returns a new string in which all occurrences of the specifieds string are replaced by a another string.
            </summary>
            <param name="input"></param>
            <param name="oldValues"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.ReplaceLoop(System.String,System.String[],System.String)">
            <summary>
            Returns a new string in which all occurrences of the specifieds string are replaced by a another string.
            </summary>
            <param name="input"></param>
            <param name="oldValues"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="P:System.Text.RegexHelper.Timeout">
            <summary>
            Default execution time for Regex Search/Replace (30s). 
            </summary>
        </member>
        <member name="P:System.Text.RegexHelper.RegexOptions">
            <summary>
            Default <see cref="T:System.Text.RegularExpressions.RegexOptions"/> for regex operations.
            </summary>
        </member>
        <member name="M:System.Text.RegexHelper.Regex(System.String,System.String,System.String)">
            <summary>
            Execute a single regex Search/Replace.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.Regex(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Execute a single regex Search/Replace.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.Regex(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Execute a single regex Search/Replace.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.RegexLoop(System.String,System.String,System.String)">
            <summary>
            Execute a regex Search/Replace loop until the pattern disappears.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.RegexLoop(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Execute a regex Search/Replace loop until the pattern disappears.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.RegexLoop(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Execute a regex Search/Replace loop until the pattern disappears.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.RegexIsMatch(System.String,System.String)">
            <summary> 
            Test if the Regex pattern exist.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.RegexIsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Test if the Regex pattern exist.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.RegexIsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Test if the Regex pattern exist.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.RegexGetMatch(System.String,System.String)">
            <summary>
            Get the first Regex match.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
        </member>
        <member name="M:System.Text.RegexHelper.RegexGetMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Get the first Regex match.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="options"></param>
        </member>
        <member name="M:System.Text.RegexHelper.RegexGetMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Get the first Regex match.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
        </member>
        <member name="M:System.Text.RegexHelper.RegexGetMatches(System.String,System.String)">
            <summary>
            Get the Regex matchs patterns.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
        </member>
        <member name="M:System.Text.RegexHelper.RegexGetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Get the Regex matchs patterns.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="options"></param>
        </member>
        <member name="M:System.Text.RegexHelper.RegexGetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Get the Regex matchs patterns.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
        </member>
        <member name="M:System.Text.RegexHelper.RegexSplit(System.String,System.String)">
            <summary>
            Split a string wiht a regex the pattern.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.RegexSplit(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Split a string wiht a regex the pattern.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.RegexHelper.RegexSplit(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
            <summary>
            Split a string wiht a regex the pattern.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="options"></param>
            <param name="matchTimeout"></param>
            <returns></returns>
        </member>
        <member name="T:System.Text.StringExtension">
            <summary>
            Static class to extend <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:System.Text.StringExtension.Split(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="separator"></param>
            <param name="splitOptions"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.SplitLine(System.String)">
            <summary>
            Get a <see cref="T:System.String"/> array of all line on this text
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.SplitLine(System.String,System.StringSplitOptions)">
            <summary>
            Get a <see cref="T:System.String"/> array of all line on this text
            </summary>
            <param name="input"></param>
            <param name="splitOptions"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.ToLinux(System.String)">
            <summary>
            Parse the <see cref="T:System.String"/> to Linux End of Line char '\n'
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.ToEnvironmentLine(System.String)">
            <summary>
            Parse the <see cref="T:System.String"/> to the <see cref="P:System.Environment.NewLine"/>
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.ToStringEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the ToString() of a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection (<see langword="null"/> as keep)
            </summary>
            <param name="values"></param>
            <remarks><see langword="null"/> as keep</remarks>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.ToStringArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the ToString() of a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection (<see langword="null"/> as keep)
            </summary>
            <param name="values"></param>
            <remarks><see langword="null"/> as keep</remarks>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.ToOneString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a <see cref="T:System.Collections.Generic.IEnumerable`1"/>, using the separator specified between each member.
            </summary>
            <param name="values">Collection that contains the chains to be concatenated.</param>
            <param name="separator">String to use as separator. Separator is included in the returned string only if values contains several elements.</param>
            <returns>String composed of the value elements delimited by the separator. If values is an empty array, the method returns <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:System.Text.StringExtension.ToOneString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Text.StringJoinOptions)">
            <summary>
            Concatenates the members of a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection, using the separator specified between each member, and applies the specified behavior for the null, empty or WhiteSpace entries.
            </summary>
            <param name="values">Collection that contains the chains to be concatenated.</param>
            <param name="separator">String to use as separator. Separator is included in the returned string only if values contains several elements.</param>
            <param name="joinOptions">Behaviour to be use for the null, Empty or WhiteSpace entries.</param>
            <returns>String composed of the value elements delimited by the separator. If values is an empty array, the method returns <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:System.Text.StringExtension.ToOneString(System.Char[])">
            <summary>
            Combine a <see cref="T:System.Char"/>[] to a simple <see cref="T:System.String"/>
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:System.Text.StringExtension.ToOneString(System.Char[],System.Char)">
            <summary>
            Combine a <see cref="T:System.Char"/>[] to a simple <see cref="T:System.String"/>
            </summary>
            <param name="values"></param>
            <param name="join"><see cref="T:System.Char"/> use to join</param>
        </member>
        <member name="M:System.Text.StringExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the members of a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection built of <see cref="T:System.String"/> type, using the separator specified between each member.
            </summary>
            <param name="values">Collection that contains the chains to be concatenated.</param>
            <param name="separator">String to use as separator. Separator is included in the returned string only if values contains several elements.</param>
            <returns>String composed of the value elements delimited by the separator. If values is an empty array, the method returns <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:System.Text.StringExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.Text.StringJoinOptions)">
            <summary>
            Concatenates the members of a <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection built of <see cref="T:System.String"/> type, using the separator specified between each member, and applies the specified behavior for the null, empty or WhiteSpace entries.
            </summary>
            <param name="values">Collection that contains the chains to be concatenated.</param>
            <param name="separator">String to use as separator. Separator is included in the returned string only if values contains several elements.</param>
            <param name="joinOptions">Behaviour to be use for the null, Empty or WhiteSpace entries.</param>
            <returns>String composed of the value elements delimited by the separator. If values is an empty array, the method returns <see cref="F:System.String.Empty"/>.</returns>
        </member>
        <member name="M:System.Text.StringExtension.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is null or a empty string.
            </summary>
            <param name="value">String to test.</param>
            <returns>true if the value parameter is null or an empty string (""); otherwise false.</returns>
        </member>
        <member name="M:System.Text.StringExtension.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty or consists only of white spaces.
            </summary>
            <param name="value">String to test.</param>
            <returns>true if the value parameter is null or empty string (""), or if value is composed exclusively of white spaces.</returns>
        </member>
        <member name="M:System.Text.StringExtension.Truncate(System.String,System.Int32)">
            <summary>
            Truncate the <see cref="T:System.String"/> to the specified lenght. If negative, no change. 
            </summary>
            <param name="input"></param>
            <param name="length">Lenght to truncate the string. If negative, no change</param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.TrimStartAll(System.String[])">
            <summary>
            TrimStart() all <see cref="T:System.String"/> in the array
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.TrimStartAll(System.String[],System.Char[])">
            <summary>
            TrimStart() all <see cref="T:System.String"/> in the array
            </summary>
            <param name="input"></param>
            <param name="trimChars"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.TrimEndAll(System.String[])">
            <summary>
            TrimEnd() all <see cref="T:System.String"/> in the array
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.TrimEndAll(System.String[],System.Char[])">
            <summary>
            TrimEnd() all <see cref="T:System.String"/> in the array
            </summary>
            <param name="input"></param>
            <param name="trimChars"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.TrimAll(System.String[])">
            <summary>
            Trim() all <see cref="T:System.String"/> in the array
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.TrimAll(System.String[],System.Char[])">
            <summary>
            Trim() all <see cref="T:System.String"/> in the array
            </summary>
            <param name="input"></param>
            <param name="trimChars"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.Equals(System.String,System.String[])">
            <summary>
            Determines if this instance and another specified <see cref="T:System.String"/> object have the same value.
            </summary>
            <param name="input"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.Equals(System.String,System.StringComparison,System.String[])">
            <summary>
            Determines if this string and a specified <see cref="T:System.String"/> object have the same value, a parameter specifies the culture, case and sort rules used in the comparison.
            </summary>
            <param name="input"></param>
            <param name="values"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:System.Text.StringExtension.Format(System.String,System.Object[])">
            <summary>
            Replaces the formatting element of a specified string with the string representation of a corresponding object in a specified table.
            </summary>
            <param name="format">Composite format string.</param>
            <param name="args">Table of objects containing none or more objects to be formatted.</param>
            <returns></returns>
        </member>
        <member name="T:System.Text.StringJoinOptions">
            <summary>
            Enum for behaviour with a <see langword="null"/>, Empty and WhiteSpace
            </summary>
        </member>
        <member name="F:System.Text.StringJoinOptions.NullToEmpty">
            <summary>
            Convert a <see langword="null"/> value to a Empty
            </summary>
        </member>
        <member name="F:System.Text.StringJoinOptions.SkipNull">
            <summary>
            Skip a <see langword="null"/> value
            </summary>
        </member>
        <member name="F:System.Text.StringJoinOptions.SkipNullAndEmpty">
            <summary>
            Skip a <see langword="null"/> and Empty value
            </summary>
        </member>
        <member name="F:System.Text.StringJoinOptions.SkipNullAndWhiteSpace">
            <summary>
            Skip a <see langword="null"/> and WhiteSpace value
            </summary>
        </member>
        <member name="F:System.Text.StringJoinOptions.NullToNull">
            <summary>
            Convert a <see langword="null"/> value to "Null"
            </summary>
        </member>
        <member name="T:System.Text.UTF8SansBomEncoding">
            <summary>
            Clone of <see cref="T:System.Text.UTF8Encoding"/> with no BOM
            </summary>
        </member>
        <member name="P:System.Text.UTF8SansBomEncoding.UTF8SansBom">
            <summary>
            UTF-8 <see cref="T:System.Text.Encoding"/> without BOM
            </summary>
        </member>
        <member name="P:System.Text.UTF8SansBomEncoding.Default">
            <summary>
            UTF-8 <see cref="T:System.Text.Encoding"/> without BOM
            </summary>
        </member>
        <member name="M:System.Text.UTF8SansBomEncoding.#ctor">
            <summary>
            Create UTF-8 <see cref="T:System.Text.Encoding"/> without BOM
            </summary>
        </member>
        <member name="M:System.Text.UTF8SansBomEncoding.#ctor(System.Boolean)">
            <summary>
            Create UTF-8 <see cref="T:System.Text.Encoding"/> without BOM
            </summary>
            <param name="throwOnInvalidBytes">true to raise an exception when an invalid encoding is detected; else, false.</param>
        </member>
        <member name="T:System.Text.WhiteCharacter">
            <summary>
            Space character separator
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.SPA">
            <summary>
            U+0020 Space
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.NBSP">
            <summary>
            U+0020 No-Break Space
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.LF">
            <summary>
            U+000A Line Feed \n (aka New Line)
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.CR">
            <summary>
            U+000D Carriage Return \r
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.HT">
            <summary>
            U+0009 Horizontal Tabulation \t
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.VT">
            <summary>
            U+000B Vertical Tabulation \v
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.FF">
            <summary>
            U+000C Form Feed \f
            </summary>
        </member>
        <member name="T:System.Text.WhiteCharacter.UnicodeSeparator">
            <summary>
            Additional space separator in the Unicode standard
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.OSM">
            <summary>
            U+1680 Ogham Space Mark
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.NQSP">
            <summary>
            U+2000 En Quad (aka Demi-Cadratin)
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.MQSP">
            <summary>
            U+2001  Em Quad (aka Cadratin)
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.ENSP">
            <summary>
            U+2002 En Space (aka Demi-Cadratin space)
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.EMSP">
            <summary>
            U+2003 Em Space (aka Cadratin space)
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.TPEM">
            <summary>
            U+2004 Three-Per-Em Space (aka Thick space)
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.FPEM">
            <summary>
            U+2005 Four-Per-Em Space (aka Mid space)
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.SPEM">
            <summary>
            U+2006 Six-Per-Em Space
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.FSP">
            <summary>
            U+2007 Figure Space
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.PSP">
            <summary>
            U+2008 Punctuation Space
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.THSP">
            <summary>
            U+2009 Thin Space
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.HSP">
            <summary>
            U+200A Hair Space 
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.ZWSP">
            <summary>
            U+200B Zero Width Space
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.ZWNJ">
            <summary>
            U+200C Zero Width Non-Joiner
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.ZWJ">
            <summary>
            U+200D Zero Width Joiner
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.LSEP">
            <summary>
            U+2028 Line Separator
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.PSEP">
            <summary>
            U+2029 Paragraph Separator
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.NNBSP">
            <summary>
            U+202F Narrow No-Break Space (No-Break Space)
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.MMSP">
            <summary>
            U+205F Medium Mathematical Space
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.IDSP">
            <summary>
            U+3000 Ideographic Space
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeSeparator.IHSP">
            <summary>
            U+303F Ideographic Half Fill Space
            </summary>
        </member>
        <member name="T:System.Text.WhiteCharacter.UnicodeMark">
            <summary>
            Mark character in the Unicode standard
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeMark.FTRM">
            <summary>
            U+200E Left-To-Right Mark
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeMark.RTLM">
            <summary>
            U+200F Right-To-Left Mark
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeMark.LTRE">
            <summary>
            U+202A Left-To-Right Embedding
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeMark.RTLE">
            <summary>
            U+202B Right-To-Left Embedding
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeMark.PDF">
            <summary>
            U+202C Pop Directional Formatting
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeMark.LTRO">
            <summary>
            U+202D Left-To-Right Override
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeMark.RTLO">
            <summary>
            U+202E Right-To-Left Override
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.WhiteCharacters">
            <summary>
            Default char array for <see cref="M:System.String.Trim"/> (is a combine a base <see cref="T:System.Text.WhiteCharacter"/> and <see cref="T:System.Text.WhiteCharacter.UnicodeSeparator"/>)
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.UnicodeMarks">
            <summary>
            char array of UnicodeMarks
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.EndLineCharacters">
            <summary>
            End of line char
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.EndLineWindows">
            <summary>
            End of line for Windows
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.EndLineLinux">
            <summary>
            End of line for Linux
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.EndLineMac">
            <summary>
            End of line for Mac
            </summary>
        </member>
        <member name="P:System.Text.WhiteCharacter.EndLineString">
            <summary>
            End of line string
            </summary>
        </member>
        <member name="T:System.Xml.DocumentType">
            <summary>
            Class to represent a DocumentType 
            </summary>
        </member>
        <member name="P:System.Xml.DocumentType.Name">
            <summary>
            The Name of the DocumentType  
            </summary>
        </member>
        <member name="P:System.Xml.DocumentType.PublicId">
            <summary>
            The PublicId of the DocumentType  
            </summary>
        </member>
        <member name="P:System.Xml.DocumentType.SystemId">
            <summary>
            The SystemId of the DocumentType  
            </summary>
        </member>
        <member name="P:System.Xml.DocumentType.Subset">
            <summary>
            The Subset of the DocumentType  
            </summary>
        </member>
        <member name="M:System.Xml.DocumentType.#ctor(System.String)">
            <summary>
            Initialise a <see cref="T:System.Xml.DocumentType"/> with the spécified name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:System.Xml.DocumentType.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialise a <see cref="T:System.Xml.DocumentType"/> with the spécified name and ID's
            </summary>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
        </member>
        <member name="M:System.Xml.DocumentType.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initialise a <see cref="T:System.Xml.DocumentType"/> with the spécified name, ID's and subset
            </summary>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
            <param name="subset"></param>
        </member>
        <member name="M:System.Xml.DocumentType.GetFromFile(System.String)">
            <summary>
            Get the <see cref="T:System.Xml.DocumentType"/> in a file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.DocumentType.GetFromText(System.String)">
            <summary>
            Get the <see cref="T:System.Xml.DocumentType"/> in a XML text
            </summary>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.DocumentType.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.DocumentType.Equals(System.Xml.DocumentType)">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.Text">
            <summary>
            Text of the DOCTYPE.
            </summary>
        </member>
        <member name="M:System.Xml.DocumentType.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Xml.DocumentType.ToString">
            <summary></summary>
            <returns></returns>
        </member>
        <member name="P:System.Xml.DocumentType.HTML5">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.XHTML1_1">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.NCX">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.MathML2">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.MathML1">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.XHTML1strict">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.XHTML1transitional">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.XHTML1frameset">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.HTML4strict">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.HTML4transitional">
            <summary></summary>
        </member>
        <member name="P:System.Xml.DocumentType.HTML4frameset">
            <summary></summary>
        </member>
        <member name="T:System.Xml.XmlDocumentCreate">
            <summary>
            Load quickly a <see cref="T:System.Xml.XmlDocument"/>
            </summary>
        </member>
        <member name="M:System.Xml.XmlDocumentCreate.Document(System.String)">
            <summary>
            Load quickly a <see cref="T:System.Xml.XmlDocument"/> from a file
            </summary>
        </member>
        <member name="M:System.Xml.XmlDocumentCreate.Document(System.IO.Stream)">
            <summary>
            Load quickly a <see cref="T:System.Xml.XmlDocument"/> from a stream
            </summary>
        </member>
        <member name="M:System.Xml.XmlDocumentCreate.DocumentXML(System.String)">
            <summary>
            Load quickly a <see cref="T:System.Xml.XmlDocument"/> from a string
            </summary>
        </member>
        <member name="M:System.Xml.XmlDocumentCreate.ParseHTML(System.String)">
            <summary>
            Load quickly a <see cref="T:System.Xml.XmlDocument"/> from a HTML file
            </summary>
        </member>
        <member name="M:System.Xml.XmlDocumentCreate.ParseHTML(System.IO.Stream)">
            <summary>
            Load quickly a <see cref="T:System.Xml.XmlDocument"/> from a HTML stream
            </summary>
        </member>
        <member name="M:System.Xml.XmlDocumentCreate.ParseHTMLtext(System.String)">
            <summary>
            Load quickly a <see cref="T:System.Xml.XmlDocument"/> from a HTML string
            </summary>
        </member>
        <member name="T:System.Xml.XmlDocumentWriter">
            <summary>
            Static class for write a XML file
            </summary>
        </member>
        <member name="P:System.Xml.XmlDocumentWriter.Settings">
            <summary>
            Initial setting for <see cref="T:System.Xml.XmlWriter"/>
            </summary>
        </member>
        <member name="M:System.Xml.XmlDocumentWriter.Document(System.String,System.Xml.XmlNode)">
            <summary>
            Write the XML node
            </summary>
            <param name="filePath"></param>
            <param name="node"></param>
        </member>
        <member name="M:System.Xml.XmlDocumentWriter.Document(System.String,System.Xml.XmlNode,System.Xml.XmlWriterSettings)">
            <summary>
            Write the XML node with the specified settings
            </summary>
            <param name="filePath"></param>
            <param name="node"></param>
            <param name="settings"></param>
        </member>
        <member name="M:System.Xml.XmlDocumentWriter.String(System.Xml.XmlNode)">
            <summary>
            Get the outer string of the XML node with
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlDocumentWriter.String(System.Xml.XmlNode,System.Xml.XmlWriterSettings)">
            <summary>
            Get the outer string of the XML node with the specified settings
            </summary>
            <param name="node"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlDocumentWriter.String(System.Xml.XmlNode,System.Xml.DocumentType)">
            <summary>
            Get the outer string of the XML node with the DocType 
            </summary>
            <param name="node"></param>
            <param name="doctype"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlDocumentWriter.String(System.Xml.XmlNode,System.Xml.XmlWriterSettings,System.Xml.DocumentType)">
            <summary>
            Get the outer string of the XML node with the specified settings and DocType
            </summary>
            <param name="node"></param>
            <param name="settings"></param>
            <param name="doctype"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlDocumentWriter.Document(System.String,System.Xml.XmlNode,System.Xml.DocumentType)">
            <summary>
            Write the XML node with the specified DocType
            </summary>
            <param name="filePath"></param>
            <param name="node"></param>
            <param name="doctype"></param>
        </member>
        <member name="M:System.Xml.XmlDocumentWriter.Document(System.String,System.Xml.XmlNode,System.Xml.XmlWriterSettings,System.Xml.DocumentType)">
            <summary>
            Write the XML node with the specified settings and DocType
            </summary>
            <param name="filePath"></param>
            <param name="node"></param>
            <param name="settings"></param>
            <param name="doctype"></param>
        </member>
        <member name="T:System.Xml.XmlEnumertor">
            <summary>
            Extension class for enumerate or get a array of <see cref="T:System.Xml.XmlElement"/>
            </summary>
        </member>
        <member name="M:System.Xml.XmlEnumertor.EnumerableElement(System.Xml.XmlNode)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> in the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.EnumerableElement(System.Xml.XmlNodeList)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> in the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.EnumerableElement(System.Xml.XmlNode,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name in the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.EnumerableElement(System.Xml.XmlNodeList,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name in the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.EnumerableElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and containing the attribute in the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.EnumerableElement(System.Xml.XmlNodeList,System.String,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and containing the attribute in the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.EnumerableElement(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and and with the corresponding value attribute in the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.EnumerableElement(System.Xml.XmlNodeList,System.String,System.String,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and and with the corresponding value attribute in the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.GetElements(System.Xml.XmlNode)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> in the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:System.Xml.XmlEnumertor.GetElements(System.Xml.XmlNodeList)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> in the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
        </member>
        <member name="M:System.Xml.XmlEnumertor.GetElements(System.Xml.XmlNode,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name in the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
        </member>
        <member name="M:System.Xml.XmlEnumertor.GetElements(System.Xml.XmlNodeList,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name in the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
        </member>
        <member name="M:System.Xml.XmlEnumertor.GetElements(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and containing the attribute in the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:System.Xml.XmlEnumertor.GetElements(System.Xml.XmlNodeList,System.String,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and containing the attribute in the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:System.Xml.XmlEnumertor.GetElements(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and and with the corresponding value attribute in the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Xml.XmlEnumertor.GetElements(System.Xml.XmlNodeList,System.String,System.String,System.String)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and and with the corresponding value attribute in the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <param name="value"></param>
        </member>
        <member name="M:System.Xml.XmlEnumertor.FirstElement(System.Xml.XmlNode)">
            <summary>
            Get the first <see cref="T:System.Xml.XmlElement"/> of the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.FirstElement(System.Xml.XmlNodeList)">
            <summary>
            Get the first <see cref="T:System.Xml.XmlElement"/> of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
        </member>
        <member name="M:System.Xml.XmlEnumertor.FirstElement(System.Xml.XmlNode,System.String)">
            <summary>
            Get the first the <see cref="T:System.Xml.XmlElement"/> with the corresponding name of the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.FirstElement(System.Xml.XmlNodeList,System.String)">
            <summary>
            Get the first the <see cref="T:System.Xml.XmlElement"/> with the corresponding name of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.FirstElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Get the first the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and containing the attribute of the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.FirstElement(System.Xml.XmlNodeList,System.String,System.String)">
            <summary>
            Get the first the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and containing the attribute of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.FirstElement(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Get the first the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and and with the corresponding value attribute of the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.FirstElement(System.Xml.XmlNodeList,System.String,System.String,System.String)">
            <summary>
            Get the first the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and and with the corresponding value attribute of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.EnumerableElementReverse(System.Xml.XmlNodeList)">
            <summary>
            Enumerate the <see cref="T:System.Xml.XmlElement"/> in the <see cref="T:System.Xml.XmlNodeList"/> in reverse ordre
            </summary>
            <param name="nodeList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.LastElement(System.Xml.XmlNode)">
            <summary>
            Get the last <see cref="T:System.Xml.XmlElement"/> of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.LastElement(System.Xml.XmlNodeList)">
            <summary>
            Get the last <see cref="T:System.Xml.XmlElement"/> of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.LastElement(System.Xml.XmlNode,System.String)">
            <summary>
            Get the last the <see cref="T:System.Xml.XmlElement"/> with the corresponding name of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.LastElement(System.Xml.XmlNodeList,System.String)">
            <summary>
            Get the last the <see cref="T:System.Xml.XmlElement"/> with the corresponding name of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.LastElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Get the last the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and containing the attribute of the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.LastElement(System.Xml.XmlNodeList,System.String,System.String)">
            <summary>
            Get the last the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and containing the attribute of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.LastElement(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Get the last the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and and with the corresponding value attribute of the <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlEnumertor.LastElement(System.Xml.XmlNodeList,System.String,System.String,System.String)">
            <summary>
            Get the last the <see cref="T:System.Xml.XmlElement"/> with the corresponding name and and with the corresponding value attribute of the <see cref="T:System.Xml.XmlNodeList"/>
            </summary>
            <param name="nodeList"></param>
            <param name="name"></param>
            <param name="attribute"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:System.Xml.XmlExtension">
            <summary>
            Static class extension for <see cref="T:System.Xml.XmlElement"/>
            </summary>
        </member>
        <member name="M:System.Xml.XmlExtension.AppendElement(System.Xml.XmlNode,System.String)">
            <summary>
            Append a <see cref="T:System.Xml.XmlElement"/> to the node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.AppendElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Append a <see cref="T:System.Xml.XmlElement"/> to the node.
            </summary>
            <param name="node"></param>
            <param name="name"></param>
            <param name="namespaceURI">Namespace of the element</param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.AppendElement(System.Xml.XmlNode,System.String,System.Xml.XmlNamespace)">
            <summary>
            Append a <see cref="T:System.Xml.XmlElement"/> to the node.
            </summary>
            <param name="node"></param>
            <param name="localName"></param>
            <param name="ns"><see cref="T:System.Xml.XmlNamespace"/> of this element</param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.AppendElement(System.Xml.XmlNode,System.String,System.String,System.String)">
            <summary>
            Append a <see cref="T:System.Xml.XmlElement"/> to the node.
            </summary>
            <param name="node"></param>
            <param name="prefix">Prefix of the element</param>
            <param name="localName"></param>
            <param name="namespaceURI">Namespace of the element</param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.AppendText(System.Xml.XmlNode,System.String)">
            <summary>
            Append a <see cref="T:System.Xml.XmlText"/> to the node.
            </summary>
            <param name="node"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.SetAttribute(System.Xml.XmlElement,System.String,System.Xml.XmlNamespace,System.String)">
            <summary>
            Set a attribut with the value and the specified Namespace
            </summary>
            <param name="node"></param>
            <param name="localName"></param>
            <param name="ns"><see cref="T:System.Xml.XmlNamespace"/> of this element</param>
            <param name="value"></param>
        </member>
        <member name="M:System.Xml.XmlExtension.SetAttribute(System.Xml.XmlElement,System.String,System.String,System.String,System.String)">
            <summary>
            Set a attribut with the value and the specified Namespace
            </summary>
            <param name="node"></param>
            <param name="prefix">Prefix of the element</param>
            <param name="localName"></param>
            <param name="namespaceURI">Namespace of the element</param>
            <param name="value"></param>
        </member>
        <member name="M:System.Xml.XmlExtension.TransferAttribut(System.Xml.XmlNode,System.Xml.XmlNode,System.String)">
            <summary>
            Transfer a attribute between 2 nodes of different context (if existe)
            </summary>
            <param name="destination"></param>
            <param name="source"></param>
            <param name="attribut">Attribut to transfer</param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.AddNamespace(System.Xml.XmlElement,System.Xml.XmlNamespace)">
            <summary>
            Add a Namespace composed of a prefix and a URI to the node
            </summary>
            <param name="node"></param>
            <param name="ns"><see cref="T:System.Xml.XmlNamespace"/> to add</param>
        </member>
        <member name="M:System.Xml.XmlExtension.AddNamespace(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Add a Namespace composed of a prefix and a URI to the node
            </summary>
            <param name="node"></param>
            <param name="localName">Prefix associated of this namespace</param>
            <param name="namespaceURI">URI associated of this namespace</param>
        </member>
        <member name="M:System.Xml.XmlExtension.AppendCDataSection(System.Xml.XmlNode,System.String)">
            <summary>
            Append a <see cref="T:System.Xml.XmlCDataSection"/> to the node
            </summary>
            <param name="node"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.AppendComment(System.Xml.XmlNode,System.String)">
            <summary>
            Append a <see cref="T:System.Xml.XmlComment"/> to the node
            </summary>
            <param name="node"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.RemoveDeclaration(System.Xml.XmlNode)">
            <summary>
            Remove the <see cref="T:System.Xml.XmlDeclaration"/> of the OwnerDocument.
            </summary>
            <param name="node"></param>
            <returns>Return the node cleaned</returns>
        </member>
        <member name="M:System.Xml.XmlExtension.RevoveDocumentType(System.Xml.XmlDocument)">
            <summary>
            Revove the <see cref="T:System.Xml.XmlDocumentType"/> of the document
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.CreateDocumentType(System.Xml.XmlDocument,System.String)">
            <summary>
            Create a <see cref="T:System.Xml.XmlDocumentType"/> without any Id
            </summary>
            <param name="document"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.CreateDocumentType(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Create a <see cref="T:System.Xml.XmlDocumentType"/> with the specified Id
            </summary>
            <param name="document"></param>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.SetDocumentType(System.Xml.XmlDocument,System.String)">
            <summary>
            Set a <see cref="T:System.Xml.XmlDocumentType"/> without any Id
            </summary>
            <param name="document"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.SetDocumentType(System.Xml.XmlDocument,System.String,System.String,System.String)">
            <summary>
            Set a <see cref="T:System.Xml.XmlDocumentType"/> with the specified Ids
            </summary>
            <param name="document"></param>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.SetDocumentType(System.Xml.XmlDocument,System.String,System.String,System.String,System.String)">
            <summary>
            Set a <see cref="T:System.Xml.XmlDocumentType"/> with the specified Ids and internalSubset
            </summary>
            <param name="document"></param>
            <param name="name"></param>
            <param name="publicId"></param>
            <param name="systemId"></param>
            <param name="internalSubset"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.SetDocumentType(System.Xml.XmlDocument,System.Xml.DocumentType)">
            <summary>
            Set a <see cref="T:System.Xml.DocumentType"/> with the specified Ids and internalSubset
            </summary>
            <param name="document"></param>
            <param name="doctype"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlExtension.CreateDocumentType(System.Xml.XmlDocument,System.Xml.DocumentType)">
            <summary>
            Create a <see cref="T:System.Xml.XmlDocumentType"/>
            </summary>
            <param name="document"></param>
            <param name="doctype"></param>
            <returns></returns>
        </member>
        <member name="T:System.Xml.XmlHtmlEntity">
            <summary>
            Represents an HTML entity / XML Entity with the corresponding character.
            </summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseToCHAR(System.String,System.Collections.Generic.IEnumerable{System.Xml.XmlHtmlEntity})">
            <summary>
            Parse HTML and XML
            </summary>
            <param name="html"></param>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseToHTML(System.String,System.Collections.Generic.IEnumerable{System.Xml.XmlHtmlEntity})">
            <summary>
            Parse XML and CHAR
            </summary>
            <param name="html"></param>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseToXML(System.String,System.Collections.Generic.IEnumerable{System.Xml.XmlHtmlEntity})">
            <summary>
            Parse HTML and CHAR
            </summary>
            <param name="html"></param>
            <param name="entitys"></param>
            <returns></returns>
        </member>
        <member name="P:System.Xml.XmlHtmlEntity.HTML">
            <summary>
            HTML name of the entity
            </summary>
        </member>
        <member name="P:System.Xml.XmlHtmlEntity.XML">
            <summary>
            XML value of the entity
            </summary>
        </member>
        <member name="P:System.Xml.XmlHtmlEntity._XMLvalue">
            <summary>
            integer XML value of the entity
            </summary>
        </member>
        <member name="P:System.Xml.XmlHtmlEntity.Character">
            <summary>
            Character of the entity 
            </summary>
        </member>
        <member name="P:System.Xml.XmlHtmlEntity.IsCaseSensitive">
            <summary>
            If the HTML name of the entity is case sensitive
            </summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.#ctor(System.Int32)">
            <summary>
            Initializes an instance with only the XML format.
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.#ctor(System.String,System.Int32)">
            <summary>
            Initializes an instance with the HTML and the XML format.
            </summary>
            <param name="html">HTML name of the entity</param>
            <param name="xml">XML value of the entity</param>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes an instance with the HTML and the XML format.
            </summary>
            <param name="html">HTML name of the entity</param>
            <param name="xml">XML value of the entity</param>
            <param name="caseSensitive">Defined if the HTML name of the entity is case sensitive</param>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseToXML(System.String)">
            <summary>
            Parse HTML and CHAR
            </summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseToHTML(System.String)">
            <summary>
            Parse XML and CHAR
            </summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseToCHAR(System.String)">
            <summary>
            Parse HTML and XML
            </summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseHTMLtoXML(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseHTMLtoCHAR(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseCHARtoHTML(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseCHARtoXML(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseXMLtoHTML(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ParseXMLtoCHAR(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.GetHashCode">
            <summary></summary>
        </member>
        <member name="P:System.Xml.XmlHtmlEntity.HtmlBase">
            <summary>
            The basique HTML entity
            </summary>
        </member>
        <member name="P:System.Xml.XmlHtmlEntity.Html2">
            <summary>
            HTML 2 entity
            </summary>
        </member>
        <member name="P:System.Xml.XmlHtmlEntity.Html3">
            <summary>
            HTML 3 entity
            </summary>
        </member>
        <member name="P:System.Xml.XmlHtmlEntity.Html4">
            <summary>
            HTML 4 entity
            </summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.Equals(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.Equals(System.Xml.XmlHtmlEntity,System.Xml.XmlHtmlEntity)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.Equals(System.Xml.XmlHtmlEntity)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.Compare(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.Compare(System.Xml.XmlHtmlEntity,System.Xml.XmlHtmlEntity)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.System#Collections#Generic#IComparer{System#Xml#XmlHtmlEntity}#Compare(System.Xml.XmlHtmlEntity,System.Xml.XmlHtmlEntity)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.CompareTo(System.Xml.XmlHtmlEntity)">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlHtmlEntity.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Xml.XmlNamespace">
            <summary>
            Represents a Namespace XML
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.Prefix">
            <summary>
            Prefix associated of this namespace
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.Uri">
            <summary>
            URI of this namespace
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.xmlns">
            <summary>
            xmlns attribut of this XML namespace
            </summary>
        </member>
        <member name="M:System.Xml.XmlNamespace.#ctor(System.String,System.String)">
            <summary>
            Create a Namespace XML with a specified URI and prefix
            </summary>
            <param name="prefix"></param>
            <param name="uri"></param>
        </member>
        <member name="P:System.Xml.XmlNamespace.XML">
            <summary>
            Standard namespace for XML
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.XMLSchema">
            <summary>
            Standard namespace for XML
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.XMLSchemaInstance">
            <summary>
            Standard namespace for XML
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.XHTML">
            <summary>
            Standard namespace for XHTML
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.DublinCore">
            <summary>
            Standard namespace for Dublin Core
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.DublinCoreTermes">
            <summary>
            Standard namespace for Dublin Core Termes
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.MARCcode">
            <summary>
            Standard namespace for MARC code
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.OPF">
            <summary>
            Standard namespace for ePub OPF file
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.Rendition">
            <summary>
            Standard namespace for ePub rendition vocabulary
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.Calibre">
            <summary>
            Standard namespace for Calibre software
            </summary>
        </member>
        <member name="P:System.Xml.XmlNamespace.IDpub">
            <summary>
            Standard namespace for IDpub software
            </summary>
        </member>
        <member name="T:System.Xml.XmlRacine">
            <summary></summary>
        </member>
        <member name="M:System.Xml.XmlRacine.#ctor(System.String)">
            <summary>
            Create a basic <see cref="T:System.Xml.XmlElement"/>
            </summary>
            <param name="localName"></param>
        </member>
        <member name="M:System.Xml.XmlRacine.#ctor(System.String,System.String)">
            <summary>
            Create a basic <see cref="T:System.Xml.XmlElement"/> with the specified URI
            </summary>
        </member>
        <member name="M:System.Xml.XmlRacine.Create(System.String)">
            <summary>
            Create a basic <see cref="T:System.Xml.XmlElement"/>
            </summary>
        </member>
        <member name="M:System.Xml.XmlRacine.Create(System.String,System.Xml.XmlNamespace)">
            <summary>
            Create a basic <see cref="T:System.Xml.XmlElement"/> with the specified Namespace
            </summary>
        </member>
        <member name="M:System.Xml.XmlRacine.Create(System.String,System.String)">
            <summary>
            Create a basic <see cref="T:System.Xml.XmlElement"/> with the specified URI
            </summary>
        </member>
        <member name="T:Chromatik.ChromatikException">
            <summary>
            Exception levée lorsqu'une erreur survient dans le namespace ChromatikException
            </summary>
        </member>
        <member name="M:Chromatik.ChromatikException.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe ChromatikException
            </summary>
        </member>
        <member name="M:Chromatik.ChromatikException.#ctor(System.String)">
            <summary>
            Initialise une nouvelle instance de la classe ChromatikException avec un message d'erreur spécifié
            </summary>
            <param name="message">Message d'erreur indiquant la raison de l'exception</param>
        </member>
        <member name="M:Chromatik.ChromatikException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise une nouvelle instance de la classe ChromatikException avec un message d'erreur spécifié
            et une référence à l'exception interne ayant provoqué cette exception
            </summary>
            <param name="message">Message d'erreur indiquant la raison de l'exception</param>
            <param name="innerException">Exception qui constitue la cause de l'exception actuelle.
            Si le paramètre innerException n'est pas une référence null,
            l'exception actuelle est levée dans un bloc catch qui gère l'exception interne</param>
        </member>
        <member name="T:Chromatik.Machine.Alphabet">
            <summary>
            Class for operating within the a limit characters range.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Alphabet.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Initialize the alphabet.
            </summary>
            <param name="alphabet"></param>
        </member>
        <member name="F:Chromatik.Machine.Alphabet.source_alphabet">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Machine.Alphabet.OperatingAlphabet">
            <summary>
            The mapping of input wire to output wire.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Alphabet.AlphabetContains(System.Nullable{System.Char})">
            <summary>
            Test if a <see cref="T:System.Char"/> is contains in the operating alphabet.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Alphabet.AlphabetContains(System.Char)">
            <summary>
            Test if a <see cref="T:System.Char"/> is contains in the operating alphabet.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Alphabet.Equals(System.Object)">
            <summary></summary>
            <param name="obj"></param>
        </member>
        <member name="M:Chromatik.Machine.Alphabet.Equals(Chromatik.Machine.Alphabet)">
            <summary></summary>
            <param name="obj"></param>
        </member>
        <member name="M:Chromatik.Machine.Alphabet.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Machine.Enigma">
            <summary>
            Represent famous WW2 cryptography machine.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Enigma.#ctor(Chromatik.Machine.Reflector,Chromatik.Machine.RotorEnigma[])">
            <summary>
            Initialize a Enigma machine.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Enigma.#ctor(Chromatik.Machine.Reflector,Chromatik.Machine.PlugBoard,Chromatik.Machine.RotorEnigma[])">
            <summary>
            Initialize a Enigma machine.
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Enigma.Reflector">
            <summary>
            Reflector instaled on this Enigma
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Enigma.Rotors">
            <summary>
            Rotors instaled on this Enigma
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Enigma.PlugBoard">
            <summary>
            Plug Board of this Enigma
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Enigma.Process(System.Char)">
            <summary>
            Process a key press.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/>. If the <see cref="T:System.Char"/> is not contained in operating alphabet, return the input.</returns>
        </member>
        <member name="M:Chromatik.Machine.Enigma.Process(System.String)">
            <summary>
            Process the string signal to the string signal.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/> table. The <see cref="T:System.Char"/> not contained in operating alphabet as not modified.</returns>
        </member>
        <member name="M:Chromatik.Machine.Enigma.Process(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Process the input enumerable <see cref="T:System.Char"/> to the output enumerable <see cref="T:System.Char"/>.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/> table. The <see cref="T:System.Char"/> not contained in operating alphabet as not modified.</returns>
        </member>
        <member name="M:Chromatik.Machine.Enigma.Reset">
            <summary>
            Reset the enigma machine (all rotor to the initial position).
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Enigma.ToString">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Machine.Enigma.Clone">
            <summary>
            Creates a duplicate of this Enigma.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Enigma.Clone(System.Boolean)">
            <summary>
            Creates a duplicate of this Enigma and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Enigma.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this Enigma.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Enigma.CloneEnigma(System.Boolean)">
            <summary>
            Creates a duplicate of this Enigma and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Machine.IMachine">
            <summary>
            Interface represent a cryptography machine
            </summary>
        </member>
        <member name="M:Chromatik.Machine.IMachine.Process(System.Char)">
            <summary>
            Process a <see cref="T:System.Char"/>
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.IMachine.Process(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Process a <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.IMachine.Process(System.String)">
            <summary>
            Process a <see cref="T:System.String"/>
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Machine.Kraken">
            <summary>
            Represent MarkMark cryptography machine.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Kraken.#ctor(Chromatik.Machine.Module[])">
            <summary>
            Initialize a Kraken machine.
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Kraken.Modules">
            <summary>
            Rotors instaled on this MarkMark
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Kraken.Process(System.Char)">
            <summary>
            Process a key press.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/>. If the <see cref="T:System.Char"/> is not contained in operating alphabet, return the input.</returns>
        </member>
        <member name="M:Chromatik.Machine.Kraken.Process(System.Char[])">
            <summary>
            Process the input <see cref="T:System.Char"/> table to the output <see cref="T:System.Char"/> table.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/> table. The <see cref="T:System.Char"/> not contained in operating alphabet as not modified.</returns>
        </member>
        <member name="M:Chromatik.Machine.Kraken.Process(System.String)">
            <summary>
            Process the string signal to the string signal.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/> table. The <see cref="T:System.Char"/> not contained in operating alphabet as not modified.</returns>
        </member>
        <member name="M:Chromatik.Machine.Kraken.Process(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Process the input enumerable <see cref="T:System.Char"/> to the output enumerable <see cref="T:System.Char"/>.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/> table. The <see cref="T:System.Char"/> not contained in operating alphabet as not modified.</returns>
        </member>
        <member name="M:Chromatik.Machine.Kraken.Reset">
            <summary>
            Reset the MarkMark machine (all rotor to the initial position).
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Kraken.ToString">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Machine.Kraken.Clone">
            <summary>
            Creates a duplicate of this Enigma.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Kraken.Clone(System.Boolean)">
            <summary>
            Creates a duplicate of this Enigma and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Kraken.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this Enigma.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Kraken.CloneKraken(System.Boolean)">
            <summary>
            Creates a duplicate of this Enigma and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Machine.MarkMark">
            <summary>
            Represent MarkMark cryptography machine.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.#ctor(Chromatik.Machine.Reflector,Chromatik.Machine.Module[])">
            <summary>
            Initialize a MarkMark machine.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.#ctor(Chromatik.Machine.Reflector,Chromatik.Machine.PlugBoard,Chromatik.Machine.Module[])">
            <summary>
            Initialize a MarkMark machine.
            </summary>
        </member>
        <member name="P:Chromatik.Machine.MarkMark.Reflector">
            <summary>
            Reflector instaled on this MarkMark
            </summary>
        </member>
        <member name="P:Chromatik.Machine.MarkMark.Modules">
            <summary>
            Rotors instaled on this MarkMark
            </summary>
        </member>
        <member name="P:Chromatik.Machine.MarkMark.FrontPlugBoard">
            <summary>
            Plug Board of this MarkMark
            </summary>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.Process(System.Char)">
            <summary>
            Process a key press.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/>. If the <see cref="T:System.Char"/> is not contained in operating alphabet, return the input.</returns>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.Process(System.Char[])">
            <summary>
            Process the input <see cref="T:System.Char"/> table to the output <see cref="T:System.Char"/> table.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/> table. The <see cref="T:System.Char"/> not contained in operating alphabet as not modified.</returns>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.Process(System.String)">
            <summary>
            Process the string signal to the string signal.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/> table. The <see cref="T:System.Char"/> not contained in operating alphabet as not modified.</returns>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.Process(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Process the input enumerable <see cref="T:System.Char"/> to the output enumerable <see cref="T:System.Char"/>.
            </summary>
            <param name="input"></param>
            <returns>return the processing <see cref="T:System.Char"/> table. The <see cref="T:System.Char"/> not contained in operating alphabet as not modified.</returns>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.Reset">
            <summary>
            Reset the MarkMark machine (all rotor to the initial position).
            </summary>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.ToString">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.Clone">
            <summary>
            Creates a duplicate of this Enigma.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.Clone(System.Boolean)">
            <summary>
            Creates a duplicate of this Enigma and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this Enigma.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.MarkMark.CloneMarkMark(System.Boolean)">
            <summary>
            Creates a duplicate of this Enigma and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Machine.Module">
            <summary>
            Represents a combination of a <see cref="T:Chromatik.Machine.Rotor"/> and a <see cref="T:Chromatik.Machine.PlugBoard"/>
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Module.#ctor(Chromatik.Machine.PlugBoard)">
            <summary>
            Create a module for a <see cref="T:Chromatik.Machine.PlugBoard"/>
            </summary>
            <param name="plugBoard"></param>
        </member>
        <member name="M:Chromatik.Machine.Module.#ctor(Chromatik.Machine.Rotor)">
            <summary>
            Create a module for a <see cref="T:Chromatik.Machine.Rotor"/>
            </summary>
            <param name="rotor"></param>
        </member>
        <member name="M:Chromatik.Machine.Module.#ctor(Chromatik.Machine.PlugBoard,Chromatik.Machine.Rotor)">
            <summary>
            Create a module for a <see cref="T:Chromatik.Machine.Rotor"/> and a <see cref="T:Chromatik.Machine.PlugBoard"/>
            </summary>
            <param name="plugBoard"></param>
            <param name="rotor"></param>
        </member>
        <member name="P:Chromatik.Machine.Module.PlugBoard">
            <summary>
            <see cref="T:Chromatik.Machine.PlugBoard"/> of this module
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Module.Rotor">
            <summary>
            <see cref="T:Chromatik.Machine.Rotor"/> of this module
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Module.RotateToPosition(System.Char)">
            <summary>
            Rotate the rotor to the specified position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Module.Rotate">
            <summary>
            Rotate the rotor to the next position.
            </summary>  
            <returns>true if the next should be rotate</returns>
        </member>
        <member name="M:Chromatik.Machine.Module.ProcessLeft(System.Char)">
            <summary>
            Process the input signal to left output signal (Rotor then Plugs).
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Module.ProcessRight(System.Char)">
            <summary>
            Process the input signal to right output signal (Rotor then Plugs).
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Module.Reset">
            <summary>
            Reset the rotor to the initial position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Module.ToString">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Machine.Module.Clone">
            <summary>
            Creates a duplicate of this Module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Module.Clone(System.Boolean)">
            <summary>
            Creates a duplicate of this Module and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Module.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this Module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Module.CloneModule(System.Boolean)">
            <summary>
            Creates a duplicate of this Module and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Machine.PlugBoard">
            <summary>
            Represent a Plug Board which will switch 2 characters.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.PlugBoard.#ctor">
            <summary>
            Initialize a empty Plug Board.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.PlugBoard.#ctor(System.Collections.Generic.IDictionary{System.Char,System.Char})">
            <summary>
            Initialize a Plug Board with a specified plug.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.PlugBoard.Process(System.Char)">
            <summary>
            Process the input character.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.PlugBoard.AddPlug(System.Char,System.Char)">
            <summary>
            Adds a plug mapping
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Chromatik.Machine.PlugBoard.RemovePlug(System.Char)">
            <summary>
            Removes a plug mapping
            </summary>
            <param name="plug"></param>
        </member>
        <member name="M:Chromatik.Machine.PlugBoard.ToString">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Machine.PlugBoard.Clone">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.PlugBoard.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.PlugBoard.ClonePlugBoard">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Machine.Reflector">
            <summary>
            Represent a reflector.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Reflector.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Initialize a reflector with a set of given wires.
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Reflector.Id">
            <summary>
            Identifiant of the reflector.
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Reflector.Wires">
            <summary>
            Wire matrix of this reflector
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Reflector.Process(System.Char)">
            <summary>
            Process the input signal to the output signal.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Reflector.ToString">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Machine.Reflector.Clone">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Reflector.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Reflector.CloneReflector">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Machine.ReflectorEnigma">
            <summary>
            Represent a reflector for a <see cref="T:Chromatik.Machine.Enigma"/>.
            </summary>
        </member>
        <member name="P:Chromatik.Machine.ReflectorEnigma.A">
            <summary>
            Standard reflector A
            </summary>
        </member>
        <member name="P:Chromatik.Machine.ReflectorEnigma.B">
            <summary>
            Standard reflector B
            </summary>
        </member>
        <member name="P:Chromatik.Machine.ReflectorEnigma.C">
            <summary>
            Standard reflector C
            </summary>
        </member>
        <member name="T:Chromatik.Machine.ReflectorEnigma.Byte">
            <summary>
            Byte reflectors
            </summary>
        </member>
        <member name="P:Chromatik.Machine.ReflectorEnigma.Byte.Boot">
            <summary>
            Byte reflector Boot
            </summary>
        </member>
        <member name="P:Chromatik.Machine.ReflectorEnigma.Byte.OS">
            <summary>
            Byte reflector OS
            </summary>
        </member>
        <member name="P:Chromatik.Machine.ReflectorEnigma.Byte.Bios">
            <summary>
            Byte reflector Bios
            </summary>
        </member>
        <member name="P:Chromatik.Machine.ReflectorEnigma.Byte.UEFI">
            <summary>
            Byte reflector UEFI
            </summary>
        </member>
        <member name="T:Chromatik.Machine.Rotor">
            <summary>
            Base class for create a rotor
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Rotor.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Initialize a rotor with a set of given wires.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Rotor.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Nullable{System.Char})">
            <summary>
            Initialize a rotor with a set of given wires.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Rotor.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Nullable{System.Char},System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Initialize a rotor with a set of given wires and the specifieds rotates.
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Rotor.Id">
            <summary>
            Identifiant of the rotor.
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Rotor.WiresLeft">
            <summary>
            Left wire matrix of this reflector
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Rotor.WiresRight">
            <summary>
            Right wire matrix of this reflector
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Rotor.InitialPosition">
            <summary>
            Initial position of the rotor
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Rotor.OffsetPosition">
            <summary>
            Offset position of the rotor
            </summary>
        </member>
        <member name="P:Chromatik.Machine.Rotor.RotateAt">
            <summary>
            Character cause the rotation of the adjacent rotor
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Rotor.RotateToPosition(System.Char)">
            <summary>
            Rotate the rotor to the specified position.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Rotor.Rotate">
            <summary>
            Rotate the rotor to the next position.
            </summary>
            <returns>true if the next should be rotate</returns>
        </member>
        <member name="M:Chromatik.Machine.Rotor.ProcessLeft(System.Char)">
            <summary>
            Process the input signal to left output signal.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Rotor.ProcessRight(System.Char)">
            <summary>
            Process the input signal to right output signal.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Rotor.Reset">
            <summary>
            Reset the rotor to the initial position.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.Rotor.ToString">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Machine.Rotor.Clone">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Rotor.Clone(System.Boolean)">
            <summary>
            Creates a duplicate of this rotor and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Rotor.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.Rotor.CloneRotor(System.Boolean)">
            <summary>
            Creates a duplicate of this rotor and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Machine.RotorEnigma">
            <summary>
            Represente a Rotor for the <see cref="T:Chromatik.Machine.Enigma"/>
            </summary>
            <summary>
            Represent a rotor for a <see cref="T:Chromatik.Machine.Enigma"/>.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.RotorEnigma.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Initialize a rotor with a set of given wires.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.RotorEnigma.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Nullable{System.Char})">
            <summary>
            Initialize a rotor with a set of given wires.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.RotorEnigma.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Nullable{System.Char},System.Nullable{System.Char})">
            <summary>
            Initialize a rotor with a set of given wires and the specified rotate.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.RotorEnigma.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Char},System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Char})">
            <summary>
            Initialize a rotor with a set of given wires and the specifieds rotates.
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.RotateAt">
            <summary>
            First char to rotate adjacent rotor
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.RotateAtSecondary">
            <summary>
            Secondary char to rotate adjacent rotor
            </summary>
        </member>
        <member name="M:Chromatik.Machine.RotorEnigma.Clone">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.RotorEnigma.Clone(System.Boolean)">
            <summary>
            Creates a duplicate of this rotor and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.RotorEnigma.System#ICloneable#Clone">
            <summary>
            Creates a duplicate of this rotor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.RotorEnigma.CloneRotor(System.Boolean)">
            <summary>
            Creates a duplicate of this rotor and reset then.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.I">
            <summary>
            Standard rotor I
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.II">
            <summary>
            Standard rotor II
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.III">
            <summary>
            Standard rotor III
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.IV">
            <summary>
            Standard rotor IV
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.V">
            <summary>
            Standard rotor V
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.VI">
            <summary>
            Standard rotor VI
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.VII">
            <summary>
            Standard rotor VII
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.VIII">
            <summary>
            Standard rotor VIII
            </summary>
        </member>
        <member name="T:Chromatik.Machine.RotorEnigma.Byte">
            <summary>
            Byte rotors
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.TXT">
            <summary>
            Byte rotors TXT
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.ZIP">
            <summary>
            Byte rotors ZIP
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.BIN">
            <summary>
            Byte rotors BIN
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.JPG">
            <summary>
            Byte rotors JPG
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.PNG">
            <summary>
            Byte rotors PNG
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.MP3">
            <summary>
            Byte rotors MP3
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.MP4">
            <summary>
            Byte rotors MP4
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.WAV">
            <summary>
            Byte rotors WAV
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.ODT">
            <summary>
            Byte rotors ODT
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.SVG">
            <summary>
            Byte rotors SVG
            </summary>
        </member>
        <member name="P:Chromatik.Machine.RotorEnigma.Byte.URL">
            <summary>
            Byte rotors SVG
            </summary>
        </member>
        <member name="T:Chromatik.Machine.WireMatrix">
            <summary>
            Represent a wire matrix with a set of given wires.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.WireMatrix.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Initialize the wire matrix with a set of given wires.
            </summary>
            <param name="wires"></param>
        </member>
        <member name="P:Chromatik.Machine.WireMatrix.Wires">
            <summary>
            The mapping of input wire to output wire.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.WireMatrix.Process(System.Char)">
            <summary>
            Process the input signal to the output signal.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.WireMatrix.Rotate">
            <summary>
            Rotate the wire matrix.
            </summary>
        </member>
        <member name="M:Chromatik.Machine.WireMatrix.Invert">
            <summary>
            Create an inverse of this <see cref="T:Chromatik.Machine.WireMatrix"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.WireMatrix.ProjectCharacter(System.Char)">
            <summary>
            Project a character onto the range use in access wire matrix indexes.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Machine.WireMatrix.ProjectIndex(System.Int32)">
            <summary>
            Project a indexes onto the range use in access wire matrix character.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Unicode.BasicMultilingual">
            <summary>
            Represent the Basic Multilingual plane
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.BasicMultilingual.BMP">
            <summary>
            <see cref="T:Chromatik.Unicode.CodeBlock"/> of the Basic Multilingual plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.C0Controls">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.LatinBasic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.C1Controls">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.LatinSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.LatinExtended_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.LatinExtended_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.InternationalPhoneticAlphabet">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.SpacingModifierLetters">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CombiningDiacriticalMarks">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.GreekCoptic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Cyrillic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CyrillicSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Armenian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Hebrew">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Arabic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Syriac">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.ArabicSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Thaana">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.NKo">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Samaritan">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Mandaic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.SyriacSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.ArabicExtended_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Devanagari">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Bengali">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Gurmukhi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Gujarati">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Oriya">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Tamil">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Telugu">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Kannada">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Malayalam">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Sinhala">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Thai">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Lao">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Tibetan">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Myanmar">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Georgian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.HangulJamo">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Ethiopic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.EthiopicSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Cherokee">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CanadianAboriginalSyllabics">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Ogham">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Runic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Tagalog">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Hanunoo">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Buhid">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Tagbanwa">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Khmer">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Mongolian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CanadianAboriginalSyllabicsExtended">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Limbu">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.TaiLe">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.NewTaiLue">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.KhmerSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Buginese">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.TaiTham">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CombiningDiacriticalMarksExtended">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Balinese">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Sundanese">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Batak">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Lepcha">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.OlChiki">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CyrillicExtended_C">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.SundaneseSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.VedicExtensions">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.PhoneticExtensions">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.PhoneticExtensionsSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CombiningDiacriticalMarksSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.LatinExtendedAdditional">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.GreekExtended">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.PunctuationGeneral">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.SuperscriptsSubscripts">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CurrencySymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CombiningDiacriticalMarksSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.LetterlikeSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.NumberForms">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Arrows">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MathematicaLOperators">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MiscellaneousTechnical">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.ControlPictures">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.OpticalCharacterRecognition">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.EnclosedAlphanumerics">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.BoxDrawing">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.BlockElements">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.GeometricShapes">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MiscellaneousSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Dingbats">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MathematicalMiscellaneousSymbols_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.ArrowsSupplemental_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.BraillePatterns">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.ArrowsSupplemental_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MathematicalMiscellaneousSymbols_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MathematicalOperatorsSupplemental">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.SymbolsArrowsMiscellaneous">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Glagolitic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.LatinExtended_C">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Coptic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.GeorgianSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Tifinagh">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.EthiopicExtended">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CyrillicExtended_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.PunctuationSupplemental">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CJKRadicalsSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.KangxiRadicals">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.IdeographicDescriptionCharacters">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CJKSymbolsPunctuation">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Hiragana">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Katakana">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Bopomofo">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.HangulCompatibilityJamo">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Kanbun">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.BopomofoExtended">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CJKStrokes">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.KatakanaPhoneticExtensions">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CJKEnclosedLettersMonths">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CJKCompatibility">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CJKUnifiedIdeographsExtension_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.YijingHexagramSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CJKUnifiedIdeographs">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.YiSyllables">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.YiRadicals">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Lisu">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Vai">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CyrillicExtended_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Bamum">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.ModifierToneLetters">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.LatinExtended_D">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.SylotiNagri">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.IndicNumberForms">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Phags_pa">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Saurashtra">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.DevanagariExtended">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.KayahLi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Rejang">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.HangulJamoExtended_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Javanese">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MyanmarExtended_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Cham">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MyanmarExtended_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.TaiViet">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MeeteiMayekExtensions">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.EthiopicExtended_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.LatinExtended_E">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CherokeeSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.MeeteiMayek">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.HangulSyllables">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.HangulJamoExtended_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.PrivateUseArea">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CJKCompatibilityIdeographs">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.AlphabeticPresentationForms">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.ArabicPresentationForms_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.VariationSelectors">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.VerticalForms">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CombiningHalfMarks">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.CJKCompatibilityForms">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.SmallFormVariants">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.ArabicPresentationForms_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.HalfwidthFullwidthForms">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.BMP.Specials">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.BasicMultilingual.XmlBMP">
            <summary>
            XmlElement of the Plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.Blocks">
            <summary>
            All <see cref="T:Chromatik.Unicode.CodeBlock"/> of the Basic Multilingual plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.Name">
            <summary>
            Local name of the Basic Multilingual plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.BasicMultilingual.Description">
            <summary>
            Local description of the Basic Multilingual plane
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.BasicMultilingual.#cctor">
            <summary>
            Represents Basic Multilingual Plane of the Unicode Standard
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.BasicMultilingual.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.BasicMultilingual.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.Charset">
            <summary>
            Represent a Charset collection
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.Charset.CharsetFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Load a Charset collection from a XML file
            </summary>
            <param name="Element"></param>
            <param name="lang"></param>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Unicode.Charset.Sets">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.Charset.Sets.ASCII">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.Charset.Sets.Latin_1">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.Charset.Sets.Latin_9">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.Charset.Sets.Windows_1252">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.Charset.Charsets">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.Charset.Name">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.Charset.Description">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.Charset.#cctor">
            <summary>
            Represents a Charsets collection 
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.Charset.GetBlocksNames">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.Charset.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.Charset.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.LanguageType">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.LanguageType.Udefined">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.LanguageType.Systeme">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.LanguageType.Alphabet">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.LanguageType.AlphabetSupplement">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.LanguageType.NotUsed">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.CodeBlock">
            <summary>
            A collection of characters representing a Unicode subset
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.Name">
            <summary>
            Name of Block
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.CodeBlock.#ctor(System.String)">
            <summary>
            Create a Block with a name
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.CodePoints">
            <summary>
            Liste of Code Point characters
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.Item(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.CodeBlock.GetEnumerator">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.Characters">
            <summary>
            Charaters of the Block
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.CodeRange">
            <summary>
            CodeRange of the Block
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.Description">
            <summary>
            Description for the block
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.CodeStart">
            <summary>
            First CodePoint of the block
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.CodeEnd">
            <summary>
            Ending CodePoint of the block
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.Languages">
            <summary>
            Language used
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.Countries">
            <summary>
            Countries used
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.WebCharTable">
            <summary>
            Countries used
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.Type">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlock.RigthToLeft">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.CodeBlock.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the code Block from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.CodeBlockList">
            <summary>
            Represents a list of Block
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodeBlockList.Item(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.CodeBlockList.GetEnumerator">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.CodeBlockList.Add(Chromatik.Unicode.CodeBlock)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.CodePlaneList">
            <summary>
            Represents a liste of Plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodePlaneList.Item(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.CodePlaneList.GetEnumerator">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.CodePlaneList.Add(Chromatik.Unicode.CodePlane)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.CodePlane">
            <summary>
            Represents Plane
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.CodePlane.#ctor(System.String)">
            <summary>
            Create a Plane with a name
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.CodePlane.Name">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.CodePlane.Description">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.CodePlane.Blocks">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.CodePlane.GetBlocksNames">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.CodePlane.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the code Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.CodePoint">
            <summary>
            Contains the Methodes for manipulet Hexadecimal CodePoint, integer and characters of Unicode 
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.Range(System.String,System.String)">
            <summary>
            Get the range between two Code Point 
            </summary>
            <param name="start">First Code Point in hexadecimal format</param>
            <param name="last">Last Code Point (included)</param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.Range(System.Hexa,System.Hexa)">
            <summary>
            Get the range between two Code Point 
            </summary>
            <param name="start">First Code Point in hexadecimal format</param>
            <param name="last">Last Code Point (included)</param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.RangeFilter(System.Hexa[])">
            <summary>
            Remove the duplicate entries and short the array
            </summary>
            <param name="CodePoints"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.RangeFromString(System.String)">
            <summary>
            Get the range from a string format 
            </summary>
            <param name="CodeRange"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.HexaFromString(System.String)">
            <summary>
            Get the Code Point from all character in a String
            </summary>
            <param name="Search">Code Point in hexadecimal format</param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.StringFromRange(System.Hexa[])">
            <summary>
            Get the  string format from range array CodePoints
            </summary>
            <param name="CodePoints">Array of code points</param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.CleanCoderange(System.String)">
            <summary>
            Remove common error
            </summary>
            <param name="codeRange"></param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.IntFromHexa(System.String)">
            <summary>
            Get the <see cref="T:System.Int32"/> value of the Code Point
            </summary>
            <param name="hexa">Code Point in hexadecimal format</param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.HexaFromInt(System.Int32)">
            <summary>
            Get the Code Point of the number
            </summary>
            <param name="code">Code Point in integer number</param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.HexaFromChar(System.String)">
            <summary>
            Get the Code Point from a character
            </summary>
            <param name="c">Character to convert</param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.CharFromHexa(System.String)">
            <summary>
            Get the character of the Code Point
            </summary>
            <param name="hexa">Code Point in hexadecimal format</param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.CharFromInt(System.Int32)">
            <summary>
            Get the character of a <see cref="T:System.Int32"/> value
            </summary>
            <param name="code">Code Point to convert</param>
            <returns></returns>
        </member>
        <member name="M:Chromatik.Unicode.CodePoint.IntFromChar(System.String)">
            <summary>
            Get the Code Point from a character
            </summary>
            <param name="c">Character to convert</param>
            <returns></returns>
        </member>
        <member name="T:Chromatik.Unicode.ConScript">
            <summary>
            Represents the ConScript Unicode Registry
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.ConScript.CSUR">
            <summary>
            ConScript Unicode Registry
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Tengwar">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Cirth">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Engsvanyali">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Kinya">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Ilianore">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Syai">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Verdurian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.aUI">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.AmmanIar">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Streich">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Xaini">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Mizarian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Ziri_nnka">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Sarkai">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Thelwik">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Olaetyan">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Niskloz">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Kazat_akkorou">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Kazvarad">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Zarkhand">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Rozhxh">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Serivelna">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Kelwathi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Saklor">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Rynnan">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Alzetjan">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Telarasso">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Ssuraki">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Gargoyle">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Ophidian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Ferengi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.SeussianLatinExtensions">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Sylabica">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Ewellic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Unifon">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Solresol">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.VisibleSpeech">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Monofon">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Dni">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Aurebesh">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Tonal">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Glaitha_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Glaitha_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Lhenazi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Wanya">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Dein">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Niji">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Aiha">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Klingon">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.KinyaSyllables">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.CSUR.Pikto">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.Blocks">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.Name">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.ConScript.Description">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.ConScript.#cctor">
            <summary>
            Represents ConScript Unicode Registry
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.ConScript.GetBlocksNames">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.ConScript.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.ConScript.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementaryIdeographic">
            <summary>
            Represent the Supplementary Ideographic plane
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementaryIdeographic.SIP">
            <summary>
            Supplementary Ideographic
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryIdeographic.SIP.CJKUnifiedIdeographsExtension_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryIdeographic.SIP.CJKUnifiedIdeographsExtension_C">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryIdeographic.SIP.CJKUnifiedIdeographsExtension_D">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryIdeographic.SIP.CJKUnifiedIdeographsExtension_E">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryIdeographic.SIP.CJKUnifiedIdeographsExtension_F">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryIdeographic.SIP.CJKCompatibilitySupplement">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.SupplementaryIdeographic.XmlSIP">
            <summary>
            XmlElement of the Plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryIdeographic.Blocks">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryIdeographic.Name">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryIdeographic.Description">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryIdeographic.#cctor">
            <summary>
            Represents Basic Multilingual Plane of the Unicode Standard
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryIdeographic.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryIdeographic.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementaryMultilingual">
            <summary>
            Represent the Supplementary Multilingual plane
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementaryMultilingual.SMP">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Linear_B_Syllabary">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Linear_B_Ideograms">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.AegeanNumbers">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.AncientGreekNumbers">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.AncientSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.PhaistosDisc">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Lycian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Carian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.CopticEpactNumbers">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.OldItalic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Gothic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.OldPermic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Ugaritic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.OldPersian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Deseret">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Shavian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Osmanya">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Osage">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Elbasan">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.CaucasianAlbanian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Linear_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.CypriotSyllabary">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.ImperialAramaic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Palmyrene">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Nabataean">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Hatran">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Phoenician">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Lydian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.MeroiticHieroglyphs">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.MeroiticCursive">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Kharoshthi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.OldSouthArabian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.OldNorthArabian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Manichaean">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Avestan">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.InscriptionalParthian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.InscriptionalPahlavi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.PsalterPahlavi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.OldTurkic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.OldHungarian">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.RumiNumeralSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Brahmi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Kaithi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.SoraSompeng">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Chakma">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Mahajani">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Sharada">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.SinhalaArchaicNumbers">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Khojki">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Multani">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Khudawadi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Grantha">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Newa">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Tirhuta">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Siddham">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Modi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.MongolianSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Takri">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Ahom">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.WarangCiti">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.ZanabazarSquare">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Soyombo">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.PauCinHau">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Bhaiksuki">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Marchen">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.MasaramGondi">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Cuneiform">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.CuneiformNumbersPunctuation">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.CuneiformEarlyDynastic">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.EgyptianHieroglyphs">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.AnatolianHieroglyphs">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.BamumSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Mro">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.BassaVah">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.PahawhHmong">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Miao">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.IdeographicSymbolSPunctuation">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Tangut">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.TangutComponents">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.KanaSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.KanaExtended_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Nushu">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Duployan">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.ShorthandFormatControls">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.ByzantineMusicalSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.MusicalSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.AncientGreekMusicalNotation">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.TaiXuanJingSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.CountingRodNumerals">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.MathematicalAlphanumericSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.SuttonSignWriting">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.GlagoliticSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.MendeKikakui">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Adlam">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.ArabicMathematicalAlphabeticSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.MahjongTiles">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.DominoTiles">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.PlayingCards">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.EnclosedAlphanumericSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.EnclosedIdeographicSupplement">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.SymbolsPictographsMiscellaneous">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.Emoticons">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.DingbatsOrnamental">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.TransportMapSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.AlchemicalSymbols">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.GeometricShapesExtended">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.ArrowsSupplementalC">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.SMP.SymbolsPictographsSupplemental">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.Blocks">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.Name">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryMultilingual.Description">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryMultilingual.#cctor">
            <summary>
            Represents Supplementary Multilingual Plane of the Unicode Standard
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryMultilingual.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryMultilingual.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementaryPrivateUseArea_A">
            <summary>
            Represent the Supplementary PrivateUseArea A plane
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementaryPrivateUseArea_A.SPUA_A">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryPrivateUseArea_A.SPUA_A.SupplementaryPrivateUseArea_A">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.SupplementaryPrivateUseArea_A.XmlSPUA_A">
            <summary>
            XmlElement of the Plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryPrivateUseArea_A.Blocks">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryPrivateUseArea_A.Name">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryPrivateUseArea_A.Description">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryPrivateUseArea_A.#cctor">
            <summary>
            Represents Supplementary Special-purpose Plane of the Unicode Standard
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryPrivateUseArea_A.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryPrivateUseArea_A.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementaryPrivateUseArea_B">
            <summary>
            Represent the Supplementary PrivateUseArea B plane
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementaryPrivateUseArea_B.SPUA_B">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryPrivateUseArea_B.SPUA_B.SupplementaryPrivateUseArea_B">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.SupplementaryPrivateUseArea_B.XmlSPUA_B">
            <summary>
            XmlElement of the Plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryPrivateUseArea_B.Blocks">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryPrivateUseArea_B.Name">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementaryPrivateUseArea_B.Description">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryPrivateUseArea_B.#cctor">
            <summary>
            Represents Supplementary Special-purpose Plane of the Unicode Standard
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryPrivateUseArea_B.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementaryPrivateUseArea_B.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementarySpecial_purpose">
            <summary>
            Represent the Tertiary Ideographic plane
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.SupplementarySpecial_purpose.SSP">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementarySpecial_purpose.SSP.Tags">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementarySpecial_purpose.SSP.VariationSelectorsSupplement">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.SupplementarySpecial_purpose.XmlSSP">
            <summary>
            XmlElement of the Plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementarySpecial_purpose.Blocks">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementarySpecial_purpose.Name">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.SupplementarySpecial_purpose.Description">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementarySpecial_purpose.#cctor">
            <summary>
            Represents Supplementary Special-purpose Plane of the Unicode Standard
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementarySpecial_purpose.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.SupplementarySpecial_purpose.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.TertiaryIdeographic">
            <summary>
            Represent the Tertiary Ideographic plane
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.TertiaryIdeographic.TIP">
            <summary></summary>
        </member>
        <member name="F:Chromatik.Unicode.TertiaryIdeographic.XmlTIP">
            <summary>
            XmlElement of the Plane
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.TertiaryIdeographic.Blocks">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.TertiaryIdeographic.Name">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.TertiaryIdeographic.Description">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.TertiaryIdeographic.#cctor">
            <summary>
            Represents Tertiary Ideographic Plane of the Unicode Standard
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.TertiaryIdeographic.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.TertiaryIdeographic.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Basic Multilingual Plane from a XmlElement
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.Unicode">
            <summary>
            Represente the Unicode standard
            </summary>
        </member>
        <member name="P:Chromatik.Unicode.Unicode.Planes">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.Unicode.Blocks">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.Unicode.GetPlanesNames">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.Unicode.GetBlocksNames">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.Unicode.LoadFromXml(System.String,System.String)">
            <summary>
            Get the Unicode from a string Xml
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.Unicode.LoadFromXml(System.Xml.XmlElement,System.String)">
            <summary>
            Get the Unicode from a XmlElement
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.Unicode.Load">
            <summary>
            Load the <see cref="T:Chromatik.Unicode.Unicode"/> class
            </summary>
        </member>
        <member name="M:Chromatik.Unicode.Unicode.Load(System.String)">
            <summary>
            Load the <see cref="T:Chromatik.Unicode.Unicode"/> class in specifique langue
            </summary>
        </member>
        <member name="T:Chromatik.Unicode.UnicodeExceptions">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.UnicodeExceptions.#ctor">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.UnicodeExceptions.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.UnicodeExceptions.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.InvalidCodePointException">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidCodePointException.#ctor">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidCodePointException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.InvalidXmlBlockException">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlBlockException.#ctor">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.InvalidXmlBlockException.DefautMessage">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlBlockException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlBlockException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.InvalidXmlPlaneException">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlPlaneException.#ctor">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.InvalidXmlPlaneException.DefautMessage">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlPlaneException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlPlaneException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.InvalidXmlUnicodeException">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlUnicodeException.#ctor">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.InvalidXmlUnicodeException.DefautMessage">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlUnicodeException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlUnicodeException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.InvalidXmlConScriptException">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlConScriptException.#ctor">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.InvalidXmlConScriptException.DefautMessage">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlConScriptException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlConScriptException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.InvalidXmlCharsetException">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlCharsetException.#ctor">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.InvalidXmlCharsetException.DefautMessage">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlCharsetException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidXmlCharsetException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.InvalidCodeRangeException">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.InvalidCodeRangeException.Mess0">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidCodeRangeException.#ctor">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.InvalidCodeRangeException.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="T:Chromatik.Unicode.XmlUnicodeException">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.XmlUnicodeException.#ctor">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.XmlUnicodeException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.XmlUnicodeException.NoLoaded">
            <summary></summary>
        </member>
        <member name="P:Chromatik.Unicode.XmlUnicodeException.NotFound">
            <summary></summary>
        </member>
        <member name="M:Chromatik.Unicode.XmlUnicodeException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:Microsoft.Win32.Ini">
            <summary>
            Represent a INI file on the system and provide the methods to interact with it.
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Ini.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            Copies a string into the specified section of an initialization file.
            </summary>
            <returns>
            If the function successfully copies the string to the initialization file, the return value is nonzero.
            If the function fails, or if it flushes the cached version of the most recently accessed initialization file, the return value is zero. 
            </returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            Retrieves a string from the specified section in an initialization file.
            </summary>
            <returns>
            The return value is the number of characters copied to the buffer, not including the terminating null character.
            </returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.GetPrivateProfileSection(System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            Retrieves all the keys and values for the specified section of an initialization file.
            </summary>
            <returns>
            The return value is the number of characters copied to the buffer, not including the terminating null character.
            </returns>
        </member>
        <member name="P:Microsoft.Win32.Ini.FileName">
            <summary>
            Path of the file read associated on this <see cref="T:Microsoft.Win32.Ini"/>
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Ini.#ctor(System.String)">
            <summary>
            Create a <see cref="T:Microsoft.Win32.Ini"/> associated with a file on the system.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Microsoft.Win32.Ini.ToString">
            <summary></summary>
        </member>
        <member name="M:Microsoft.Win32.Ini.DeleteSection(System.String)">
            <summary>
            Delete a section in the INI file
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.DeleteKey(System.String,System.String)">
            <summary>
            Delete a key in the INI file
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.ReadString(System.String,System.String)">
            <summary>
            Read a <see cref="T:System.String"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.ReadBoolean(System.String,System.String)">
            <summary>
            Read a <see cref="T:System.Boolean"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.ReadDecimal(System.String,System.String)">
            <summary>
            Read a <see cref="T:System.Decimal"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.ReadDouble(System.String,System.String)">
            <summary>
            Read a <see cref="T:System.Double"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.ReadFloat(System.String,System.String)">
            <summary>
            Read a <see cref="T:System.Single"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.ReadInteger(System.String,System.String)">
            <summary>
            Read a <see cref="T:System.Int32"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.ReadDateTime(System.String,System.String)">
            <summary>
            Read a <see cref="T:System.DateTime"/> value (yyyy/MM/dd HH:mm:ss)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.ReadDate(System.String,System.String)">
            <summary>
            Read a Date value (yyyy/MM/dd)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.WriteString(System.String,System.String,System.String)">
            <summary>
            Write a <see cref="T:System.String"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.WriteBoolean(System.String,System.String,System.Boolean)">
            <summary>
            Write a <see cref="T:System.Boolean"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.WriteDecimal(System.String,System.String,System.Decimal)">
            <summary>
            Write a <see cref="T:System.Decimal"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.WriteDouble(System.String,System.String,System.Double)">
            <summary>
            Write a <see cref="T:System.Double"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.WriteFloat(System.String,System.String,System.Single)">
            <summary>
            Write a <see cref="T:System.Single"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.WriteInteger(System.String,System.String,System.Int32)">
            <summary>
            Write a <see cref="T:System.Int32"/> value
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.WriteDateTime(System.String,System.String,System.DateTime)">
            <summary>
            Write a <see cref="T:System.DateTime"/> value (yyyy/MM/dd HH:mm:ss)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.WriteDate(System.String,System.String,System.DateTime)">
            <summary>
            Write a Date value (yyyy/MM/dd)
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.SectionExists(System.String)">
            <summary>
            Test if the section exist
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.KeyExists(System.String,System.String)">
            <summary>
            Test if the key exist
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Ini.ReadSection(System.String)">
            <summary>
            Read all values of the section
            </summary>
            <param name="section"></param>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObjectCreate">
            <summary>
            Static extension class for <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObjectCreate.Object(System.String)">
            <summary>
            Load a JSON from file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObjectCreate.Object(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Load a JSON from file
            </summary>
            <param name="path"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObjectCreate.ObjectJSON(System.String)">
            <summary>
            Load a JSON from a <see cref="T:System.String"/>
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObjectCreate.ObjectJSON(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Load a JSON from a <see cref="T:System.String"/>
            </summary>
            <param name="json"></param>
            <param name="setting"></param>
            <returns></returns>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JObjectWrite">
            <summary>
            Static class for write a JSON file
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObjectWrite.DefaultSettings">
            <summary>
            Default stting used by the <see cref="T:Newtonsoft.Json.Linq.JObjectWrite"/>
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.Linq.JObjectWrite.Settings">
            <summary>
            Setting used by the <see cref="T:Newtonsoft.Json.Linq.JObjectWrite"/>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObjectWrite.Object(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Write a JSON file from a <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            </summary>
            <param name="path"></param>
            <param name="jobject"></param>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JObjectWrite.Object(System.String,Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Write a JSON file from a <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            </summary>
            <param name="path"></param>
            <param name="jobject"></param>
            <param name="settings"></param>
        </member>
        <member name="T:Newtonsoft.Json.Linq.JsonLinqExtension">
            <summary>
            Static class extension for <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLinqExtension.ValueObjet(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Get the value of the propertie in a <see cref="T:Newtonsoft.Json.Linq.JObject"/>
            </summary>
            <param name="jcontainer"></param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> or null</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLinqExtension.Properties(Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Newtonsoft.Json.Linq.JProperty"/>
            of this object's properties.</summary>
            <param name="jcontainer"></param>
            <returns></returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLinqExtension.Property(Newtonsoft.Json.Linq.JProperty,System.String)">
            <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> with the specified name.
            </summary>
            <param name="jcontainer"></param>
            <param name="name">The property name</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> matched with the specified name or null.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLinqExtension.Property(Newtonsoft.Json.Linq.JProperty,System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JProperty"/> with the specified name. The exact name
            will be searched for first and if no matching property is found then the <see cref="T:System.StringComparison"/>
            will be used to match a property.</summary>
            <param name="jcontainer"></param>
            <param name="name">The property name</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty"/> matched with the specified name or null.</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLinqExtension.AddProperty(Newtonsoft.Json.Linq.JProperty,System.String)">
            <summary>
            Add a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> and return it
            </summary>
            <param name="jproperty"></param>
            <param name="propertyName">Name of the property</param>
            <returns>The added property</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLinqExtension.AddProperty(Newtonsoft.Json.Linq.JProperty,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Add a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> and return it
            </summary>
            <param name="jproperty"></param>
            <param name="propertyName"></param>
            <param name="value">The value</param>
            <returns>The added property</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLinqExtension.AddProperty(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Add a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> and return it
            </summary>
            <param name="jobject"></param>
            <param name="propertyName">Name of the property</param>
            <returns>The added property</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLinqExtension.AddProperty(Newtonsoft.Json.Linq.JObject,System.String,Newtonsoft.Json.Linq.JToken)">
            <summary>
            Add a <see cref="T:Newtonsoft.Json.Linq.JProperty"/> and return it
            </summary>
            <param name="jobject"></param>
            <param name="propertyName">Name of the property</param>
            <param name="value">The value</param>
            <returns>The added property</returns>
        </member>
        <member name="M:Newtonsoft.Json.Linq.JsonLinqExtension.RemoveProperty(Newtonsoft.Json.Linq.JProperty,System.String)">
            <summary>
            Remove the property with the specified name.
            </summary>
            <param name="jproperty"></param>
            <param name="name">Name of the property</param>
            <returns>true if item was successfully removed; otherwise, false.</returns>
        </member>
    </members>
</doc>
